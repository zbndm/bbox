/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/extension/sw.js":
/*!*****************************!*\
  !*** ./src/extension/sw.js ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.a(module, async function (__webpack_handle_async_dependencies__, __webpack_async_result__) { try {
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.push.js */ "./node_modules/core-js/modules/es.array.push.js");
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _storage_bookmark__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/storage/bookmark */ "./src/storage/bookmark.js");
/* harmony import */ var _storage_idb_idb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/storage/idb/idb */ "./src/storage/idb/idb.js");
/* harmony import */ var _helpers_hash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/helpers/hash */ "./src/helpers/hash.js");
/* harmony import */ var _libs_parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/libs/parser */ "./src/libs/parser.js");
/* harmony import */ var _libs_pageRequest__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/libs/pageRequest */ "./src/libs/pageRequest.js");
/* harmony import */ var linkedom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! linkedom */ "./node_modules/linkedom/esm/index.js");
/* harmony import */ var _helpers_tags__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/helpers/tags */ "./src/helpers/tags.js");
/* harmony import */ var _helpers_bookmarks__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/helpers/bookmarks */ "./src/helpers/bookmarks.js");









let installed = true;
const dbCreated = await (0,_storage_idb_idb__WEBPACK_IMPORTED_MODULE_2__["default"])();
if (dbCreated === true) {
  console.warn('Database created..');
  installed = true;
}
const bookmarkStorage = new _storage_bookmark__WEBPACK_IMPORTED_MODULE_1__["default"]();
const folders = await _helpers_bookmarks__WEBPACK_IMPORTED_MODULE_8__["default"].getFolders();

// https://developer.chrome.com/docs/extensions/reference/tabs/#event-onUpdated
chrome.tabs.onUpdated.addListener(async (tabId, info) => {
  if (info.status === 'loading') {
    const tab = await chrome.tabs.get(parseInt(tabId, 10));
    const bookmarkSearchResults = await chrome.bookmarks.search({
      url: tab.url
    });
    chrome.action.setIcon({
      tabId,
      path: bookmarkSearchResults.length === 0 ? '/icon32.png' : '/icon32_saved.png'
    });
  }
});

// https://bugs.chromium.org/p/chromium/issues/detail?id=1185241
// https://stackoverflow.com/questions/53024819/chrome-extension-sendresponse-not-waiting-for-async-function/53024910#53024910
const onMessage = (msg, port) => {
  console.warn('Received', msg, 'from', port.sender);
  if (msg.action === 'cache') {
    console.warn('Caching page...');
    const storageIndex = (0,_helpers_hash__WEBPACK_IMPORTED_MODULE_3__["default"])(msg.data.url);
    chrome.storage.session.set({
      [storageIndex]: msg.data
    });
  }
};
const deleteTimer = port => {
  if (port.timer) {
    clearTimeout(port.timer);
    delete port.timer;
  }
};
const forceReconnect = port => {
  console.warn('Reconnect...');
  deleteTimer(port);
  port.disconnect();
};
chrome.runtime.onConnect.addListener(port => {
  if (port.name !== 'favbox') return;
  port.onMessage.addListener(onMessage);
  port.onDisconnect.addListener(deleteTimer);
  port.timer = setTimeout(forceReconnect, 150000, port);
});

// https:// developer.chrome.com/docs/extensions/reference/bookmarks/#event-onCreated
chrome.bookmarks.onCreated.addListener(async (id, bookmark) => {
  console.log('üéâ Bookmark has been created..');
  try {
    updateExtensionIcon(bookmark.url, false);
  } catch (e) {
    console.error(e);
  }
  const storageIndex = (0,_helpers_hash__WEBPACK_IMPORTED_MODULE_3__["default"])(bookmark.url);
  let pageInfo = await chrome.storage.session.get(storageIndex);
  console.warn(pageInfo);
  if (Object.keys(pageInfo).length === 0) {
    console.log('Cache is empty. Fetching data.. üåé');
    try {
      const page = await new _libs_pageRequest__WEBPACK_IMPORTED_MODULE_5__["default"](bookmark.url).getData();
      const {
        document
      } = (0,linkedom__WEBPACK_IMPORTED_MODULE_6__.parseHTML)(page.text);
      pageInfo = new _libs_parser__WEBPACK_IMPORTED_MODULE_4__["default"](bookmark.url, document).getFullPageInfo();
    } catch (e) {
      console.error(e);
    }
  } else {
    pageInfo = pageInfo[storageIndex];
  }
  try {
    const folder = folders.find(item => parseInt(item.id, 10) === parseInt(bookmark.parentId, 10));
    const entity = {
      id: parseInt(bookmark.id, 10),
      folderId: parseInt(folder.id, 10),
      folderName: folder.title,
      title: _helpers_tags__WEBPACK_IMPORTED_MODULE_7__["default"].getTitle(bookmark.title),
      url: bookmark.url,
      description: pageInfo.description ?? null,
      favicon: pageInfo.favicon ?? null,
      image: pageInfo.image ?? null,
      domain: pageInfo.domain ?? null,
      tags: _helpers_tags__WEBPACK_IMPORTED_MODULE_7__["default"].getTags(bookmark.title),
      type: pageInfo.type,
      keywords: pageInfo.keywords,
      favorite: 0,
      error: 0,
      dateAdded: bookmark.dateAdded,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };
    await bookmarkStorage.create(entity);
    chrome.runtime.sendMessage({
      type: 'swDbUpdated',
      data: {
        installed
      }
    });
  } catch (e) {
    console.error('üéâ', e, id, bookmark);
  }
});

// https://developer.chrome.com/docs/extensions/reference/bookmarks/#event-onChanged
chrome.bookmarks.onChanged.addListener(async (id, changeInfo) => {
  try {
    console.log('üîÑ Bookmark has been updated..', id, changeInfo);
    await bookmarkStorage.update(id, {
      title: _helpers_tags__WEBPACK_IMPORTED_MODULE_7__["default"].getTitle(changeInfo.title),
      tags: _helpers_tags__WEBPACK_IMPORTED_MODULE_7__["default"].getTags(changeInfo.title),
      url: changeInfo.url,
      updatedAt: new Date().toISOString()
    });
    await bookmarkStorage.updateFolders(id, changeInfo.title);
    chrome.runtime.sendMessage({
      type: 'swDbUpdated',
      data: {
        installed
      }
    });
  } catch (e) {
    console.error('üîÑ', e, id, changeInfo);
  }
});

// https://developer.chrome.com/docs/extensions/reference/bookmarks/#event-onMoved
chrome.bookmarks.onMoved.addListener(async (id, moveInfo) => {
  try {
    console.log('üóÇ Bookmark has been moved..', id, moveInfo);
    const folder = folders.find(item => item.id === moveInfo.parentId);
    console.warn(folder);
    await bookmarkStorage.update(id, {
      folderId: parseInt(folder.id, 10),
      folderName: folder.title,
      updatedAt: new Date().toISOString()
    });
    chrome.runtime.sendMessage({
      type: 'swDbUpdated',
      data: {
        installed
      }
    });
  } catch (e) {
    console.error('üóÇ', e, id, moveInfo);
  }
});

// https://developer.chrome.com/docs/extensions/reference/bookmarks/#event-onRemoved
chrome.bookmarks.onRemoved.addListener(async (id, removeInfo) => {
  try {
    const bookmark = await bookmarkStorage.getById(id);
    if (bookmark) {
      const bookmarkSearchResults = await chrome.bookmarks.search({
        url: bookmark.url
      });
      if (bookmarkSearchResults.length === 0) {
        updateExtensionIcon(bookmark.url, true);
      }
    }
  } catch (e) {
    console.error(e);
  }
  try {
    console.log('üóëÔ∏è Bookmark has been removed..', id, removeInfo);
    await bookmarkStorage.remove(id);
    chrome.runtime.sendMessage({
      type: 'swDbUpdated',
      data: {
        installed
      }
    });
  } catch (e) {
    console.error('üóëÔ∏è', e, id, removeInfo);
  }
});
const storage = await chrome.storage.session.get('import');
if (storage?.import !== true) {
  console.time('Execution time');
  const total = await _helpers_bookmarks__WEBPACK_IMPORTED_MODULE_8__["default"].total();
  console.log('‚≠êÔ∏è Total bookmarks', total);
  let batch = [];
  let processed = 0;
  const root = await chrome.bookmarks.getChildren('0');
  for await (const bookmark of traverseTreeRecursively(root)) {
    processed += 1;
    batch.push(bookmark);
    if (batch.length % 10 === 0 || processed === total) {
      try {
        await sync(batch);
        batch = [];
        const progress = Math.round(processed / total * 100);
        chrome.runtime.sendMessage({
          type: 'swDbUpdated',
          data: {
            progress,
            installed
          }
        });
      } catch (e) {
        console.error(e);
      }
    }
  }
  await chrome.storage.session.set({
    import: true
  });
  console.timeEnd('Execution time');
} else {
  console.warn('üïí Sync in current session already finished..');
}

// service worker funcitions
async function* traverseTreeRecursively(bookmarks) {
  for (const bookmark of bookmarks) {
    if (Object.hasOwn(bookmark, 'url')) {
      yield bookmark;
    } else {
      // eslint-disable-next-line no-await-in-loop
      yield* traverseTreeRecursively(await chrome.bookmarks.getChildren(String(bookmark.id)));
    }
  }
}
async function updateExtensionIcon(url, defaultIcon = true) {
  const urlWithoutAnchor = url.replace(/#.*$/, '');
  console.warn('Update icon by', url, urlWithoutAnchor);
  const tabs = await chrome.tabs.query({
    url: urlWithoutAnchor
  });
  console.warn('Tabs to update', tabs);
  for (const tab of tabs) {
    chrome.action.setIcon({
      tabId: tab.id,
      path: defaultIcon ? '/icon32.png' : '/icon32_saved.png'
    });
  }
}
async function sync(bookmarks) {
  console.warn('syncing bookmarks..', bookmarks);
  let promises = [];
  const synced = await bookmarkStorage.getByIds(bookmarks.map(item => parseInt(item.id, 10)));
  if (synced.length === bookmarks.length) return;
  for (const bookmark of bookmarks) {
    if (!synced.find(item => parseInt(item.id, 10) === parseInt(bookmark.id, 10))) {
      promises.push(fetchBookmark(bookmark));
    }
  }
  try {
    if (promises.length !== 0) {
      const response = await Promise.all(promises);
      console.warn('promisse', response);
      await bookmarkStorage.createMultiple(response);
    }
  } catch (e) {
    console.error(e);
  } finally {
    promises = [];
  }
}
async function fetchBookmark(bookmark) {
  const folder = folders.find(item => item.id === bookmark.parentId);
  let entity = {
    id: parseInt(bookmark.id, 10),
    folderId: parseInt(folder.id, 10),
    folderName: folder.title,
    title: _helpers_tags__WEBPACK_IMPORTED_MODULE_7__["default"].getTitle(bookmark.title),
    description: null,
    favicon: null,
    image: null,
    domain: null,
    type: null,
    keywords: [],
    url: bookmark.url,
    tags: _helpers_tags__WEBPACK_IMPORTED_MODULE_7__["default"].getTags(bookmark.title),
    favorite: 0,
    error: 0,
    dateAdded: bookmark.dateAdded,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  };
  try {
    const page = await new _libs_pageRequest__WEBPACK_IMPORTED_MODULE_5__["default"](bookmark.url).getData();
    const {
      document
    } = (0,linkedom__WEBPACK_IMPORTED_MODULE_6__.parseHTML)(page.text);
    const pageInfo = new _libs_parser__WEBPACK_IMPORTED_MODULE_4__["default"](bookmark.url, document).getFullPageInfo();
    entity = {
      ...entity,
      ...pageInfo
    };
    return entity;
  } catch (e) {
    console.error(e);
    entity.error = 1;
    return entity;
  }
}
__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } }, 1);

/***/ }),

/***/ "./src/helpers/bookmarks.js":
/*!**********************************!*\
  !*** ./src/helpers/bookmarks.js ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.push.js */ "./node_modules/core-js/modules/es.array.push.js");
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__);

const bookmarkHelper = {
  total: async () => {
    const items = await chrome.bookmarks.getTree();
    let count = 0;
    function countBookmarks(bookmarks) {
      bookmarks.forEach(bookmark => {
        if (bookmark.url) {
          count += 1;
        }
        if (bookmark.children) {
          countBookmarks(bookmark.children);
        }
      });
    }
    countBookmarks(items);
    return count;
  },
  async getFolders() {
    const tree = await chrome.bookmarks.getTree();
    const folders = [];
    function getFolders(bookmarks) {
      for (const bookmark of bookmarks) {
        if (bookmark.children) {
          if (bookmark.title !== '') {
            folders.push({
              id: bookmark.id,
              index: bookmark.index,
              parentId: bookmark.parentId,
              dateAdded: bookmark.dateAdded,
              title: bookmark.title
            });
          }
          getFolders(bookmark.children);
        }
      }
    }
    getFolders(tree);
    return folders;
  },
  async getFoldersFlatten() {
    const folders = await this.getFolders();
    return folders.map(item => item.title);
  }
};
/* harmony default export */ __webpack_exports__["default"] = (bookmarkHelper);

/***/ }),

/***/ "./src/helpers/hash.js":
/*!*****************************!*\
  !*** ./src/helpers/hash.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
const makeHash = string => {
  let hash = 0;
  for (let i = 0; i < string.length; i += 1) {
    hash = (hash + string.charCodeAt(i) * i) % Number.MAX_SAFE_INTEGER;
  }
  return hash.toString();
};
/* harmony default export */ __webpack_exports__["default"] = (makeHash);

/***/ }),

/***/ "./src/helpers/tags.js":
/*!*****************************!*\
  !*** ./src/helpers/tags.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
const tagHelper = {
  toString: (string, tags) => tags.length === 0 ? string : `${string} ${String.fromCodePoint(0x1f3f7)} ${tags.map(tag => `#${tag}`).join(' ')}`,
  getTitle: string => string.split(String.fromCodePoint(0x1f3f7)).shift().trim(),
  getTags: string => {
    const parts = string.split(String.fromCodePoint(0x1f3f7)).map(tag => tag.trim());
    if (parts.length === 1) {
      return [];
    }
    return parts.pop().match(/([^#]+)/g).map(tag => tag.trim());
  }
};
/* harmony default export */ __webpack_exports__["default"] = (tagHelper);

/***/ }),

/***/ "./src/libs/pageRequest.js":
/*!*********************************!*\
  !*** ./src/libs/pageRequest.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ PageRequest; }
/* harmony export */ });
/* harmony import */ var _workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldInitSpec_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js */ "./node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js");
/* harmony import */ var _workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldGet_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js */ "./node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js");
/* harmony import */ var _workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldSet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js */ "./node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js");



var _url = /*#__PURE__*/new WeakMap();
class PageRequest {
  constructor(url) {
    (0,_workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldInitSpec_js__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _url, {
      writable: true,
      value: void 0
    });
    (0,_workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldSet_js__WEBPACK_IMPORTED_MODULE_2__["default"])(this, _url, url);
  }
  async getData() {
    const response = await fetch((0,_workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldGet_js__WEBPACK_IMPORTED_MODULE_1__["default"])(this, _url));
    if (!response.ok) {
      const message = `An error has occurred: ${response.status}`;
      throw new Error(message);
    }
    const text = await response.text();
    return {
      text,
      contentType: response.headers.get('Content-Type')
    };
  }
}

/***/ }),

/***/ "./src/libs/parser.js":
/*!****************************!*\
  !*** ./src/libs/parser.js ***!
  \****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ Parser; }
/* harmony export */ });
/* harmony import */ var _workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldInitSpec_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js */ "./node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js");
/* harmony import */ var _workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldGet_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js */ "./node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js");
/* harmony import */ var _workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldSet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js */ "./node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js");



var _html = /*#__PURE__*/new WeakMap();
var _url = /*#__PURE__*/new WeakMap();
class Parser {
  constructor(url, html) {
    (0,_workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldInitSpec_js__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _html, {
      writable: true,
      value: void 0
    });
    (0,_workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldInitSpec_js__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _url, {
      writable: true,
      value: void 0
    });
    (0,_workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldSet_js__WEBPACK_IMPORTED_MODULE_2__["default"])(this, _url, url);
    (0,_workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldSet_js__WEBPACK_IMPORTED_MODULE_2__["default"])(this, _html, html);
  }
  getTitle() {
    const title = (0,_workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldGet_js__WEBPACK_IMPORTED_MODULE_1__["default"])(this, _html).querySelector('meta[property="og:title"], meta[name="twitter:title"]')?.getAttribute('content') ?? (0,_workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldGet_js__WEBPACK_IMPORTED_MODULE_1__["default"])(this, _html).title ?? (0,_workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldGet_js__WEBPACK_IMPORTED_MODULE_1__["default"])(this, _html).querySelector('h1')?.textContent ?? (0,_workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldGet_js__WEBPACK_IMPORTED_MODULE_1__["default"])(this, _html).querySelector('h2')?.textContent;
    return title || null;
  }
  getDescription() {
    const selectors = ['meta[property="og:description"]', 'meta[name="twitter:description"]', 'meta[name="description"]'];
    return (0,_workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldGet_js__WEBPACK_IMPORTED_MODULE_1__["default"])(this, _html).querySelector(selectors.join(','))?.getAttribute('content') ?? null;
  }
  getImage() {
    const selectors = ['meta[property="og:image"]', 'meta[name="twitter:image"]', 'meta[property="og:image:url"]', 'link[rel="image_src"]', 'meta[property="forem:logo"]'];
    let image = (0,_workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldGet_js__WEBPACK_IMPORTED_MODULE_1__["default"])(this, _html).querySelector(selectors.join(','));
    image = (image?.getAttribute('content') || image?.getAttribute('href')) ?? this.getAppleTouchIcon();
    return image ? new URL(image, (0,_workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldGet_js__WEBPACK_IMPORTED_MODULE_1__["default"])(this, _url)).href : null;
  }
  getAppleTouchIcon() {
    let maxSize = 0;
    let maxIcon = null;
    const icons = (0,_workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldGet_js__WEBPACK_IMPORTED_MODULE_1__["default"])(this, _html).querySelectorAll('link[rel="apple-touch-icon"][sizes]');
    // eslint-disable-next-line no-restricted-syntax
    for (const icon of icons) {
      const size = parseInt(icon.getAttribute('sizes').split('x')[0], 10);
      if (size > maxSize) {
        maxSize = size;
        maxIcon = icon;
      }
    }
    return maxIcon?.getAttribute('href') ?? null;
  }
  getDomain() {
    return new URL((0,_workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldGet_js__WEBPACK_IMPORTED_MODULE_1__["default"])(this, _url)).hostname;
  }
  getFavicon() {
    const selectors = ['link[rel="shortcut icon"]', 'link[rel="icon"]'];
    const link = (0,_workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldGet_js__WEBPACK_IMPORTED_MODULE_1__["default"])(this, _html).querySelector(selectors.join(','))?.getAttribute('href');
    return link ? new URL(link, (0,_workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldGet_js__WEBPACK_IMPORTED_MODULE_1__["default"])(this, _url)).href : null;
  }
  getUrl() {
    return (0,_workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldGet_js__WEBPACK_IMPORTED_MODULE_1__["default"])(this, _url);
  }
  getType() {
    return (0,_workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldGet_js__WEBPACK_IMPORTED_MODULE_1__["default"])(this, _html).querySelector('meta[property="og:type"]')?.getAttribute('content') ?? null;
  }
  getKeywords() {
    const selectors = ['meta[name="keywords"]', 'meta[name="keynews_keywordswords"]'];
    const keywords = (0,_workspace_bbox_node_modules_babel_runtime_helpers_esm_classPrivateFieldGet_js__WEBPACK_IMPORTED_MODULE_1__["default"])(this, _html).querySelector(selectors.join(','))?.getAttribute('content');
    if (!keywords || keywords.length === 0) return null;
    return keywords.split(',').map(keyword => keyword.trim()).filter(keyword => keyword.length > 0);
  }
  getFullPageInfo() {
    return {
      title: this.getTitle(),
      description: this.getDescription(),
      image: this.getImage(),
      domain: this.getDomain(),
      favicon: this.getFavicon(),
      url: this.getUrl(),
      keywords: this.getKeywords(),
      type: this.getType()
    };
  }
}

/***/ }),

/***/ "./src/storage/bookmark.js":
/*!*********************************!*\
  !*** ./src/storage/bookmark.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ BookmarkStorage; }
/* harmony export */ });
/* harmony import */ var _idb_connection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./idb/connection */ "./src/storage/idb/connection.js");

class BookmarkStorage {
  constructor() {
    this.tableName = 'bookmarks';
  }
  search(conditions, skip = 0, limit = 50) {
    const whereConditions = {};
    if (conditions.tags.length) {
      Object.assign(whereConditions, {
        tags: {
          in: [...conditions.tags]
        }
      });
    }
    if (conditions.folders.length) {
      Object.assign(whereConditions, {
        folderName: {
          in: [...conditions.folders]
        }
      });
    }
    if (conditions.domains.length) {
      Object.assign(whereConditions, {
        domain: {
          in: [...conditions.domains]
        }
      });
    }
    if (conditions.term.length) {
      Object.assign(whereConditions, {
        searchKeyPath: {
          like: `%${conditions.term}%`
        }
      });
    }
    return _idb_connection__WEBPACK_IMPORTED_MODULE_0__["default"].select({
      from: this.tableName,
      limit,
      skip,
      order: {
        by: 'id',
        type: conditions.sort
      },
      where: Object.keys(whereConditions).length === 0 ? null : whereConditions
    });
  }
  create(entity) {
    return _idb_connection__WEBPACK_IMPORTED_MODULE_0__["default"].insert({
      into: this.tableName,
      values: [entity],
      return: true
    });
  }
  update(id, data) {
    return _idb_connection__WEBPACK_IMPORTED_MODULE_0__["default"].update({
      in: this.tableName,
      set: data,
      where: {
        id: Number(id)
      }
    });
  }
  remove(id) {
    return _idb_connection__WEBPACK_IMPORTED_MODULE_0__["default"].remove({
      from: this.tableName,
      where: {
        id: Number(id)
      }
    });
  }
  count(id) {
    return _idb_connection__WEBPACK_IMPORTED_MODULE_0__["default"].count({
      from: this.tableName,
      where: {
        id: Number(id)
      }
    });
  }
  createMultiple(data) {
    return _idb_connection__WEBPACK_IMPORTED_MODULE_0__["default"].insert({
      into: this.tableName,
      values: data,
      validation: false,
      skipDataCheck: true,
      ignore: true
    });
  }
  getByIds(ids) {
    console.warn(ids);
    return _idb_connection__WEBPACK_IMPORTED_MODULE_0__["default"].select({
      from: this.tableName,
      where: {
        id: {
          in: ids
        }
      }
    });
  }
  updateFolders(id, folder) {
    return _idb_connection__WEBPACK_IMPORTED_MODULE_0__["default"].update({
      in: this.tableName,
      set: {
        folderName: folder
      },
      where: {
        folderId: id
      }
    });
  }
  async getById(id) {
    const response = await _idb_connection__WEBPACK_IMPORTED_MODULE_0__["default"].select({
      from: this.tableName,
      limit: 1,
      where: {
        id: parseInt(id, 10)
      }
    });
    return response.length === 1 ? response.shift() : null;
  }
  async getTags() {
    const response = await _idb_connection__WEBPACK_IMPORTED_MODULE_0__["default"].select({
      from: this.tableName,
      flatten: ['tags'],
      groupBy: 'tags',
      order: {
        by: 'tags',
        type: 'asc'
      }
    });
    return response.map(item => item.tags);
  }
  async getDomains() {
    const response = await _idb_connection__WEBPACK_IMPORTED_MODULE_0__["default"].select({
      from: this.tableName,
      // flatten: ['domain'],
      groupBy: 'domain',
      order: {
        by: 'domain',
        type: 'asc'
      }
    });
    return response.map(item => item.domain);
  }
  async getKeywords() {
    const response = await _idb_connection__WEBPACK_IMPORTED_MODULE_0__["default"].select({
      from: this.tableName,
      flatten: ['keywords'],
      groupBy: 'keywords',
      order: {
        by: 'keywords',
        type: 'asc'
      }
    });
    return response.map(item => item.keywords);
  }
}

/***/ }),

/***/ "./src/storage/idb/connection.js":
/*!***************************************!*\
  !*** ./src/storage/idb/connection.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jsstore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jsstore */ "./node_modules/jsstore/dist/jsstore.commonjs2.js");
/* harmony import */ var jsstore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jsstore__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var jsstore_dist_worker_injector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jsstore/dist/worker_injector */ "./node_modules/jsstore/dist/worker_injector/index.js");
/* harmony import */ var jsstore_dist_worker_injector__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jsstore_dist_worker_injector__WEBPACK_IMPORTED_MODULE_1__);


const connection = new jsstore__WEBPACK_IMPORTED_MODULE_0__.Connection();
if (true) {
  connection.logStatus = true;
}
connection.addPlugin((jsstore_dist_worker_injector__WEBPACK_IMPORTED_MODULE_1___default()));
/* harmony default export */ __webpack_exports__["default"] = (connection);

/***/ }),

/***/ "./src/storage/idb/idb.js":
/*!********************************!*\
  !*** ./src/storage/idb/idb.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jsstore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jsstore */ "./node_modules/jsstore/dist/jsstore.commonjs2.js");
/* harmony import */ var jsstore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jsstore__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _connection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./connection */ "./src/storage/idb/connection.js");


const getDb = () => {
  const tblBookmarks = {
    name: 'bookmarks',
    columns: {
      id: {
        primaryKey: true,
        autoIncrement: false,
        dataType: jsstore__WEBPACK_IMPORTED_MODULE_1__.DATA_TYPE.Number
      },
      folderId: {
        dataType: jsstore__WEBPACK_IMPORTED_MODULE_1__.DATA_TYPE.Number,
        enableSearch: true
      },
      folderName: {
        dataType: jsstore__WEBPACK_IMPORTED_MODULE_1__.DATA_TYPE.String,
        enableSearch: true
      },
      title: {
        notNull: true,
        dataType: jsstore__WEBPACK_IMPORTED_MODULE_1__.DATA_TYPE.String,
        enableSearch: true
      },
      description: {
        dataType: jsstore__WEBPACK_IMPORTED_MODULE_1__.DATA_TYPE.String,
        enableSearch: true
      },
      domain: {
        dataType: jsstore__WEBPACK_IMPORTED_MODULE_1__.DATA_TYPE.String,
        enableSearch: true
      },
      url: {
        dataType: jsstore__WEBPACK_IMPORTED_MODULE_1__.DATA_TYPE.String,
        enableSearch: true
      },
      favicon: {
        dataType: jsstore__WEBPACK_IMPORTED_MODULE_1__.DATA_TYPE.String,
        enableSearch: false
      },
      type: {
        dataType: jsstore__WEBPACK_IMPORTED_MODULE_1__.DATA_TYPE.String,
        enableSearch: true
      },
      keywords: {
        dataType: jsstore__WEBPACK_IMPORTED_MODULE_1__.DATA_TYPE.Array,
        multiEntry: true,
        default: [],
        enableSearch: true
      },
      image: {
        dataType: jsstore__WEBPACK_IMPORTED_MODULE_1__.DATA_TYPE.String,
        enableSearch: false
      },
      tags: {
        dataType: jsstore__WEBPACK_IMPORTED_MODULE_1__.DATA_TYPE.Array,
        multiEntry: true,
        default: [],
        enableSearch: true
      },
      favorite: {
        notNull: true,
        dataType: jsstore__WEBPACK_IMPORTED_MODULE_1__.DATA_TYPE.Number,
        default: 0
      },
      error: {
        notNull: true,
        dataType: jsstore__WEBPACK_IMPORTED_MODULE_1__.DATA_TYPE.Number,
        default: 0
      },
      searchKeyPath: {
        keyPath: ['title', 'description', 'url']
      },
      createdAt: {
        dataType: jsstore__WEBPACK_IMPORTED_MODULE_1__.DATA_TYPE.String,
        notNull: true,
        enableSearch: true
      },
      updatedAt: {
        dataType: jsstore__WEBPACK_IMPORTED_MODULE_1__.DATA_TYPE.String,
        notNull: true,
        enableSearch: true
      },
      dateAdded: {
        notNull: true,
        dataType: jsstore__WEBPACK_IMPORTED_MODULE_1__.DATA_TYPE.Number,
        enableSearch: true
      }
    }
  };
  const database = {
    name: 'favbox_db',
    tables: [tblBookmarks]
  };
  return database;
};
const initStorage = async () => {
  const newDb = await _connection__WEBPACK_IMPORTED_MODULE_0__["default"].initDb(getDb());
  return newDb;
};
/* harmony default export */ __webpack_exports__["default"] = (initStorage);

/***/ }),

/***/ "./node_modules/boolbase/index.js":
/*!****************************************!*\
  !*** ./node_modules/boolbase/index.js ***!
  \****************************************/
/***/ (function(module) {

module.exports = {
	trueFunc: function trueFunc(){
		return true;
	},
	falseFunc: function falseFunc(){
		return false;
	}
};

/***/ }),

/***/ "./node_modules/core-js/internals/a-callable.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/a-callable.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var tryToString = __webpack_require__(/*! ../internals/try-to-string */ "./node_modules/core-js/internals/try-to-string.js");

var $TypeError = TypeError;

// `Assert: IsCallable(argument) is true`
module.exports = function (argument) {
  if (isCallable(argument)) return argument;
  throw $TypeError(tryToString(argument) + ' is not a function');
};


/***/ }),

/***/ "./node_modules/core-js/internals/an-object.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/an-object.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

var $String = String;
var $TypeError = TypeError;

// `Assert: Type(argument) is Object`
module.exports = function (argument) {
  if (isObject(argument)) return argument;
  throw $TypeError($String(argument) + ' is not an object');
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-includes.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/array-includes.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ "./node_modules/core-js/internals/to-absolute-index.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "./node_modules/core-js/internals/length-of-array-like.js");

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = lengthOfArrayLike(O);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare -- NaN check
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare -- NaN check
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-set-length.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/internals/array-set-length.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var isArray = __webpack_require__(/*! ../internals/is-array */ "./node_modules/core-js/internals/is-array.js");

var $TypeError = TypeError;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Safari < 13 does not throw an error in this case
var SILENT_ON_NON_WRITABLE_LENGTH_SET = DESCRIPTORS && !function () {
  // makes no sense without proper strict mode support
  if (this !== undefined) return true;
  try {
    // eslint-disable-next-line es/no-object-defineproperty -- safe
    Object.defineProperty([], 'length', { writable: false }).length = 1;
  } catch (error) {
    return error instanceof TypeError;
  }
}();

module.exports = SILENT_ON_NON_WRITABLE_LENGTH_SET ? function (O, length) {
  if (isArray(O) && !getOwnPropertyDescriptor(O, 'length').writable) {
    throw $TypeError('Cannot set read only .length');
  } return O.length = length;
} : function (O, length) {
  return O.length = length;
};


/***/ }),

/***/ "./node_modules/core-js/internals/classof-raw.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/classof-raw.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");

var toString = uncurryThis({}.toString);
var stringSlice = uncurryThis(''.slice);

module.exports = function (it) {
  return stringSlice(toString(it), 8, -1);
};


/***/ }),

/***/ "./node_modules/core-js/internals/copy-constructor-properties.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/internals/copy-constructor-properties.js ***!
  \***********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var ownKeys = __webpack_require__(/*! ../internals/own-keys */ "./node_modules/core-js/internals/own-keys.js");
var getOwnPropertyDescriptorModule = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");

module.exports = function (target, source, exceptions) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
      defineProperty(target, key, getOwnPropertyDescriptor(source, key));
    }
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/create-non-enumerable-property.js":
/*!**************************************************************************!*\
  !*** ./node_modules/core-js/internals/create-non-enumerable-property.js ***!
  \**************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ "./node_modules/core-js/internals/create-property-descriptor.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/internals/create-property-descriptor.js ***!
  \**********************************************************************/
/***/ (function(module) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ "./node_modules/core-js/internals/define-built-in.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/define-built-in.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var makeBuiltIn = __webpack_require__(/*! ../internals/make-built-in */ "./node_modules/core-js/internals/make-built-in.js");
var defineGlobalProperty = __webpack_require__(/*! ../internals/define-global-property */ "./node_modules/core-js/internals/define-global-property.js");

module.exports = function (O, key, value, options) {
  if (!options) options = {};
  var simple = options.enumerable;
  var name = options.name !== undefined ? options.name : key;
  if (isCallable(value)) makeBuiltIn(value, name, options);
  if (options.global) {
    if (simple) O[key] = value;
    else defineGlobalProperty(key, value);
  } else {
    try {
      if (!options.unsafe) delete O[key];
      else if (O[key]) simple = true;
    } catch (error) { /* empty */ }
    if (simple) O[key] = value;
    else definePropertyModule.f(O, key, {
      value: value,
      enumerable: false,
      configurable: !options.nonConfigurable,
      writable: !options.nonWritable
    });
  } return O;
};


/***/ }),

/***/ "./node_modules/core-js/internals/define-global-property.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/define-global-property.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

// eslint-disable-next-line es/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;

module.exports = function (key, value) {
  try {
    defineProperty(global, key, { value: value, configurable: true, writable: true });
  } catch (error) {
    global[key] = value;
  } return value;
};


/***/ }),

/***/ "./node_modules/core-js/internals/descriptors.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/descriptors.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

// Detect IE8's incomplete defineProperty implementation
module.exports = !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
});


/***/ }),

/***/ "./node_modules/core-js/internals/document-all.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/document-all.js ***!
  \********************************************************/
/***/ (function(module) {

var documentAll = typeof document == 'object' && document.all;

// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot
// eslint-disable-next-line unicorn/no-typeof-undefined -- required for testing
var IS_HTMLDDA = typeof documentAll == 'undefined' && documentAll !== undefined;

module.exports = {
  all: documentAll,
  IS_HTMLDDA: IS_HTMLDDA
};


/***/ }),

/***/ "./node_modules/core-js/internals/document-create-element.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/document-create-element.js ***!
  \*******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};


/***/ }),

/***/ "./node_modules/core-js/internals/does-not-exceed-safe-integer.js":
/*!************************************************************************!*\
  !*** ./node_modules/core-js/internals/does-not-exceed-safe-integer.js ***!
  \************************************************************************/
/***/ (function(module) {

var $TypeError = TypeError;
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF; // 2 ** 53 - 1 == 9007199254740991

module.exports = function (it) {
  if (it > MAX_SAFE_INTEGER) throw $TypeError('Maximum allowed index exceeded');
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/internals/engine-user-agent.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-user-agent.js ***!
  \*************************************************************/
/***/ (function(module) {

module.exports = typeof navigator != 'undefined' && String(navigator.userAgent) || '';


/***/ }),

/***/ "./node_modules/core-js/internals/engine-v8-version.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-v8-version.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "./node_modules/core-js/internals/engine-user-agent.js");

var process = global.process;
var Deno = global.Deno;
var versions = process && process.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  // in old Chrome, versions of V8 isn't V8 = Chrome / 10
  // but their correct versions are not interesting for us
  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
}

// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
// so check `userAgent` even if `.v8` exists, but 0
if (!version && userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = +match[1];
  }
}

module.exports = version;


/***/ }),

/***/ "./node_modules/core-js/internals/enum-bug-keys.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/enum-bug-keys.js ***!
  \*********************************************************/
/***/ (function(module) {

// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];


/***/ }),

/***/ "./node_modules/core-js/internals/export.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/internals/export.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var getOwnPropertyDescriptor = (__webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f);
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "./node_modules/core-js/internals/define-built-in.js");
var defineGlobalProperty = __webpack_require__(/*! ../internals/define-global-property */ "./node_modules/core-js/internals/define-global-property.js");
var copyConstructorProperties = __webpack_require__(/*! ../internals/copy-constructor-properties */ "./node_modules/core-js/internals/copy-constructor-properties.js");
var isForced = __webpack_require__(/*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js");

/*
  options.target         - name of the target object
  options.global         - target is the global object
  options.stat           - export as static methods of target
  options.proto          - export as prototype methods of target
  options.real           - real prototype method for the `pure` version
  options.forced         - export even if the native feature is available
  options.bind           - bind methods to the target, required for the `pure` version
  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe         - use the simple assignment of property instead of delete + defineProperty
  options.sham           - add a flag to not completely full polyfills
  options.enumerable     - export as enumerable property
  options.dontCallGetSet - prevent calling a getter on target
  options.name           - the .name of the function if it does not match the key
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || defineGlobalProperty(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.dontCallGetSet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty == typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    }
    defineBuiltIn(target, key, sourceProperty, options);
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/fails.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/internals/fails.js ***!
  \*************************************************/
/***/ (function(module) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/function-bind-native.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/function-bind-native.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

module.exports = !fails(function () {
  // eslint-disable-next-line es/no-function-prototype-bind -- safe
  var test = (function () { /* empty */ }).bind();
  // eslint-disable-next-line no-prototype-builtins -- safe
  return typeof test != 'function' || test.hasOwnProperty('prototype');
});


/***/ }),

/***/ "./node_modules/core-js/internals/function-call.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/function-call.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var NATIVE_BIND = __webpack_require__(/*! ../internals/function-bind-native */ "./node_modules/core-js/internals/function-bind-native.js");

var call = Function.prototype.call;

module.exports = NATIVE_BIND ? call.bind(call) : function () {
  return call.apply(call, arguments);
};


/***/ }),

/***/ "./node_modules/core-js/internals/function-name.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/function-name.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");

var FunctionPrototype = Function.prototype;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;

var EXISTS = hasOwn(FunctionPrototype, 'name');
// additional protection from minified / mangled / dropped function names
var PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';
var CONFIGURABLE = EXISTS && (!DESCRIPTORS || (DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable));

module.exports = {
  EXISTS: EXISTS,
  PROPER: PROPER,
  CONFIGURABLE: CONFIGURABLE
};


/***/ }),

/***/ "./node_modules/core-js/internals/function-uncurry-this.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/internals/function-uncurry-this.js ***!
  \*****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var NATIVE_BIND = __webpack_require__(/*! ../internals/function-bind-native */ "./node_modules/core-js/internals/function-bind-native.js");

var FunctionPrototype = Function.prototype;
var call = FunctionPrototype.call;
var uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);

module.exports = NATIVE_BIND ? uncurryThisWithBind : function (fn) {
  return function () {
    return call.apply(fn, arguments);
  };
};


/***/ }),

/***/ "./node_modules/core-js/internals/get-built-in.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/get-built-in.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");

var aFunction = function (argument) {
  return isCallable(argument) ? argument : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(global[namespace]) : global[namespace] && global[namespace][method];
};


/***/ }),

/***/ "./node_modules/core-js/internals/get-method.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/get-method.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var aCallable = __webpack_require__(/*! ../internals/a-callable */ "./node_modules/core-js/internals/a-callable.js");
var isNullOrUndefined = __webpack_require__(/*! ../internals/is-null-or-undefined */ "./node_modules/core-js/internals/is-null-or-undefined.js");

// `GetMethod` abstract operation
// https://tc39.es/ecma262/#sec-getmethod
module.exports = function (V, P) {
  var func = V[P];
  return isNullOrUndefined(func) ? undefined : aCallable(func);
};


/***/ }),

/***/ "./node_modules/core-js/internals/global.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/internals/global.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line es/no-global-this -- safe
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  // eslint-disable-next-line no-restricted-globals -- safe
  check(typeof self == 'object' && self) ||
  check(typeof __webpack_require__.g == 'object' && __webpack_require__.g) ||
  // eslint-disable-next-line no-new-func -- fallback
  (function () { return this; })() || Function('return this')();


/***/ }),

/***/ "./node_modules/core-js/internals/has-own-property.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/internals/has-own-property.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");

var hasOwnProperty = uncurryThis({}.hasOwnProperty);

// `HasOwnProperty` abstract operation
// https://tc39.es/ecma262/#sec-hasownproperty
// eslint-disable-next-line es/no-object-hasown -- safe
module.exports = Object.hasOwn || function hasOwn(it, key) {
  return hasOwnProperty(toObject(it), key);
};


/***/ }),

/***/ "./node_modules/core-js/internals/hidden-keys.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/hidden-keys.js ***!
  \*******************************************************/
/***/ (function(module) {

module.exports = {};


/***/ }),

/***/ "./node_modules/core-js/internals/ie8-dom-define.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/ie8-dom-define.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var createElement = __webpack_require__(/*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js");

// Thanks to IE8 for its funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});


/***/ }),

/***/ "./node_modules/core-js/internals/indexed-object.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/indexed-object.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");

var $Object = Object;
var split = uncurryThis(''.split);

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins -- safe
  return !$Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split(it, '') : $Object(it);
} : $Object;


/***/ }),

/***/ "./node_modules/core-js/internals/inspect-source.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/inspect-source.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var store = __webpack_require__(/*! ../internals/shared-store */ "./node_modules/core-js/internals/shared-store.js");

var functionToString = uncurryThis(Function.toString);

// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
if (!isCallable(store.inspectSource)) {
  store.inspectSource = function (it) {
    return functionToString(it);
  };
}

module.exports = store.inspectSource;


/***/ }),

/***/ "./node_modules/core-js/internals/internal-state.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/internal-state.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var NATIVE_WEAK_MAP = __webpack_require__(/*! ../internals/weak-map-basic-detection */ "./node_modules/core-js/internals/weak-map-basic-detection.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var shared = __webpack_require__(/*! ../internals/shared-store */ "./node_modules/core-js/internals/shared-store.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");

var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var TypeError = global.TypeError;
var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP || shared.state) {
  var store = shared.state || (shared.state = new WeakMap());
  /* eslint-disable no-self-assign -- prototype methods protection */
  store.get = store.get;
  store.has = store.has;
  store.set = store.set;
  /* eslint-enable no-self-assign -- prototype methods protection */
  set = function (it, metadata) {
    if (store.has(it)) throw TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    store.set(it, metadata);
    return metadata;
  };
  get = function (it) {
    return store.get(it) || {};
  };
  has = function (it) {
    return store.has(it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    if (hasOwn(it, STATE)) throw TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return hasOwn(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return hasOwn(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-array.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/internals/is-array.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");

// `IsArray` abstract operation
// https://tc39.es/ecma262/#sec-isarray
// eslint-disable-next-line es/no-array-isarray -- safe
module.exports = Array.isArray || function isArray(argument) {
  return classof(argument) == 'Array';
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-callable.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/is-callable.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var $documentAll = __webpack_require__(/*! ../internals/document-all */ "./node_modules/core-js/internals/document-all.js");

var documentAll = $documentAll.all;

// `IsCallable` abstract operation
// https://tc39.es/ecma262/#sec-iscallable
module.exports = $documentAll.IS_HTMLDDA ? function (argument) {
  return typeof argument == 'function' || argument === documentAll;
} : function (argument) {
  return typeof argument == 'function';
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-forced.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-forced.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : isCallable(detection) ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;


/***/ }),

/***/ "./node_modules/core-js/internals/is-null-or-undefined.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/is-null-or-undefined.js ***!
  \****************************************************************/
/***/ (function(module) {

// we can't use just `it == null` since of `document.all` special case
// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-aec
module.exports = function (it) {
  return it === null || it === undefined;
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-object.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-object.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var $documentAll = __webpack_require__(/*! ../internals/document-all */ "./node_modules/core-js/internals/document-all.js");

var documentAll = $documentAll.all;

module.exports = $documentAll.IS_HTMLDDA ? function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it) || it === documentAll;
} : function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it);
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-pure.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/internals/is-pure.js ***!
  \***************************************************/
/***/ (function(module) {

module.exports = false;


/***/ }),

/***/ "./node_modules/core-js/internals/is-symbol.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-symbol.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var isPrototypeOf = __webpack_require__(/*! ../internals/object-is-prototype-of */ "./node_modules/core-js/internals/object-is-prototype-of.js");
var USE_SYMBOL_AS_UID = __webpack_require__(/*! ../internals/use-symbol-as-uid */ "./node_modules/core-js/internals/use-symbol-as-uid.js");

var $Object = Object;

module.exports = USE_SYMBOL_AS_UID ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  var $Symbol = getBuiltIn('Symbol');
  return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
};


/***/ }),

/***/ "./node_modules/core-js/internals/length-of-array-like.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/length-of-array-like.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");

// `LengthOfArrayLike` abstract operation
// https://tc39.es/ecma262/#sec-lengthofarraylike
module.exports = function (obj) {
  return toLength(obj.length);
};


/***/ }),

/***/ "./node_modules/core-js/internals/make-built-in.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/make-built-in.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var CONFIGURABLE_FUNCTION_NAME = (__webpack_require__(/*! ../internals/function-name */ "./node_modules/core-js/internals/function-name.js").CONFIGURABLE);
var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "./node_modules/core-js/internals/inspect-source.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");

var enforceInternalState = InternalStateModule.enforce;
var getInternalState = InternalStateModule.get;
var $String = String;
// eslint-disable-next-line es/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;
var stringSlice = uncurryThis(''.slice);
var replace = uncurryThis(''.replace);
var join = uncurryThis([].join);

var CONFIGURABLE_LENGTH = DESCRIPTORS && !fails(function () {
  return defineProperty(function () { /* empty */ }, 'length', { value: 8 }).length !== 8;
});

var TEMPLATE = String(String).split('String');

var makeBuiltIn = module.exports = function (value, name, options) {
  if (stringSlice($String(name), 0, 7) === 'Symbol(') {
    name = '[' + replace($String(name), /^Symbol\(([^)]*)\)/, '$1') + ']';
  }
  if (options && options.getter) name = 'get ' + name;
  if (options && options.setter) name = 'set ' + name;
  if (!hasOwn(value, 'name') || (CONFIGURABLE_FUNCTION_NAME && value.name !== name)) {
    if (DESCRIPTORS) defineProperty(value, 'name', { value: name, configurable: true });
    else value.name = name;
  }
  if (CONFIGURABLE_LENGTH && options && hasOwn(options, 'arity') && value.length !== options.arity) {
    defineProperty(value, 'length', { value: options.arity });
  }
  try {
    if (options && hasOwn(options, 'constructor') && options.constructor) {
      if (DESCRIPTORS) defineProperty(value, 'prototype', { writable: false });
    // in V8 ~ Chrome 53, prototypes of some methods, like `Array.prototype.values`, are non-writable
    } else if (value.prototype) value.prototype = undefined;
  } catch (error) { /* empty */ }
  var state = enforceInternalState(value);
  if (!hasOwn(state, 'source')) {
    state.source = join(TEMPLATE, typeof name == 'string' ? name : '');
  } return value;
};

// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
// eslint-disable-next-line no-extend-native -- required
Function.prototype.toString = makeBuiltIn(function toString() {
  return isCallable(this) && getInternalState(this).source || inspectSource(this);
}, 'toString');


/***/ }),

/***/ "./node_modules/core-js/internals/math-trunc.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/math-trunc.js ***!
  \******************************************************/
/***/ (function(module) {

var ceil = Math.ceil;
var floor = Math.floor;

// `Math.trunc` method
// https://tc39.es/ecma262/#sec-math.trunc
// eslint-disable-next-line es/no-math-trunc -- safe
module.exports = Math.trunc || function trunc(x) {
  var n = +x;
  return (n > 0 ? floor : ceil)(n);
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-define-property.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-define-property.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ../internals/ie8-dom-define */ "./node_modules/core-js/internals/ie8-dom-define.js");
var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__(/*! ../internals/v8-prototype-define-bug */ "./node_modules/core-js/internals/v8-prototype-define-bug.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var toPropertyKey = __webpack_require__(/*! ../internals/to-property-key */ "./node_modules/core-js/internals/to-property-key.js");

var $TypeError = TypeError;
// eslint-disable-next-line es/no-object-defineproperty -- safe
var $defineProperty = Object.defineProperty;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var ENUMERABLE = 'enumerable';
var CONFIGURABLE = 'configurable';
var WRITABLE = 'writable';

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
    var current = $getOwnPropertyDescriptor(O, P);
    if (current && current[WRITABLE]) {
      O[P] = Attributes.value;
      Attributes = {
        configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
        writable: false
      };
    }
  } return $defineProperty(O, P, Attributes);
} : $defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return $defineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw $TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-own-property-descriptor.js":
/*!******************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-descriptor.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "./node_modules/core-js/internals/object-property-is-enumerable.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var toPropertyKey = __webpack_require__(/*! ../internals/to-property-key */ "./node_modules/core-js/internals/to-property-key.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ../internals/ie8-dom-define */ "./node_modules/core-js/internals/ie8-dom-define.js");

// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPropertyKey(P);
  if (IE8_DOM_DEFINE) try {
    return $getOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-own-property-names.js":
/*!*************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-names.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

var internalObjectKeys = __webpack_require__(/*! ../internals/object-keys-internal */ "./node_modules/core-js/internals/object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js");

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es/no-object-getownpropertynames -- safe
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-own-property-symbols.js":
/*!***************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-symbols.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ "./node_modules/core-js/internals/object-is-prototype-of.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-is-prototype-of.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");

module.exports = uncurryThis({}.isPrototypeOf);


/***/ }),

/***/ "./node_modules/core-js/internals/object-keys-internal.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/object-keys-internal.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var indexOf = (__webpack_require__(/*! ../internals/array-includes */ "./node_modules/core-js/internals/array-includes.js").indexOf);
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");

var push = uncurryThis([].push);

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (hasOwn(O, key = names[i++])) {
    ~indexOf(result, key) || push(result, key);
  }
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-property-is-enumerable.js":
/*!*************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-property-is-enumerable.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var $propertyIsEnumerable = {}.propertyIsEnumerable;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;


/***/ }),

/***/ "./node_modules/core-js/internals/ordinary-to-primitive.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/internals/ordinary-to-primitive.js ***!
  \*****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

var $TypeError = TypeError;

// `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive
module.exports = function (input, pref) {
  var fn, val;
  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;
  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  throw $TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ "./node_modules/core-js/internals/own-keys.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/internals/own-keys.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var getOwnPropertyNamesModule = __webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js");
var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "./node_modules/core-js/internals/object-get-own-property-symbols.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");

var concat = uncurryThis([].concat);

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
};


/***/ }),

/***/ "./node_modules/core-js/internals/require-object-coercible.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/require-object-coercible.js ***!
  \********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isNullOrUndefined = __webpack_require__(/*! ../internals/is-null-or-undefined */ "./node_modules/core-js/internals/is-null-or-undefined.js");

var $TypeError = TypeError;

// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (isNullOrUndefined(it)) throw $TypeError("Can't call method on " + it);
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/internals/shared-key.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/shared-key.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
var uid = __webpack_require__(/*! ../internals/uid */ "./node_modules/core-js/internals/uid.js");

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};


/***/ }),

/***/ "./node_modules/core-js/internals/shared-store.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/shared-store.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var defineGlobalProperty = __webpack_require__(/*! ../internals/define-global-property */ "./node_modules/core-js/internals/define-global-property.js");

var SHARED = '__core-js_shared__';
var store = global[SHARED] || defineGlobalProperty(SHARED, {});

module.exports = store;


/***/ }),

/***/ "./node_modules/core-js/internals/shared.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/internals/shared.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var store = __webpack_require__(/*! ../internals/shared-store */ "./node_modules/core-js/internals/shared-store.js");

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.28.0',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '¬© 2014-2023 Denis Pushkarev (zloirock.ru)',
  license: 'https://github.com/zloirock/core-js/blob/v3.28.0/LICENSE',
  source: 'https://github.com/zloirock/core-js'
});


/***/ }),

/***/ "./node_modules/core-js/internals/symbol-constructor-detection.js":
/*!************************************************************************!*\
  !*** ./node_modules/core-js/internals/symbol-constructor-detection.js ***!
  \************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* eslint-disable es/no-symbol -- required for testing */
var V8_VERSION = __webpack_require__(/*! ../internals/engine-v8-version */ "./node_modules/core-js/internals/engine-v8-version.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  var symbol = Symbol();
  // Chrome 38 Symbol has incorrect toString conversion
  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION && V8_VERSION < 41;
});


/***/ }),

/***/ "./node_modules/core-js/internals/to-absolute-index.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/to-absolute-index.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var toIntegerOrInfinity = __webpack_require__(/*! ../internals/to-integer-or-infinity */ "./node_modules/core-js/internals/to-integer-or-infinity.js");

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toIntegerOrInfinity(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-indexed-object.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/to-indexed-object.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// toObject with fallback for non-array-like ES3 strings
var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-integer-or-infinity.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/to-integer-or-infinity.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var trunc = __webpack_require__(/*! ../internals/math-trunc */ "./node_modules/core-js/internals/math-trunc.js");

// `ToIntegerOrInfinity` abstract operation
// https://tc39.es/ecma262/#sec-tointegerorinfinity
module.exports = function (argument) {
  var number = +argument;
  // eslint-disable-next-line no-self-compare -- NaN check
  return number !== number || number === 0 ? 0 : trunc(number);
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-length.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/to-length.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var toIntegerOrInfinity = __webpack_require__(/*! ../internals/to-integer-or-infinity */ "./node_modules/core-js/internals/to-integer-or-infinity.js");

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-object.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/to-object.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

var $Object = Object;

// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
module.exports = function (argument) {
  return $Object(requireObjectCoercible(argument));
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-primitive.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/to-primitive.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var isSymbol = __webpack_require__(/*! ../internals/is-symbol */ "./node_modules/core-js/internals/is-symbol.js");
var getMethod = __webpack_require__(/*! ../internals/get-method */ "./node_modules/core-js/internals/get-method.js");
var ordinaryToPrimitive = __webpack_require__(/*! ../internals/ordinary-to-primitive */ "./node_modules/core-js/internals/ordinary-to-primitive.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var $TypeError = TypeError;
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
module.exports = function (input, pref) {
  if (!isObject(input) || isSymbol(input)) return input;
  var exoticToPrim = getMethod(input, TO_PRIMITIVE);
  var result;
  if (exoticToPrim) {
    if (pref === undefined) pref = 'default';
    result = call(exoticToPrim, input, pref);
    if (!isObject(result) || isSymbol(result)) return result;
    throw $TypeError("Can't convert object to primitive value");
  }
  if (pref === undefined) pref = 'number';
  return ordinaryToPrimitive(input, pref);
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-property-key.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/to-property-key.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js");
var isSymbol = __webpack_require__(/*! ../internals/is-symbol */ "./node_modules/core-js/internals/is-symbol.js");

// `ToPropertyKey` abstract operation
// https://tc39.es/ecma262/#sec-topropertykey
module.exports = function (argument) {
  var key = toPrimitive(argument, 'string');
  return isSymbol(key) ? key : key + '';
};


/***/ }),

/***/ "./node_modules/core-js/internals/try-to-string.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/try-to-string.js ***!
  \*********************************************************/
/***/ (function(module) {

var $String = String;

module.exports = function (argument) {
  try {
    return $String(argument);
  } catch (error) {
    return 'Object';
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/uid.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/internals/uid.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");

var id = 0;
var postfix = Math.random();
var toString = uncurryThis(1.0.toString);

module.exports = function (key) {
  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);
};


/***/ }),

/***/ "./node_modules/core-js/internals/use-symbol-as-uid.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/use-symbol-as-uid.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* eslint-disable es/no-symbol -- required for testing */
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/symbol-constructor-detection */ "./node_modules/core-js/internals/symbol-constructor-detection.js");

module.exports = NATIVE_SYMBOL
  && !Symbol.sham
  && typeof Symbol.iterator == 'symbol';


/***/ }),

/***/ "./node_modules/core-js/internals/v8-prototype-define-bug.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/v8-prototype-define-bug.js ***!
  \*******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

// V8 ~ Chrome 36-
// https://bugs.chromium.org/p/v8/issues/detail?id=3334
module.exports = DESCRIPTORS && fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty(function () { /* empty */ }, 'prototype', {
    value: 42,
    writable: false
  }).prototype != 42;
});


/***/ }),

/***/ "./node_modules/core-js/internals/weak-map-basic-detection.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/weak-map-basic-detection.js ***!
  \********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");

var WeakMap = global.WeakMap;

module.exports = isCallable(WeakMap) && /native code/.test(String(WeakMap));


/***/ }),

/***/ "./node_modules/core-js/internals/well-known-symbol.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/well-known-symbol.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var uid = __webpack_require__(/*! ../internals/uid */ "./node_modules/core-js/internals/uid.js");
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/symbol-constructor-detection */ "./node_modules/core-js/internals/symbol-constructor-detection.js");
var USE_SYMBOL_AS_UID = __webpack_require__(/*! ../internals/use-symbol-as-uid */ "./node_modules/core-js/internals/use-symbol-as-uid.js");

var Symbol = global.Symbol;
var WellKnownSymbolsStore = shared('wks');
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol['for'] || Symbol : Symbol && Symbol.withoutSetter || uid;

module.exports = function (name) {
  if (!hasOwn(WellKnownSymbolsStore, name)) {
    WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn(Symbol, name)
      ? Symbol[name]
      : createWellKnownSymbol('Symbol.' + name);
  } return WellKnownSymbolsStore[name];
};


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.push.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.push.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "./node_modules/core-js/internals/length-of-array-like.js");
var setArrayLength = __webpack_require__(/*! ../internals/array-set-length */ "./node_modules/core-js/internals/array-set-length.js");
var doesNotExceedSafeInteger = __webpack_require__(/*! ../internals/does-not-exceed-safe-integer */ "./node_modules/core-js/internals/does-not-exceed-safe-integer.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

var INCORRECT_TO_LENGTH = fails(function () {
  return [].push.call({ length: 0x100000000 }, 1) !== 4294967297;
});

// V8 and Safari <= 15.4, FF < 23 throws InternalError
// https://bugs.chromium.org/p/v8/issues/detail?id=12681
var properErrorOnNonWritableLength = function () {
  try {
    // eslint-disable-next-line es/no-object-defineproperty -- safe
    Object.defineProperty([], 'length', { writable: false }).push();
  } catch (error) {
    return error instanceof TypeError;
  }
};

var FORCED = INCORRECT_TO_LENGTH || !properErrorOnNonWritableLength();

// `Array.prototype.push` method
// https://tc39.es/ecma262/#sec-array.prototype.push
$({ target: 'Array', proto: true, arity: 1, forced: FORCED }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  push: function push(item) {
    var O = toObject(this);
    var len = lengthOfArrayLike(O);
    var argCount = arguments.length;
    doesNotExceedSafeInteger(len + argCount);
    for (var i = 0; i < argCount; i++) {
      O[len] = arguments[i];
      len++;
    }
    setArrayLength(O, len);
    return len;
  }
});


/***/ }),

/***/ "./node_modules/jsstore/dist/jsstore.commonjs2.js":
/*!********************************************************!*\
  !*** ./node_modules/jsstore/dist/jsstore.commonjs2.js ***!
  \********************************************************/
/***/ (function(module) {

/*!
 * @license :jsstore - V4.5.1 - 14/02/2023
 * https://github.com/ujjwalguptaofficial/JsStore
 * Copyright (c) 2023 @Ujjwal Gupta; Licensed MIT
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __nested_webpack_require_258__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__nested_webpack_require_258__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__nested_webpack_require_258__.o(definition, key) && !__nested_webpack_require_258__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__nested_webpack_require_258__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__nested_webpack_require_258__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// ESM COMPAT FLAG
__nested_webpack_require_258__.r(__webpack_exports__);

// EXPORTS
__nested_webpack_require_258__.d(__webpack_exports__, {
  "API": () => (/* reexport */ API),
  "CONNECTION_STATUS": () => (/* reexport */ CONNECTION_STATUS),
  "Connection": () => (/* reexport */ Connection),
  "DATA_TYPE": () => (/* reexport */ DATA_TYPE),
  "ERROR_TYPE": () => (/* reexport */ ERROR_TYPE),
  "EVENT": () => (/* reexport */ EVENT),
  "IDB_MODE": () => (/* reexport */ IDB_MODE),
  "OCCURENCE": () => (/* reexport */ OCCURENCE),
  "QUERY_OPTION": () => (/* reexport */ QUERY_OPTION),
  "WORKER_STATUS": () => (/* reexport */ WORKER_STATUS),
  "forObj": () => (/* reexport */ forObj),
  "promise": () => (/* reexport */ promise),
  "promiseAll": () => (/* reexport */ promiseAll),
  "promiseResolve": () => (/* reexport */ promiseResolve)
});

;// CONCATENATED MODULE: ./src/main/log_helper.ts
var LogHelper = /** @class */ (function () {
    function LogHelper(type, info) {
        this.type = type;
        this._info = info;
        this.message = this.getMsg();
    }
    LogHelper.prototype.throw = function () {
        throw this;
    };
    LogHelper.prototype.log = function (msg) {
        if (this.status) {
            console.log(msg);
        }
    };
    LogHelper.prototype.logError = function () {
        console.error(this.get());
    };
    LogHelper.prototype.logWarning = function () {
        console.warn(this.get());
    };
    LogHelper.prototype.get = function () {
        return {
            message: this.message,
            type: this.type
        };
    };
    LogHelper.prototype.getMsg = function () {
        var errMsg;
        switch (this.type) {
            default:
                errMsg = this.message;
                break;
        }
        return errMsg;
    };
    return LogHelper;
}());


;// CONCATENATED MODULE: ./src/common/enums.ts
var ERROR_TYPE = {
    InvalidUpdateColumn: "invalid_update_column",
    UndefinedColumn: "undefined_column",
    UndefinedValue: "undefined_value",
    UndefinedColumnName: "undefined_column_name",
    UndefinedDbName: "undefined_database_name",
    UndefinedColumnValue: "undefined_column_value",
    NotArray: "not_array",
    NoValueSupplied: "no_value_supplied",
    ColumnNotExist: "column_not_exist",
    NoIndexFound: "no_index_found",
    InvalidOp: "invalid_operator",
    NullValue: "null_value",
    WrongDataType: "wrong_data_type",
    TableNotExist: "table_not_exist",
    DbNotExist: "db_not_exist",
    ConnectionAborted: "connection_aborted",
    ConnectionClosed: "connection_closed",
    NotObject: "not_object",
    InvalidConfig: "invalid_config",
    DbBlocked: "Db_blocked",
    IndexedDbNotSupported: "indexeddb_not_supported",
    NullValueInWhere: "null_value_in_where",
    InvalidJoinQuery: 'invalid_join_query',
    InvalidQuery: 'invalid_query',
    ImportScriptsFailed: 'import_scripts_failed',
    MethodNotExist: 'method_not_exist',
    Unknown: "unknown",
    InvalidMiddleware: "invalid_middleware"
};
if (true) {
    Object.assign(ERROR_TYPE, {
        InvalidOrderQuery: 'invalid_order_query',
        InvalidGroupQuery: 'invalid_group_query'
    });
}
var WORKER_STATUS;
(function (WORKER_STATUS) {
    WORKER_STATUS["Registered"] = "registerd";
    WORKER_STATUS["Failed"] = "failed";
    WORKER_STATUS["NotStarted"] = "not_started";
})(WORKER_STATUS || (WORKER_STATUS = {}));
var DATA_TYPE;
(function (DATA_TYPE) {
    DATA_TYPE["String"] = "string";
    DATA_TYPE["Object"] = "object";
    DATA_TYPE["Array"] = "array";
    DATA_TYPE["Number"] = "number";
    DATA_TYPE["Boolean"] = "boolean";
    DATA_TYPE["Null"] = "null";
    DATA_TYPE["DateTime"] = "date_time";
})(DATA_TYPE || (DATA_TYPE = {}));
var API;
(function (API) {
    API["InitDb"] = "init_db";
    API["Get"] = "get";
    API["Set"] = "set";
    API["Select"] = "select";
    API["Insert"] = "insert";
    API["Update"] = "update";
    API["Remove"] = "remove";
    API["OpenDb"] = "open_db";
    API["Clear"] = "clear";
    API["DropDb"] = "drop_db";
    API["Count"] = "count";
    API["ChangeLogStatus"] = "change_log_status";
    API["Terminate"] = "terminate";
    API["Transaction"] = "transaction";
    API["CloseDb"] = "close_db";
    API["Union"] = "union";
    API["Intersect"] = "intersect";
    API["ImportScripts"] = "import_scripts";
    API["Middleware"] = "middleware";
})(API || (API = {}));
var EVENT;
(function (EVENT) {
    EVENT["RequestQueueEmpty"] = "requestQueueEmpty";
    EVENT["RequestQueueFilled"] = "requestQueueFilled";
    EVENT["Upgrade"] = "upgrade";
    EVENT["Create"] = "create";
    EVENT["Open"] = "open";
})(EVENT || (EVENT = {}));
var QUERY_OPTION;
(function (QUERY_OPTION) {
    QUERY_OPTION["Where"] = "where";
    QUERY_OPTION["Like"] = "like";
    QUERY_OPTION["Regex"] = "regex";
    QUERY_OPTION["In"] = "in";
    QUERY_OPTION["Equal"] = "=";
    QUERY_OPTION["Between"] = "-";
    QUERY_OPTION["GreaterThan"] = ">";
    QUERY_OPTION["LessThan"] = "<";
    QUERY_OPTION["GreaterThanEqualTo"] = ">=";
    QUERY_OPTION["LessThanEqualTo"] = "<=";
    QUERY_OPTION["NotEqualTo"] = "!=";
    QUERY_OPTION["Aggregate"] = "aggregate";
    QUERY_OPTION["Max"] = "max";
    QUERY_OPTION["Min"] = "min";
    QUERY_OPTION["Avg"] = "avg";
    QUERY_OPTION["Count"] = "count";
    QUERY_OPTION["Sum"] = "sum";
    QUERY_OPTION["List"] = "list";
    QUERY_OPTION["Or"] = "or";
    QUERY_OPTION["Skip"] = "skip";
    QUERY_OPTION["Limit"] = "limit";
    QUERY_OPTION["And"] = "and";
    QUERY_OPTION["IgnoreCase"] = "ignoreCase";
    QUERY_OPTION["Then"] = "then";
})(QUERY_OPTION || (QUERY_OPTION = {}));
var IDB_MODE;
(function (IDB_MODE) {
    IDB_MODE["ReadOnly"] = "readonly";
    IDB_MODE["ReadWrite"] = "readwrite";
})(IDB_MODE || (IDB_MODE = {}));
var OCCURENCE;
(function (OCCURENCE) {
    OCCURENCE["First"] = "f";
    OCCURENCE["Last"] = "l";
    OCCURENCE["Any"] = "a";
})(OCCURENCE || (OCCURENCE = {}));
var CONNECTION_STATUS;
(function (CONNECTION_STATUS) {
    CONNECTION_STATUS["Connected"] = "connected";
    CONNECTION_STATUS["Closed"] = "closed";
    CONNECTION_STATUS["NotStarted"] = "not_started";
    CONNECTION_STATUS["UnableToStart"] = "unable_to_start";
    CONNECTION_STATUS["ClosedByJsStore"] = "closed_by_jsstore";
})(CONNECTION_STATUS || (CONNECTION_STATUS = {}));

;// CONCATENATED MODULE: ./src/common/utils/promise.ts
var promise = function (cb) {
    return new Promise(cb);
};

;// CONCATENATED MODULE: ./src/common/utils/promise_resolve.ts
var promiseResolve = function (value) {
    return Promise.resolve(value);
};

;// CONCATENATED MODULE: ./src/main/event_bus.ts
var __spreadArray = ( false) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var EventBus = /** @class */ (function () {
    function EventBus(ctx) {
        this._events = {};
        this._ctx = ctx;
    }
    EventBus.prototype.on = function (event, cb) {
        if (this._events[event] == null) {
            this._events[event] = [];
        }
        this._events[event].push(cb);
        return this;
    };
    EventBus.prototype.off = function (event, cb) {
        if (this._events[event]) {
            if (cb) {
                var index = this._events[event].indexOf(cb);
                this._events[event].splice(index, 1);
            }
            else {
                this._events[event] = [];
            }
        }
    };
    EventBus.prototype.emit = function (event) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var events = this._events[event] || [];
        var index = 0;
        var length = events.length;
        var results = [];
        var callMethod = function () {
            var eventCb = events[index++];
            if (eventCb) {
                var result = eventCb.call.apply(eventCb, __spreadArray([_this._ctx], args, false));
                return result && result.then ? result : Promise.resolve(result);
            }
        };
        return new Promise(function (res) {
            var checkAndCall = function () {
                if (index < length) {
                    callMethod().then(function (result) {
                        results.push(result);
                        checkAndCall();
                    });
                }
                else {
                    res(results);
                }
            };
            checkAndCall();
        });
    };
    EventBus.prototype.destroy = function () {
        this._events = null;
        this._ctx = null;
    };
    return EventBus;
}());


;// CONCATENATED MODULE: ./src/main/connection_helper.ts



var ConnectionHelper = /** @class */ (function () {
    function ConnectionHelper(worker) {
        this.isConOpened_ = false;
        this.isDbIdle_ = true;
        this.requestQueue_ = [];
        this.isCodeExecuting_ = false;
        this.inactivityTimer_ = -1000;
        this.middlewares = [];
        this.eventBus_ = new EventBus(this);
        // these apis have special permissions. These apis dont wait for database open.
        this.whiteListApi_ = [
            API.InitDb,
            API.OpenDb,
            API.Get,
            API.Set,
            API.ChangeLogStatus,
            API.Terminate,
            API.DropDb
        ];
        this.isWorker = true;
        this.logger = new LogHelper(null);
        if (worker) {
            this.worker_ = worker;
            this.worker_.onmessage = this.onMessageFromWorker_.bind(this);
        }
        else {
            this.isWorker = false;
            this.initQueryManager_();
        }
    }
    Object.defineProperty(ConnectionHelper.prototype, "jsstoreWorker", {
        get: function () {
            return this.$worker || self['JsStoreWorker'];
        },
        enumerable: false,
        configurable: true
    });
    ConnectionHelper.prototype.initQueryManager_ = function () {
        var workerRef = this.jsstoreWorker;
        if (workerRef) {
            this.queryManager = new workerRef.QueryManager(this.processFinishedQuery_.bind(this));
        }
    };
    ConnectionHelper.prototype.onMessageFromWorker_ = function (msg) {
        this.processFinishedQuery_(msg.data);
    };
    ConnectionHelper.prototype.processFinishedQuery_ = function (message) {
        var finishedRequest = this.requestQueue_.shift();
        if (finishedRequest) {
            this.logger.log("request ".concat(finishedRequest.name, " finished"));
            if (message.error) {
                finishedRequest.onError(message.error);
            }
            else {
                switch (finishedRequest.name) {
                    case API.OpenDb:
                    case API.InitDb:
                        this.isConOpened_ = true;
                        break;
                    case API.Terminate:
                        this.isConOpened_ = false;
                        if (this.isWorker === true) {
                            this.worker_.terminate();
                        }
                    case API.DropDb:
                        this.isConOpened_ = false;
                        this.requestQueue_ = [];
                        this.isDbIdle_ = true;
                        break;
                    case API.CloseDb:
                        if (this.requestQueue_.length > 0) {
                            this.openDb_();
                        }
                        else {
                            this.isDbIdle_ = true;
                            this.eventBus_.emit(EVENT.RequestQueueEmpty, []);
                        }
                        break;
                }
                finishedRequest.onSuccess(message.result);
            }
            this.isCodeExecuting_ = false;
            this.executeQry_();
        }
    };
    ConnectionHelper.prototype.openDb_ = function () {
        this.prcoessExecutionOfQry_({
            name: API.OpenDb,
            query: {
                name: this.database.name,
                version: this.database.version
            },
            onSuccess: function () {
            },
            onError: function (err) {
                console.error(err);
            }
        }, 0);
    };
    ConnectionHelper.prototype.executeMiddleware_ = function (input) {
        var _this = this;
        return promise(function (res) {
            var index = 0;
            var lastIndex = _this.middlewares.length - 1;
            var callNextMiddleware = function () {
                if (index <= lastIndex) {
                    var promiseResult = _this.middlewares[index++](input);
                    if (!promiseResult || !promiseResult.then) {
                        promiseResult = promiseResolve(promiseResult);
                    }
                    promiseResult.then(function (_) {
                        callNextMiddleware();
                    });
                }
                else {
                    res();
                }
            };
            callNextMiddleware();
        });
    };
    ConnectionHelper.prototype.callResultMiddleware = function (middlewares, result) {
        return promise(function (res) {
            var index = 0;
            var lastIndex = middlewares.length - 1;
            var callNextMiddleware = function () {
                if (index <= lastIndex) {
                    var promiseResult = middlewares[index++](result);
                    if (!promiseResult.then) {
                        promiseResult = promiseResolve(promiseResult);
                    }
                    promiseResult.then(function (modifiedResult) {
                        result = modifiedResult;
                        callNextMiddleware();
                    });
                }
                else {
                    res(result);
                }
            };
            callNextMiddleware();
        });
    };
    ConnectionHelper.prototype.pushApi = function (request) {
        var _this = this;
        if (  true && !this.jsstoreWorker) {
            throw new Error("JsStoreWorker not found. Either pass web worker or inject JsStore Worker.");
        }
        return new Promise(function (resolve, reject) {
            var middlewares = [];
            request.onResult = function (cb) {
                middlewares.push(function (result) {
                    return cb(result);
                });
            };
            _this.executeMiddleware_(request).then(function () {
                request.onSuccess = function (result) {
                    _this.callResultMiddleware(middlewares, result).then(function (modifiedResult) {
                        resolve(modifiedResult);
                    }).catch(function (err) {
                        request.onError(err);
                    });
                };
                request.onError = function (err) {
                    middlewares = [];
                    reject(err);
                };
                if (_this.requestQueue_.length === 0) {
                    _this.eventBus_.emit(EVENT.RequestQueueFilled, []);
                    var isConnectionApi = [API.CloseDb, API.DropDb, API.OpenDb, API.Terminate].indexOf(request.name) >= 0;
                    if (!isConnectionApi && _this.isDbIdle_ && _this.isConOpened_) {
                        _this.openDb_();
                    }
                    else {
                        clearTimeout(_this.inactivityTimer_);
                    }
                }
                _this.prcoessExecutionOfQry_(request);
            }).catch(reject);
        });
    };
    ConnectionHelper.prototype.prcoessExecutionOfQry_ = function (request, index) {
        this.isDbIdle_ = false;
        if (index != null) {
            this.requestQueue_.splice(index, 0, request);
        }
        else {
            this.requestQueue_.push(request);
        }
        this.logger.log("request pushed: " + request.name);
        this.executeQry_();
    };
    ConnectionHelper.prototype.executeQry_ = function () {
        var _this = this;
        var requestQueueLength = this.requestQueue_.length;
        if (!this.isCodeExecuting_ && requestQueueLength > 0) {
            if (this.isConOpened_ === true) {
                this.sendRequestToWorker_(this.requestQueue_[0]);
                return;
            }
            var allowedQueryIndex = this.requestQueue_.findIndex(function (item) { return _this.whiteListApi_.indexOf(item.name) >= 0; });
            // shift allowed query to zeroth index
            if (allowedQueryIndex >= 0) {
                this.requestQueue_.splice(0, 0, this.requestQueue_.splice(allowedQueryIndex, 1)[0]);
                this.sendRequestToWorker_(this.requestQueue_[0]);
            }
        }
        else if (requestQueueLength === 0 && this.isDbIdle_ === false && this.isConOpened_) {
            this.inactivityTimer_ = setTimeout(function () {
                _this.prcoessExecutionOfQry_({
                    name: API.CloseDb,
                    onSuccess: function () {
                    },
                    onError: function (err) {
                        console.error(err);
                    }
                });
            }, 100);
        }
    };
    ConnectionHelper.prototype.sendRequestToWorker_ = function (request) {
        this.isCodeExecuting_ = true;
        this.logger.log("request executing: " + request.name);
        var requestForWorker = {
            name: request.name,
            query: request.query
        };
        if (this.isWorker === true) {
            this.worker_.postMessage(requestForWorker);
        }
        else {
            this.queryManager.run(requestForWorker);
        }
    };
    return ConnectionHelper;
}());


;// CONCATENATED MODULE: ./src/main/connection.ts
var __extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var Connection = /** @class */ (function (_super) {
    __extends(Connection, _super);
    function Connection(worker) {
        return _super.call(this, worker) || this;
    }
    /**
     * initiate DataBase
     *
     * @param {IDataBase} dataBase
     * @returns
     * @memberof Connection
     */
    Connection.prototype.initDb = function (dataBase) {
        var _this = this;
        this.database = dataBase;
        return this.pushApi({
            name: API.InitDb,
            query: dataBase
        }).then(function (result) {
            var promiseObj;
            var db = result.database;
            if (result.isCreated) {
                if (result.oldVersion) {
                    promiseObj = _this.eventBus_.emit(EVENT.Upgrade, db, result.oldVersion, result.newVersion);
                }
                else {
                    promiseObj = _this.eventBus_.emit(EVENT.Create, db);
                }
            }
            return (promiseObj || promiseResolve()).then(function (_) {
                return _this.eventBus_.emit(EVENT.Open, db);
            }).then(function (_) {
                return result.isCreated;
            });
        });
    };
    /**
     * drop dataBase
     *
     * @returns
     * @memberof Connection
     */
    Connection.prototype.dropDb = function () {
        return this.pushApi({
            name: API.DropDb
        });
    };
    /**
     * select data from table
     *
     * @template T
     * @param {ISelectQuery} query
     * @returns
     * @memberof Connection
     */
    Connection.prototype.select = function (query) {
        return this.pushApi({
            name: API.Select,
            query: query
        });
    };
    /**
     * get no of record from table
     *
     * @param {ICountQuery} query
     * @returns
     * @memberof Connection
     */
    Connection.prototype.count = function (query) {
        return this.pushApi({
            name: API.Count,
            query: query
        });
    };
    /**
     * insert data into table
     *
     * @template T
     * @param {IInsertQuery} query
     * @returns
     * @memberof Connection
     */
    Connection.prototype.insert = function (query) {
        return this.pushApi({
            name: API.Insert,
            query: query
        });
    };
    /**
     * update data into table
     *
     * @param {IUpdateQuery} query
     * @returns
     * @memberof Connection
     */
    Connection.prototype.update = function (query) {
        return this.pushApi({
            name: API.Update,
            query: query
        });
    };
    /**
     * remove data from table
     *
     * @param {IRemoveQuery} query
     * @returns
     * @memberof Connection
     */
    Connection.prototype.remove = function (query) {
        return this.pushApi({
            name: API.Remove,
            query: query
        });
    };
    /**
     * delete all data from table
     *
     * @param {string} tableName
     * @returns
     * @memberof Connection
     */
    Connection.prototype.clear = function (tableName) {
        return this.pushApi({
            name: API.Clear,
            query: tableName
        });
    };
    Object.defineProperty(Connection.prototype, "logStatus", {
        /**
         * set log status
         *
         * @param {boolean} status
         * @memberof Connection
         */
        set: function (status) {
            this.logger.status = status;
            this.pushApi({
                name: API.ChangeLogStatus,
                query: status
            });
        },
        enumerable: false,
        configurable: true
    });
    /**
     * open database
     *
     * @param {string} dbName
     * @returns
     * @memberof Connection
     */
    Connection.prototype.openDb = function (dbName, version) {
        var _this = this;
        return this.pushApi({
            name: API.OpenDb,
            query: {
                version: version,
                name: dbName
            }
        }).then(function (dataBase) {
            _this.database = dataBase;
            return dataBase;
        });
    };
    /**
     * returns list of database created
     *
     * @returns
     * @memberof Connection
     */
    Connection.prototype.getDbList = function () {
        console.warn("Api getDbList is recommended to use for debugging only. Do not use in code.");
        return indexedDB.databases();
    };
    /**
     * get the value from keystore table
     *
     * @template T
     * @param {string} key
     * @returns
     * @memberof Connection
     */
    Connection.prototype.get = function (key) {
        return this.pushApi({
            name: API.Get,
            query: key
        });
    };
    /**
     * set the value in keystore table
     *
     * @param {string} key
     * @param {*} value
     * @returns
     * @memberof Connection
     */
    Connection.prototype.set = function (key, value) {
        return this.pushApi({
            name: API.Set,
            query: {
                key: key, value: value
            }
        });
    };
    /**
     * terminate the connection
     *
     * @returns
     * @memberof Connection
     */
    Connection.prototype.terminate = function () {
        return this.pushApi({
            name: API.Terminate
        });
    };
    /**
     * execute transaction
     *
     * @template T
     * @param {ITranscationQuery} query
     * @returns
     * @memberof Connection
     */
    Connection.prototype.transaction = function (query) {
        return this.pushApi({
            name: API.Transaction,
            query: query
        });
    };
    Connection.prototype.on = function (event, eventCallBack) {
        this.eventBus_.on(event, eventCallBack);
    };
    Connection.prototype.off = function (event, eventCallBack) {
        this.eventBus_.off(event, eventCallBack);
    };
    Connection.prototype.union = function (query) {
        return this.pushApi({
            name: API.Union,
            query: query
        });
    };
    Connection.prototype.intersect = function (query) {
        return this.pushApi({
            name: API.Intersect,
            query: query
        });
    };
    Connection.prototype.addPlugin = function (plugin, params) {
        return plugin.setup(this, params);
    };
    Connection.prototype.addMiddleware = function (middleware, forWorker) {
        if (forWorker) {
            return this.pushApi({
                name: API.Middleware,
                query: middleware
            });
        }
        this.middlewares.push(middleware);
        return Promise.resolve();
    };
    /**
     * import scripts in jsstore web worker.
     * Scripts method can be called using transaction api.
     *
     * @param {...string[]} urls
     * @returns
     * @memberof Connection
     */
    Connection.prototype.importScripts = function () {
        var urls = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            urls[_i] = arguments[_i];
        }
        return this.pushApi({
            name: API.ImportScripts,
            query: urls
        });
    };
    return Connection;
}(ConnectionHelper));


;// CONCATENATED MODULE: ./src/common/utils/promise_all.ts
var promiseAll = function (promises) {
    return Promise.all(promises);
};

;// CONCATENATED MODULE: ./src/common/utils/for_obj.ts
var forObj = function (obj, cb) {
    for (var key in obj) {
        cb(key, obj[key]);
    }
};

;// CONCATENATED MODULE: ./src/common/utils/index.ts





;// CONCATENATED MODULE: ./src/common/index.ts





;// CONCATENATED MODULE: ./src/main/index.ts



module.exports = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=jsstore.commonjs2.js.map

/***/ }),

/***/ "./node_modules/jsstore/dist/jsstore.worker.commonjs2.js":
/*!***************************************************************!*\
  !*** ./node_modules/jsstore/dist/jsstore.worker.commonjs2.js ***!
  \***************************************************************/
/***/ (function(module) {

/*!
 * @license :jsstore - V4.5.1 - 14/02/2023
 * https://github.com/ujjwalguptaofficial/JsStore
 * Copyright (c) 2023 @Ujjwal Gupta; Licensed MIT
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __nested_webpack_require_258__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__nested_webpack_require_258__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__nested_webpack_require_258__.o(definition, key) && !__nested_webpack_require_258__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__nested_webpack_require_258__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__nested_webpack_require_258__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// ESM COMPAT FLAG
__nested_webpack_require_258__.r(__webpack_exports__);

// EXPORTS
__nested_webpack_require_258__.d(__webpack_exports__, {
  "QueryManager": () => (/* reexport */ QueryManager)
});

;// CONCATENATED MODULE: ./src/common/utils/promise_resolve.ts
var promiseResolve = function (value) {
    return Promise.resolve(value);
};

;// CONCATENATED MODULE: ./src/common/utils/promise.ts
var promise = function (cb) {
    return new Promise(cb);
};

;// CONCATENATED MODULE: ./src/common/enums.ts
var ERROR_TYPE = {
    InvalidUpdateColumn: "invalid_update_column",
    UndefinedColumn: "undefined_column",
    UndefinedValue: "undefined_value",
    UndefinedColumnName: "undefined_column_name",
    UndefinedDbName: "undefined_database_name",
    UndefinedColumnValue: "undefined_column_value",
    NotArray: "not_array",
    NoValueSupplied: "no_value_supplied",
    ColumnNotExist: "column_not_exist",
    NoIndexFound: "no_index_found",
    InvalidOp: "invalid_operator",
    NullValue: "null_value",
    WrongDataType: "wrong_data_type",
    TableNotExist: "table_not_exist",
    DbNotExist: "db_not_exist",
    ConnectionAborted: "connection_aborted",
    ConnectionClosed: "connection_closed",
    NotObject: "not_object",
    InvalidConfig: "invalid_config",
    DbBlocked: "Db_blocked",
    IndexedDbNotSupported: "indexeddb_not_supported",
    NullValueInWhere: "null_value_in_where",
    InvalidJoinQuery: 'invalid_join_query',
    InvalidQuery: 'invalid_query',
    ImportScriptsFailed: 'import_scripts_failed',
    MethodNotExist: 'method_not_exist',
    Unknown: "unknown",
    InvalidMiddleware: "invalid_middleware"
};
if (true) {
    Object.assign(ERROR_TYPE, {
        InvalidOrderQuery: 'invalid_order_query',
        InvalidGroupQuery: 'invalid_group_query'
    });
}
var WORKER_STATUS;
(function (WORKER_STATUS) {
    WORKER_STATUS["Registered"] = "registerd";
    WORKER_STATUS["Failed"] = "failed";
    WORKER_STATUS["NotStarted"] = "not_started";
})(WORKER_STATUS || (WORKER_STATUS = {}));
var DATA_TYPE;
(function (DATA_TYPE) {
    DATA_TYPE["String"] = "string";
    DATA_TYPE["Object"] = "object";
    DATA_TYPE["Array"] = "array";
    DATA_TYPE["Number"] = "number";
    DATA_TYPE["Boolean"] = "boolean";
    DATA_TYPE["Null"] = "null";
    DATA_TYPE["DateTime"] = "date_time";
})(DATA_TYPE || (DATA_TYPE = {}));
var API;
(function (API) {
    API["InitDb"] = "init_db";
    API["Get"] = "get";
    API["Set"] = "set";
    API["Select"] = "select";
    API["Insert"] = "insert";
    API["Update"] = "update";
    API["Remove"] = "remove";
    API["OpenDb"] = "open_db";
    API["Clear"] = "clear";
    API["DropDb"] = "drop_db";
    API["Count"] = "count";
    API["ChangeLogStatus"] = "change_log_status";
    API["Terminate"] = "terminate";
    API["Transaction"] = "transaction";
    API["CloseDb"] = "close_db";
    API["Union"] = "union";
    API["Intersect"] = "intersect";
    API["ImportScripts"] = "import_scripts";
    API["Middleware"] = "middleware";
})(API || (API = {}));
var EVENT;
(function (EVENT) {
    EVENT["RequestQueueEmpty"] = "requestQueueEmpty";
    EVENT["RequestQueueFilled"] = "requestQueueFilled";
    EVENT["Upgrade"] = "upgrade";
    EVENT["Create"] = "create";
    EVENT["Open"] = "open";
})(EVENT || (EVENT = {}));
var QUERY_OPTION;
(function (QUERY_OPTION) {
    QUERY_OPTION["Where"] = "where";
    QUERY_OPTION["Like"] = "like";
    QUERY_OPTION["Regex"] = "regex";
    QUERY_OPTION["In"] = "in";
    QUERY_OPTION["Equal"] = "=";
    QUERY_OPTION["Between"] = "-";
    QUERY_OPTION["GreaterThan"] = ">";
    QUERY_OPTION["LessThan"] = "<";
    QUERY_OPTION["GreaterThanEqualTo"] = ">=";
    QUERY_OPTION["LessThanEqualTo"] = "<=";
    QUERY_OPTION["NotEqualTo"] = "!=";
    QUERY_OPTION["Aggregate"] = "aggregate";
    QUERY_OPTION["Max"] = "max";
    QUERY_OPTION["Min"] = "min";
    QUERY_OPTION["Avg"] = "avg";
    QUERY_OPTION["Count"] = "count";
    QUERY_OPTION["Sum"] = "sum";
    QUERY_OPTION["List"] = "list";
    QUERY_OPTION["Or"] = "or";
    QUERY_OPTION["Skip"] = "skip";
    QUERY_OPTION["Limit"] = "limit";
    QUERY_OPTION["And"] = "and";
    QUERY_OPTION["IgnoreCase"] = "ignoreCase";
    QUERY_OPTION["Then"] = "then";
})(QUERY_OPTION || (QUERY_OPTION = {}));
var IDB_MODE;
(function (IDB_MODE) {
    IDB_MODE["ReadOnly"] = "readonly";
    IDB_MODE["ReadWrite"] = "readwrite";
})(IDB_MODE || (IDB_MODE = {}));
var OCCURENCE;
(function (OCCURENCE) {
    OCCURENCE["First"] = "f";
    OCCURENCE["Last"] = "l";
    OCCURENCE["Any"] = "a";
})(OCCURENCE || (OCCURENCE = {}));
var CONNECTION_STATUS;
(function (CONNECTION_STATUS) {
    CONNECTION_STATUS["Connected"] = "connected";
    CONNECTION_STATUS["Closed"] = "closed";
    CONNECTION_STATUS["NotStarted"] = "not_started";
    CONNECTION_STATUS["UnableToStart"] = "unable_to_start";
    CONNECTION_STATUS["ClosedByJsStore"] = "closed_by_jsstore";
})(CONNECTION_STATUS || (CONNECTION_STATUS = {}));

;// CONCATENATED MODULE: ./src/worker/model/table_meta.ts
var TableMeta = /** @class */ (function () {
    function TableMeta(table) {
        this.columns = [];
        this.autoIncColumnValue = {};
        this.columns = this.setColumn(table.columns);
        this.name = table.name;
        this.alter = table.alter || {};
    }
    TableMeta.prototype.setColumn = function (tableColumns) {
        var columns = [];
        var _loop_1 = function (columnName) {
            var column = tableColumns[columnName];
            column.name = columnName;
            if (column.autoIncrement) {
                this_1.autoIncColumnValue[columnName] = 0;
            }
            if (column.primaryKey) {
                this_1.primaryKey = columnName;
            }
            column.enableSearch = column.enableSearch == null ? true : column.enableSearch;
            var existingColumnIndex = this_1.columns.indexOf(function (q) { return q.name === columnName; });
            if (existingColumnIndex < 0) {
                columns.push(column);
            }
            else {
                var existingColumn = this_1.columns[existingColumnIndex];
                Object.assign(existingColumn, column);
            }
        };
        var this_1 = this;
        for (var columnName in tableColumns) {
            _loop_1(columnName);
        }
        return columns;
    };
    return TableMeta;
}());


;// CONCATENATED MODULE: ./src/worker/meta_helper.ts

var MetaHelper = /** @class */ (function () {
    function MetaHelper() {
    }
    MetaHelper.autoIncrementKey = function (tableName, columnName) {
        return "JsStore_".concat(tableName, "_").concat(columnName, "_Value");
    };
    MetaHelper.set = function (key, value, util) {
        if (!util.tx) {
            util.createTransaction([MetaHelper.tableName]);
        }
        var store = util.objectStore(MetaHelper.tableName);
        return promise(function (res, rej) {
            var req = store.put({
                key: key,
                value: value
            });
            req.onsuccess = function () {
                res();
            };
            req.onerror = rej;
        });
    };
    MetaHelper.get = function (key, util) {
        if (!util.tx) {
            util.createTransaction([MetaHelper.tableName]);
        }
        var store = util.objectStore(MetaHelper.tableName);
        return promise(function (res, rej) {
            var req = store.get(util.keyRange(key));
            req.onsuccess = function () {
                var result = req.result;
                res(result && result.value);
            };
            req.onerror = rej;
        });
    };
    MetaHelper.remove = function (key, util) {
        if (!util.tx) {
            util.createTransaction([MetaHelper.tableName]);
        }
        var store = util.objectStore(MetaHelper.tableName);
        return promise(function (res, rej) {
            var req = store.delete(util.keyRange(key));
            req.onsuccess = res;
            req.onerror = rej;
        });
    };
    MetaHelper.tableName = "JsStore_Meta";
    MetaHelper.dbSchema = "JsStore_DbSchema";
    return MetaHelper;
}());


;// CONCATENATED MODULE: ./src/worker/model/db_meta.ts


var DbMeta = /** @class */ (function () {
    function DbMeta(db) {
        this.name = db.name;
        this.version = db.version || 1;
        db.tables.push({
            name: MetaHelper.tableName,
            columns: {
                key: {
                    primaryKey: true
                },
                value: {
                    enableSearch: false
                }
            },
        });
        this.tables = db.tables.map(function (table) {
            return new TableMeta(table);
        });
    }
    return DbMeta;
}());


;// CONCATENATED MODULE: ./src/common/utils/for_obj.ts
var forObj = function (obj, cb) {
    for (var key in obj) {
        cb(key, obj[key]);
    }
};

;// CONCATENATED MODULE: ./src/worker/utils/log_helper.ts

var LogHelper = /** @class */ (function () {
    function LogHelper(type, info) {
        this.type = type;
        this.info_ = info;
        this.message = this.getMsg_();
    }
    LogHelper.prototype.log = function (msg) {
        if (this.status) {
            console.log(msg);
        }
    };
    LogHelper.prototype.throw = function () {
        throw this.get();
    };
    LogHelper.prototype.logError = function () {
        console.error(this.get());
    };
    LogHelper.prototype.get = function () {
        return {
            message: this.message,
            type: this.type
        };
    };
    LogHelper.prototype.getMsg_ = function () {
        var _a, _b;
        var errMsg;
        var info = this.info_;
        var errorHandler = (_a = {},
            _a[ERROR_TYPE.NotArray] = function () {
                errMsg = "Supplied value is not an array";
            },
            _a[ERROR_TYPE.UndefinedColumn] = function () {
                errMsg = "Column is undefined in Where";
            },
            _a[ERROR_TYPE.UndefinedValue] = function () {
                errMsg = "Value is undefined in Where";
            },
            _a[ERROR_TYPE.UndefinedColumnName] = function () {
                errMsg = "Column name is undefined '" + info['TableName'] + "'";
            },
            _a[ERROR_TYPE.UndefinedDbName] = function () {
                errMsg = "Database name is not supplied";
            },
            _a[ERROR_TYPE.UndefinedColumnValue] = function () {
                errMsg = "Column value is undefined";
            },
            _a[ERROR_TYPE.NoValueSupplied] = function () {
                errMsg = "No value is supplied";
            },
            _a[ERROR_TYPE.InvalidOp] = function () {
                errMsg = "Invalid Op Value '" + info['Op'] + "'";
            },
            _a[ERROR_TYPE.ColumnNotExist] = function () {
                var column = info['column'];
                errMsg = info['isOrder'] ?
                    (  true && info.isJoin ?
                        "Column '".concat(column, "' in order query is invalid. Please use '<table>.<column>' format for specifying a column in join query.") :
                        "Column '".concat(column, "' in order query does not exist")) :
                    "Column '".concat(column, "' does not exist");
            },
            _a[ERROR_TYPE.NoIndexFound] = function () {
                errMsg = "No index found for column '" + info['column'] + "'. Query can not be executed without index.";
            },
            _a[ERROR_TYPE.NullValue] = function () {
                errMsg = "Null value is not allowed for column '" + info['ColumnName'] + "'";
            },
            _a[ERROR_TYPE.WrongDataType] = function () {
                errMsg = "Supplied value for column '" + info['column'] +
                    "' have wrong data type";
            },
            _a[ERROR_TYPE.TableNotExist] = function () {
                errMsg = "Table '" + info['tableName'] + "' does not exist";
            },
            _a[ERROR_TYPE.DbNotExist] = function () {
                errMsg = "Database with name ".concat(info['dbName'], " does not exist");
            },
            _a[ERROR_TYPE.NotObject] = function () {
                errMsg = "supplied value is not object";
            },
            _a[ERROR_TYPE.InvalidOp] = function () {
                errMsg = "Invalid Config '" + info['Config'] + " '";
            },
            _a[ERROR_TYPE.DbBlocked] = function () {
                errMsg = "database is blocked, cant be deleted right now";
            },
            _a[ERROR_TYPE.NullValueInWhere] = function () {
                errMsg = "Null/undefined is not allowed in where. Column '".concat(info['column'], "' has null");
            },
            _a[ERROR_TYPE.MethodNotExist] = function () {
                errMsg = "method '".concat(info, "' does not exist.");
            },
            _a[ERROR_TYPE.IndexedDbNotSupported] = function () {
                errMsg = "Browser does not support indexeddb";
            },
            _a.getInfo = function () {
                errMsg = info;
            },
            _a[ERROR_TYPE.InvalidJoinQuery] = function () {
                errorHandler.getInfo();
            },
            _a[ERROR_TYPE.ImportScriptsFailed] = function () {
                errorHandler.getInfo();
            },
            _a[ERROR_TYPE.InvalidMiddleware] = function () {
                errMsg = "No function ".concat(info, " is found.");
            },
            _a);
        if (true) {
            Object.assign(errorHandler, (_b = {},
                _b[ERROR_TYPE.InvalidOrderQuery] = function () {
                    errorHandler.getInfo();
                },
                _b[ERROR_TYPE.InvalidGroupQuery] = function () {
                    errorHandler.getInfo();
                },
                _b));
        }
        var errorType = this.type;
        var method = errorHandler[errorType];
        if (method) {
            method();
        }
        else {
            if (!errorType) {
                this.type = ERROR_TYPE.Unknown;
            }
            errMsg = this.message;
        }
        return errMsg;
    };
    return LogHelper;
}());


;// CONCATENATED MODULE: ./src/worker/idbutil/index.ts


var IDBUtil = /** @class */ (function () {
    function IDBUtil() {
        this.logger = new LogHelper(null);
    }
    IDBUtil.prototype.emptyTx = function () {
        if (!this.tx)
            return;
        this.tx.oncomplete = null;
        this.tx.onabort = null;
        this.tx.onerror = null;
        this.tx = null;
    };
    IDBUtil.prototype.createTransactionIfNotExist = function (tables, mode) {
        if (!this.tx) {
            this.createTransaction(tables, mode);
        }
    };
    IDBUtil.prototype.createTransaction = function (tables, mode) {
        var _this = this;
        if (mode === void 0) { mode = IDB_MODE.ReadWrite; }
        this.tx = this.con.transaction(tables, mode);
        return promise(function (res, rej) {
            _this.tx.oncomplete = res;
            _this.tx.onabort = res;
            _this.tx.onerror = rej;
        });
    };
    IDBUtil.prototype.keyRange = function (value, op) {
        var keyRange;
        switch (op) {
            case QUERY_OPTION.Between:
                keyRange = IDBKeyRange.bound(value.low, value.high, false, false);
                break;
            case QUERY_OPTION.GreaterThan:
                keyRange = IDBKeyRange.lowerBound(value, true);
                break;
            case QUERY_OPTION.GreaterThanEqualTo:
                keyRange = IDBKeyRange.lowerBound(value);
                break;
            case QUERY_OPTION.LessThan:
                keyRange = IDBKeyRange.upperBound(value, true);
                break;
            case QUERY_OPTION.LessThanEqualTo:
                keyRange = IDBKeyRange.upperBound(value);
                break;
            default:
                keyRange = IDBKeyRange.only(value);
                break;
        }
        return keyRange;
    };
    IDBUtil.prototype.objectStore = function (name) {
        return this.tx.objectStore(name);
    };
    IDBUtil.prototype.abortTransaction = function () {
        if (this.tx) {
            this.tx.abort();
        }
    };
    IDBUtil.prototype.close = function () {
        var _this = this;
        if (this.con) {
            this.con.close();
        }
        // wait for 100 ms before success
        return promise(function (res) {
            _this.con = null;
            setTimeout(res, 100);
        });
    };
    IDBUtil.prototype.initDb = function (db) {
        var _this = this;
        var isDbCreated = false;
        var dbVersion = db.version;
        var oldVersion;
        var initLogic = function (res, rej) {
            var dbOpenRequest = indexedDB.open(db.name, dbVersion);
            dbOpenRequest.onsuccess = function () {
                _this.con = dbOpenRequest.result;
                _this.con.onversionchange = function (e) {
                    // if (e.newVersion === null) { // An attempt is made to delete the db
                    e.target.close(); // Manually close our connection to the db
                    // }
                };
                res({
                    isCreated: isDbCreated,
                    oldVersion: oldVersion,
                    newVersion: dbVersion
                });
            };
            dbOpenRequest.onerror = function (e) {
                console.error("error", e);
                rej(e);
            };
            dbOpenRequest.onupgradeneeded = function (e) {
                oldVersion = e.oldVersion;
                var target = e.target;
                var upgradeConnection = target.result;
                isDbCreated = true;
                var transaction = target.transaction;
                var storeNames = upgradeConnection.objectStoreNames;
                var createObjectStore = function (table) {
                    var option = table.primaryKey ? {
                        keyPath: table.primaryKey
                    } : {
                        autoIncrement: true
                    };
                    var store = upgradeConnection.createObjectStore(table.name, option);
                    table.columns.forEach(function (column) {
                        addColumn(store, column);
                    });
                };
                var addColumn = function (store, column) {
                    var columnName = column.name;
                    if (column.enableSearch && !store.indexNames.contains(columnName)) {
                        var options = column.primaryKey ? { unique: true } : { unique: column.unique };
                        options['multiEntry'] = column.multiEntry;
                        var keyPath = column.keyPath == null ? columnName : column.keyPath;
                        store.createIndex(columnName, keyPath, options);
                    }
                };
                var deleteColumn = function (store, table, columnName) {
                    var index = table.columns.findIndex(function (q) { return q.name === columnName; });
                    if (index >= 0) {
                        table.columns.splice(index, 1);
                        store.deleteIndex(columnName);
                    }
                };
                db.tables.forEach(function (table) {
                    if (!storeNames.contains(table.name)) {
                        return createObjectStore(table);
                    }
                    var store = transaction.objectStore(table.name);
                    for (var i = oldVersion + 1; i <= dbVersion; i++) {
                        var alterQuery = table.alter[i];
                        if (alterQuery) {
                            if (alterQuery.add) {
                                var newColumns = table.setColumn(alterQuery.add);
                                newColumns.forEach(function (column) {
                                    addColumn(store, column);
                                    table.columns.push(column);
                                });
                            }
                            forObj(alterQuery.drop || {}, (function (columnName) {
                                deleteColumn(store, table, columnName);
                            }));
                            forObj(alterQuery.modify || {}, (function (columnName, column) {
                                var shouldDelete = column.multiEntry || column.keyPath || column.unique;
                                var targetColumn = table.columns.find(function (q) { return q.name === columnName; });
                                var newColumn = Object.assign(targetColumn, column);
                                newColumn.name = columnName;
                                if (shouldDelete) {
                                    deleteColumn(store, table, columnName);
                                    addColumn(store, newColumn);
                                    table.columns.push(newColumn);
                                }
                            }));
                        }
                    }
                });
                var _loop_1 = function (i, length_1) {
                    var storeName = storeNames.item(i);
                    var tableIndex = db.tables.findIndex(function (qry) { return qry.name === storeName; });
                    if (tableIndex < 0) {
                        upgradeConnection.deleteObjectStore(storeName);
                    }
                };
                for (var i = 0, length_1 = storeNames.length; i < length_1; i++) {
                    _loop_1(i, length_1);
                }
            };
        };
        return promise(initLogic);
    };
    return IDBUtil;
}());


;// CONCATENATED MODULE: ./src/common/utils/promise_all.ts
var promiseAll = function (promises) {
    return Promise.all(promises);
};

;// CONCATENATED MODULE: ./src/worker/utils/promise_reject.ts
var promiseReject = function (value) {
    return Promise.reject(value);
};

;// CONCATENATED MODULE: ./src/worker/utils/get_error.ts

var getError = function (e) {
    var customError = e instanceof LogHelper;
    if (customError) {
        e.logError();
        return e.get();
    }
    else {
        var error = void 0;
        if (e.name) {
            error = new LogHelper(e.name);
            error.message = e.message;
        }
        else {
            error = new LogHelper(e.target.error.name);
            error.message = e.target.error.message;
        }
        if (true) {
            error.logError();
        }
        return error.get();
    }
};

;// CONCATENATED MODULE: ./src/worker/utils/get_error_from_exception.ts


var getErrorFromException = function (ex, type) {
    if (type === void 0) { type = ERROR_TYPE.InvalidQuery; }
    ex.name = type;
    return getError(ex);
};

;// CONCATENATED MODULE: ./src/worker/executors/base.ts

var Base = /** @class */ (function () {
    function Base() {
        this.rowAffected = 0;
        this.isTxQuery = false;
        this.results = [];
    }
    Object.defineProperty(Base.prototype, "db", {
        get: function () {
            return this.util.db;
        },
        enumerable: false,
        configurable: true
    });
    Base.prototype.table = function (name) {
        var tableName = name || this.tableName;
        return this.db.tables.find(function (q) { return q.name === tableName; });
    };
    Base.prototype.primaryKey = function (tableName) {
        var query = this.query;
        if (!query.from && query.store && query.meta) {
            var primaryKey = query.meta.primaryKey;
            if (true) {
                if (primaryKey == null) {
                    delete query.store;
                    console.warn("no primary key found for query - ".concat(JSON.stringify(this.query)));
                }
            }
            return primaryKey;
        }
        var table = this.table(tableName);
        if (true) {
            if (table == null && query.store) {
                delete query.store;
                var metaValue = query.meta;
                if (!metaValue || !metaValue.primaryKey) {
                    console.warn("no primary key found for query - ".concat(JSON.stringify(this.query), ". Please supply primary key in meta field."));
                }
            }
        }
        return table.primaryKey;
    };
    Base.prototype.getColumnInfo = function (columnName, tableName) {
        return this.table(tableName).columns.find(function (column) { return column.name === columnName; });
    };
    Base.prototype.onException = function (ex, type) {
        console.error(ex);
        this.util.abortTransaction();
        return promiseReject(getErrorFromException(ex, type));
    };
    return Base;
}());


;// CONCATENATED MODULE: ./src/worker/utils/get_data_type.ts

var getDataType = function (value) {
    if (value == null) {
        return DATA_TYPE.Null;
    }
    var type = typeof value;
    switch (type) {
        case 'object':
            if (Array.isArray(value)) {
                return DATA_TYPE.Array;
            }
            if (value instanceof Date) {
                return DATA_TYPE.DateTime;
            }
    }
    return type;
};

;// CONCATENATED MODULE: ./src/worker/utils/is_null.ts
var isNull = function (value) {
    if (value == null) {
        return true;
    }
    else {
        switch (typeof value) {
            // case 'string': return value.length === 0;
            case 'number': return isNaN(value);
        }
    }
    return false;
};

;// CONCATENATED MODULE: ./src/worker/executors/insert/values_checker.ts


var ValuesChecker = /** @class */ (function () {
    function ValuesChecker(table, autoIncValues) {
        this.table = table;
        this.autoIncrementValue = autoIncValues;
    }
    ValuesChecker.prototype.checkAndModifyValues = function (query) {
        var _this = this;
        var err;
        this.query = query;
        var values = query.values;
        var ignoreIndexes = [];
        values.every(function (item, index) {
            err = _this.checkAndModifyValue(item);
            if (query.ignore && err) {
                ignoreIndexes.push(index);
                err = null;
            }
            return err ? false : true;
        });
        ignoreIndexes.forEach(function (index) {
            values.splice(index, 1);
        });
        return { err: err, values: values };
    };
    ValuesChecker.prototype.checkAndModifyValue = function (value) {
        var _this = this;
        var error;
        this.table.columns.every(function (column) {
            error = _this.checkAndModifyColumnValue_(column, value);
            return error ? false : true;
        });
        return error;
    };
    ValuesChecker.prototype.checkNotNullAndDataType_ = function (column, value) {
        // check not null schema
        if (column.notNull && isNull(value[column.name])) {
            return this.getError(ERROR_TYPE.NullValue, { ColumnName: column.name });
        }
        // check datatype
        else if (column.dataType && !isNull(value[column.name]) &&
            getDataType(value[column.name]) !== column.dataType) {
            return this.getError(ERROR_TYPE.WrongDataType, { column: column.name });
        }
    };
    ValuesChecker.prototype.checkAndModifyColumnValue_ = function (column, value) {
        var columnValue = value[column.name];
        // check auto increment scheme
        if (column.autoIncrement) {
            // if value is null, then create the autoincrement value
            if (isNull(columnValue)) {
                value[column.name] = ++this.autoIncrementValue[column.name];
            }
            else {
                if (getDataType(columnValue) === DATA_TYPE.Number) {
                    // if column value is greater than autoincrement value saved, then make the
                    // column value as autoIncrement value
                    if (columnValue > this.autoIncrementValue[column.name]) {
                        this.autoIncrementValue[column.name] = columnValue;
                    }
                }
            }
        }
        // check Default Schema
        else if (column.default !== undefined && isNull(columnValue)) {
            value[column.name] = column.default;
        }
        var query = this.query;
        if (query.validation) {
            return this.checkNotNullAndDataType_(column, value);
        }
    };
    ValuesChecker.prototype.getError = function (error, details) {
        return new LogHelper(error, details);
    };
    return ValuesChecker;
}());


;// CONCATENATED MODULE: ./src/worker/executors/update/schema_checker.ts


var SchemaChecker = /** @class */ (function () {
    function SchemaChecker(table) {
        this.table = table;
    }
    SchemaChecker.prototype.check = function (setValue, tblName) {
        var _this = this;
        var log;
        if (typeof setValue === DATA_TYPE.Object) {
            if (this.table) {
                // loop through table column and find data is valid
                this.table.columns.every(function (column) {
                    if (column.name in setValue) {
                        log = _this.checkByColumn_(column, setValue[column.name]);
                    }
                    return log ? false : true;
                });
            }
            else {
                log = new LogHelper(ERROR_TYPE.TableNotExist, { tableName: tblName });
            }
        }
        else {
            log = new LogHelper(ERROR_TYPE.NotObject);
        }
        return log;
    };
    SchemaChecker.prototype.checkByColumn_ = function (column, value) {
        // check not null schema
        if (column.notNull === true && isNull(value)) {
            return new LogHelper(ERROR_TYPE.NullValue, { ColumnName: column.name });
        }
        // check datatype
        var type = getDataType(value);
        var checkFurther = value != null;
        if (column.dataType && checkFurther) {
            if (type !== column.dataType && type !== 'object') {
                return new LogHelper(ERROR_TYPE.WrongDataType, { column: column.name });
            }
        }
        // check allowed operators
        if (checkFurther && type === 'object') {
            var allowedOp = ['+', '-', '*', '/', '{push}'];
            for (var prop in value) {
                if (allowedOp.indexOf(prop) < 0 && column.dataType && type !== column.dataType) {
                    return new LogHelper(ERROR_TYPE.WrongDataType, { column: column.name });
                }
            }
        }
    };
    return SchemaChecker;
}());


;// CONCATENATED MODULE: ./src/worker/executors/query_helper.ts




var QueryHelper = /** @class */ (function () {
    function QueryHelper(dbSchema) {
        this.db = dbSchema;
    }
    QueryHelper.prototype.validate = function (api, query) {
        switch (api) {
            case API.Select:
            case API.Remove:
            case API.Count:
                return this.checkSelect(query);
            case API.Insert:
                return this.checkInsertQuery(query);
            case API.Update:
                return this.checkUpdate(query);
        }
    };
    QueryHelper.prototype.getTable_ = function (tableName) {
        return this.db.tables.find(function (q) { return q.name === tableName; });
    };
    QueryHelper.prototype.isInsertQryValid = function (query) {
        var table = this.getTable_(query.into);
        var log;
        if (table) {
            switch (getDataType(query.values)) {
                case DATA_TYPE.Array:
                    break;
                case DATA_TYPE.Null:
                    log = new LogHelper(ERROR_TYPE.NoValueSupplied);
                    break;
                default:
                    log = new LogHelper(ERROR_TYPE.NotArray);
            }
        }
        else {
            log = new LogHelper(ERROR_TYPE.TableNotExist, { tableName: query.into });
        }
        return {
            table: table,
            log: log
        };
    };
    QueryHelper.prototype.checkUpdate = function (query) {
        var err = new SchemaChecker(this.getTable_(query.in)).
            check(query.set, query.in);
        if (err)
            return err;
        if (query.where != null) {
            err = this.checkForNullInWhere_(query);
            if (err)
                return err;
            this.addGreatAndLessToNotOp_(query);
        }
    };
    QueryHelper.prototype.checkSelect = function (query) {
        if (!query.store) {
            var table = this.getTable_(query.from);
            if (!table) {
                return new LogHelper(ERROR_TYPE.TableNotExist, { tableName: query.from });
            }
        }
        if (query.where) {
            var err = this.checkForNullInWhere_(query);
            if (err)
                return err;
            this.addGreatAndLessToNotOp_(query);
        }
    };
    QueryHelper.prototype.checkForNullInWhere_ = function (query) {
        for (var columnName in query.where) {
            if (query.where[columnName] == null) {
                return new LogHelper(ERROR_TYPE.NullValueInWhere, { column: columnName });
            }
        }
    };
    QueryHelper.prototype.addGreatAndLessToNotOp_ = function (query) {
        var whereQuery = query.where;
        var containsNot = function (qry, keys) {
            return keys.findIndex(function (key) { return qry[key][QUERY_OPTION.NotEqualTo] != null; }) >= 0;
        };
        var addToSingleQry = function (qry, keys) {
            var value;
            keys.forEach(function (prop) {
                value = qry[prop];
                if (value[QUERY_OPTION.NotEqualTo] != null) {
                    qry[prop][QUERY_OPTION.GreaterThan] = value[QUERY_OPTION.NotEqualTo];
                    if (qry[QUERY_OPTION.Or] === undefined) {
                        qry[QUERY_OPTION.Or] = {};
                        qry[QUERY_OPTION.Or][prop] = {};
                    }
                    else if (qry[QUERY_OPTION.Or][prop] === undefined) {
                        qry[QUERY_OPTION.Or][prop] = {};
                    }
                    qry[QUERY_OPTION.Or][prop][QUERY_OPTION.LessThan] = value[QUERY_OPTION.NotEqualTo];
                    delete qry[prop][QUERY_OPTION.NotEqualTo];
                }
            });
            return qry;
        };
        switch (getDataType(whereQuery)) {
            case DATA_TYPE.Object:
                var queryKeys = Object.keys(whereQuery);
                if (containsNot(whereQuery, queryKeys)) {
                    if (queryKeys.length === 1) {
                        query.where = addToSingleQry(whereQuery, queryKeys);
                    }
                    else {
                        var whereTmpQry_1 = [];
                        queryKeys.forEach(function (prop) {
                            var _a;
                            whereTmpQry_1.push(addToSingleQry((_a = {}, _a[prop] = whereQuery[prop], _a), [prop]));
                        });
                        query.where = whereTmpQry_1;
                    }
                }
                break;
            default:
                var whereTmp_1 = [];
                whereQuery.forEach(function (qry) {
                    var qryKeys = Object.keys(qry);
                    if (containsNot(qry, qryKeys)) {
                        qry = addToSingleQry(qry, qryKeys);
                    }
                    whereTmp_1.push(qry);
                });
                query.where = whereTmp_1;
        }
    };
    QueryHelper.prototype.checkInsertQuery = function (query) {
        var validResult = this.isInsertQryValid(query);
        var table = validResult.table;
        var error = validResult.log;
        if (error)
            return error;
        if (query.skipDataCheck)
            return;
        var valueCheckerInstance = new ValuesChecker(table, table.autoIncColumnValue);
        var _a = valueCheckerInstance.checkAndModifyValues(query), values = _a.values, err = _a.err;
        query.values = values;
        return err;
    };
    return QueryHelper;
}());


;// CONCATENATED MODULE: ./src/worker/executors/insert/index.ts
var __extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();






var Insert = /** @class */ (function (_super) {
    __extends(Insert, _super);
    function Insert(query, util) {
        var _this = _super.call(this) || this;
        _this.valuesAffected_ = [];
        if (query.validation == null) {
            query.validation = true;
        }
        _this.query = query;
        _this.util = util;
        _this.tableName = query.into;
        return _this;
    }
    Insert.prototype.execute = function (beforeInsert) {
        var _this = this;
        var db = this.db;
        var err = new QueryHelper(db).validate(API.Insert, this.query);
        if (err)
            return promiseReject(err);
        return beforeInsert().then(function (_) {
            return _this.insertData_(db).then(function (_) {
                return _this.query.return ? _this.valuesAffected_ : _this.rowAffected;
            });
        }).catch(function (err) {
            _this.util.abortTransaction();
            return promiseReject(err);
        });
    };
    Insert.prototype.insertData_ = function (db) {
        var _this = this;
        var onInsertData;
        var addMethod;
        var query = this.query;
        if (query.return) {
            onInsertData = function (value) {
                _this.valuesAffected_.push(value);
            };
        }
        else {
            onInsertData = function (value) {
                ++_this.rowAffected;
            };
        }
        addMethod = (function () {
            var idbMethod = query.upsert ? "put" : "add";
            if (query.ignore && !_this.isTxQuery) {
                return function (value) {
                    var tx = _this.util.con.transaction(query.into, IDB_MODE.ReadWrite);
                    var objectStore = tx.objectStore(query.into);
                    return objectStore[idbMethod](value);
                };
            }
            if (!_this.isTxQuery) {
                _this.util.createTransaction([query.into, MetaHelper.tableName]);
            }
            _this.objectStore = _this.util.objectStore(_this.tableName);
            return function (value) {
                return _this.objectStore[idbMethod](value);
            };
        })();
        return promiseAll(query.values.map(function (value) {
            return promise(function (res, rej) {
                var addResult = addMethod(value);
                addResult.onerror = function (err) {
                    if (query.ignore) {
                        res();
                    }
                    else {
                        rej(err);
                    }
                };
                addResult.onsuccess = function () {
                    onInsertData(value);
                    res();
                };
            });
        })).then(function () {
            MetaHelper.set(MetaHelper.dbSchema, db, _this.util);
        });
    };
    return Insert;
}(Base));


;// CONCATENATED MODULE: ./src/worker/utils/set_cross_browser_idb.ts
var setCrossBrowserIndexedDb = function () {
    try {
        if (!indexedDB) {
            indexedDB = self.mozIndexedDB ||
                self.webkitIndexedDB || self.msIndexedDB;
        }
        if (indexedDB) {
            IDBTransaction = IDBTransaction ||
                self.webkitIDBTransaction || self.msIDBTransaction;
            self.IDBKeyRange = self.IDBKeyRange ||
                self.webkitIDBKeyRange || self.msIDBKeyRange;
        }
        else {
            return false;
        }
    }
    catch (ex) {
        return false;
    }
    return true;
};

;// CONCATENATED MODULE: ./src/worker/constants/index.ts

var IS_WORKER = typeof self.alert === 'undefined' && typeof ServiceWorkerGlobalScope === 'undefined';
var IS_IDB_SUPPORTED = setCrossBrowserIndexedDb();

;// CONCATENATED MODULE: ./src/worker/utils/is_array.ts
var isArray = function (value) {
    return Array.isArray(value);
};

;// CONCATENATED MODULE: ./src/worker/utils/is_object.ts
var isObject = function (value) {
    return typeof value === 'object';
};

;// CONCATENATED MODULE: ./src/worker/utils/get_keys.ts
var getKeys = function (value) {
    return Object.keys(value);
};

;// CONCATENATED MODULE: ./src/worker/utils/get_length.ts

var getLength = function (value) {
    return getKeys(value).length;
};

;// CONCATENATED MODULE: ./src/worker/utils/get_object_first_key.ts
var getObjectFirstKey = function (value) {
    for (var key in value) {
        return key;
    }
};

;// CONCATENATED MODULE: ./src/worker/executors/select/base_select.ts
var setPushResult = function () {
    var _this = this;
    var caseQuery = this.query.case;
    if (caseQuery) {
        this.pushResult = function (value) {
            var columnName;
            _this.thenEvaluator.setCaseAndValue(caseQuery, value);
            for (columnName in caseQuery) {
                value[columnName] = _this.thenEvaluator.setColumn(columnName).evaluate();
            }
            _this.results.push(value);
        };
    }
    else {
        this.pushResult = function (value) {
            _this.results.push(value);
        };
    }
};
var setLimitAndSkipEvaluationAtEnd = function () {
    if (this.query.limit) {
        this.limitAtEnd = true;
    }
    if (this.query.skip) {
        this.skipAtEnd = true;
    }
};
var removeDuplicates = function () {
    var datas = this.results;
    var key = this.primaryKey();
    var lookupObject = new Map();
    for (var i = 0, len = datas.length; i < len; i++) {
        lookupObject.set(datas[i][key], datas[i]);
    }
    this.results = Array.from(lookupObject.values());
};

;// CONCATENATED MODULE: ./src/worker/executors/select/then_evaluator.ts

var ThenEvaluator = /** @class */ (function () {
    function ThenEvaluator() {
    }
    ThenEvaluator.prototype.setCaseAndValue = function (caseQuery, value) {
        this.caseQuery_ = caseQuery;
        this.setValue(value);
    };
    ThenEvaluator.prototype.setCaseAndColumn = function (caseQuery, columnName) {
        this.caseQuery_ = caseQuery;
        this.setColumn(columnName);
        return this;
    };
    ThenEvaluator.prototype.setColumn = function (columnName) {
        this.columnName_ = columnName;
        this.caseColumnQuery_ = this.caseQuery_[this.columnName_];
        this.length_ = this.caseColumnQuery_.length;
        return this;
    };
    ThenEvaluator.prototype.setValue = function (value) {
        this.value = value;
        return this;
    };
    ThenEvaluator.prototype.evaluate = function () {
        for (var i = 0; i < this.length_; i++) {
            if (this.checkCase_(this.caseColumnQuery_[i]) === true) {
                return this.caseColumnQuery_[i].then;
            }
        }
        var lastThen = this.caseColumnQuery_[this.length_ - 1].then;
        return lastThen == null ? this.value[this.columnName_] : lastThen;
    };
    ThenEvaluator.prototype.checkCase_ = function (cond) {
        var queryOption;
        for (queryOption in cond) {
            switch (queryOption) {
                case QUERY_OPTION.GreaterThan:
                    if (this.value[this.columnName_] > cond[queryOption]) {
                        return true;
                    }
                    break;
                case QUERY_OPTION.Equal:
                    if (this.value[this.columnName_] === cond[queryOption]) {
                        return true;
                    }
                    break;
                case QUERY_OPTION.LessThan:
                    if (this.value[this.columnName_] < cond[queryOption]) {
                        return true;
                    }
                    break;
                case QUERY_OPTION.GreaterThanEqualTo:
                    if (this.value[this.columnName_] >= cond[queryOption]) {
                        return true;
                    }
                    break;
                case QUERY_OPTION.LessThanEqualTo:
                    if (this.value[this.columnName_] <= cond[queryOption]) {
                        return true;
                    }
                    break;
                case QUERY_OPTION.NotEqualTo:
                    if (this.value[this.columnName_] !== cond[queryOption]) {
                        return true;
                    }
                    break;
                case QUERY_OPTION.Between:
                    if (this.value[this.columnName_] > cond[queryOption].low && this.value[this.columnName_] < cond[queryOption].high) {
                        return true;
                    }
                    break;
            }
            return false;
        }
    };
    return ThenEvaluator;
}());


;// CONCATENATED MODULE: ./src/worker/executors/select/where.ts

var getCursorOnSuccess = function (simpleFn, limitFn, skipFn, skipAndLimitFn) {
    if (this.limitAtEnd === false && this.skipAtEnd === false) {
        if (this.skipRecord) {
            return this.limitRecord ? skipAndLimitFn : skipFn;
        }
        if (this.limitRecord) {
            return limitFn;
        }
    }
    return simpleFn;
};
var executeWhereLogic = function (column, value, op, dir) {
    var _this = this;
    value = op ? value[op] : value;
    var cursorRequest = this.objectStore.index(column).openCursor(this.util.keyRange(value, op), dir);
    var onSuccess = getCursorOnSuccess.call(this, executeSimpleForWhere_, executeLimitForWhere_, executeSkipForWhere_, executeSkipAndLimitForWhere_);
    return promise(function (res, rej) {
        cursorRequest.onerror = rej;
        cursorRequest.onsuccess = onSuccess.call(_this, res);
    });
};
var executeSkipAndLimitForWhere_ = function (onFinish) {
    var _this = this;
    var recordSkipped = false;
    return function (e) {
        var cursor = e.target.result;
        if (cursor) {
            if (recordSkipped && _this.results.length !== _this.limitRecord) {
                if (_this.shouldAddValue(cursor)) {
                    _this.pushResult(cursor.value);
                }
                cursor.continue();
            }
            else {
                recordSkipped = true;
                cursor.advance(_this.skipRecord);
            }
        }
        else {
            onFinish();
        }
    };
};
var executeSkipForWhere_ = function (onFinish) {
    var _this = this;
    var recordSkipped = false;
    return function (e) {
        var cursor = e.target.result;
        if (cursor) {
            if (recordSkipped) {
                if (_this.shouldAddValue(cursor)) {
                    _this.pushResult(cursor.value);
                }
                cursor.continue();
            }
            else {
                recordSkipped = true;
                cursor.advance(_this.skipRecord);
            }
        }
        else {
            onFinish();
        }
    };
};
var executeLimitForWhere_ = function (onFinish) {
    var _this = this;
    return function (e) {
        var cursor = e.target.result;
        if (cursor && _this.results.length !== _this.limitRecord) {
            if (_this.shouldAddValue(cursor)) {
                _this.pushResult(cursor.value);
            }
            cursor.continue();
        }
        else {
            onFinish();
        }
    };
};
var executeSimpleForWhere_ = function (onFinish) {
    var _this = this;
    return function (e) {
        var cursor = e.target.result;
        if (cursor) {
            if (_this.shouldAddValue(cursor)) {
                _this.pushResult(cursor.value);
            }
            cursor.continue();
        }
        else {
            onFinish();
        }
    };
};

;// CONCATENATED MODULE: ./src/worker/executors/select/not_where.ts



var executeWhereUndefinedLogic = function () {
    var _this = this;
    var cursorRequest;
    var query = this.query;
    var store = query.store;
    if (store) {
        this.results = store;
        this.setLimitAndSkipEvaluationAtEnd_();
        return promiseResolve();
    }
    var orderQuery = query.order;
    var objectStore = this.objectStore;
    if (orderQuery && orderQuery.idbSorting !== false && orderQuery.by) {
        if (objectStore.indexNames.contains(orderQuery.by)) {
            var orderType = orderQuery.type &&
                orderQuery.type.toLowerCase() === 'desc' ? 'prev' : 'next';
            this.sorted = true;
            cursorRequest = objectStore.index(orderQuery.by).
                openCursor(null, orderType);
        }
        else {
            return promiseReject(new LogHelper(ERROR_TYPE.ColumnNotExist, { column: orderQuery.by, isOrder: true }));
        }
    }
    else {
        cursorRequest = objectStore.openCursor();
    }
    var onSuccess = getCursorOnSuccess.call(this, executeSimple, executeLimit, executeSkip, executeSkipAndLimit);
    return promise(function (res, rej) {
        cursorRequest.onerror = rej;
        cursorRequest.onsuccess = onSuccess.call(_this, res);
    });
};
var executeSkipAndLimit = function (onFinished) {
    var _this = this;
    var recordSkipped = false, cursor;
    return function (e) {
        cursor = e.target.result;
        if (cursor) {
            if (recordSkipped && _this.results.length !== _this.limitRecord) {
                _this.pushResult(cursor.value);
                cursor.continue();
            }
            else {
                recordSkipped = true;
                cursor.advance(_this.skipRecord);
            }
        }
        else {
            onFinished();
        }
    };
};
var executeSkip = function (onFinished) {
    var _this = this;
    var recordSkipped = false, cursor;
    return function (e) {
        cursor = e.target.result;
        if (cursor) {
            if (recordSkipped) {
                _this.pushResult(cursor.value);
                cursor.continue();
            }
            else {
                recordSkipped = true;
                cursor.advance(_this.skipRecord);
            }
        }
        else {
            onFinished();
        }
    };
};
var executeSimple = function (onFinished) {
    var _this = this;
    var cursor;
    return function (e) {
        cursor = e.target.result;
        if (cursor) {
            _this.pushResult(cursor.value);
            cursor.continue();
        }
        else {
            onFinished();
        }
    };
};
var executeLimit = function (onFinished) {
    var _this = this;
    var cursor;
    return function (e) {
        cursor = e.target.result;
        if (cursor && _this.results.length !== _this.limitRecord) {
            _this.pushResult(cursor.value);
            cursor.continue();
        }
        else {
            onFinished();
        }
    };
};

;// CONCATENATED MODULE: ./src/worker/utils/remove_space.ts
var removeSpace = function (value) {
    return value.replace(/\s/g, '');
};

;// CONCATENATED MODULE: ./src/worker/executors/select/order_by.ts


var processGroupDistinctAggr = function () {
    var query = this.query;
    if (query.distinct) {
        var groupBy = [];
        var result = this.results[0];
        for (var key in result) {
            groupBy.push(key);
        }
        var primaryKey = this.primaryKey();
        var index = groupBy.indexOf(primaryKey);
        groupBy.splice(index, 1);
        query.groupBy = groupBy.length > 0 ? groupBy : null;
    }
    if (query.groupBy) {
        if (query.aggregate) {
            this.executeAggregateGroupBy();
        }
        else {
            this.processGroupBy();
        }
    }
    else if (query.aggregate) {
        this.processAggregateQry();
    }
};
var getOrderColumnInfo = function (orderColumn) {
    var column;
    if (!this.query.store) {
        if (this.query.join == null) {
            column = this.getColumnInfo(orderColumn);
        }
        else {
            var splittedByDot = removeSpace(orderColumn).split(".");
            var joinOrderColumn = splittedByDot[1];
            if (  true && joinOrderColumn == null) {
                new LogHelper(ERROR_TYPE.ColumnNotExist, { column: orderColumn, isOrder: true, isJoin: true }).throw();
            }
            column = this.getColumnInfo(joinOrderColumn, splittedByDot[0]);
        }
    }
    if (column == null) {
        var valueFromFirstColumn = this.results[0][orderColumn];
        if (valueFromFirstColumn) {
            return {
                dataType: getDataType(valueFromFirstColumn),
                name: orderColumn
            };
        }
        throw new LogHelper(ERROR_TYPE.ColumnNotExist, { column: orderColumn, isOrder: true });
    }
    return column;
};
var compareStringInDesc_ = function (a, b) {
    return b.localeCompare(a);
};
var compareStringinAsc_ = function (a, b) {
    return a.localeCompare(b);
};
var compareDefaultInDesc_ = function (a, b) {
    return new String(b).localeCompare(a);
};
var compareDefaultinAsc_ = function (a, b) {
    return new String(a).localeCompare(b);
};
var compareNumberInDesc_ = function (a, b) {
    return b - a;
};
var compareNumberinAsc_ = function (a, b) {
    return a - b;
};
var compareDateInDesc_ = function (a, b) {
    return b.getTime() - a.getTime();
};
var compareDateInAsc_ = function (a, b) {
    return a.getTime() - b.getTime();
};
var getValueComparer_ = function (column, order) {
    switch (column.dataType) {
        case DATA_TYPE.String:
            return order.type === 'asc' ? compareStringinAsc_ : compareStringInDesc_;
        case DATA_TYPE.Number:
            return order.type === 'asc' ? compareNumberinAsc_ : compareNumberInDesc_;
        case DATA_TYPE.DateTime:
            return order.type === 'asc' ? compareDateInAsc_ : compareDateInDesc_;
        default:
            return order.type === 'asc' ? compareDefaultinAsc_ : compareDefaultInDesc_;
    }
};
var orderBy_ = function (order) {
    var _a;
    order.type = getOrderType_(order.type);
    var orderColumn = order.by;
    var thenEvaluator = this.thenEvaluator;
    if (orderColumn != null && typeof orderColumn === DATA_TYPE.Object) {
        var caseQuery_1 = orderColumn;
        var getValInAscDesc = function (stringComparer, numberComparer) {
            return function (value1, value2) {
                for (var columnName in caseQuery_1) {
                    thenEvaluator.setCaseAndValue(caseQuery_1, value1);
                    var column1 = thenEvaluator.setColumn(columnName).evaluate();
                    thenEvaluator.setCaseAndValue(caseQuery_1, value2);
                    var column2 = thenEvaluator.setColumn(columnName).evaluate();
                    switch (typeof value1[column1]) {
                        case DATA_TYPE.String:
                            return stringComparer(value1[column1], value2[column2]);
                        default:
                            return numberComparer(value1[column1], value2[column2]);
                    }
                }
            };
        };
        var sortMethod = order.type === 'asc' ?
            getValInAscDesc(compareStringinAsc_, compareNumberinAsc_) :
            getValInAscDesc(compareStringInDesc_, compareNumberInDesc_);
        this.results.sort(sortMethod);
    }
    else {
        var columnInfo = getOrderColumnInfo.call(this, orderColumn);
        if (columnInfo != null) {
            var orderMethod_1 = getValueComparer_(columnInfo, order);
            orderColumn = columnInfo.name;
            if (order.case == null) {
                this.results.sort(function (a, b) {
                    return orderMethod_1(a[orderColumn], b[orderColumn]);
                });
            }
            else {
                thenEvaluator.setCaseAndColumn((_a = {}, _a[orderColumn] = order.case, _a), orderColumn);
                this.results.sort(function (a, b) {
                    return orderMethod_1(thenEvaluator.setValue(a).evaluate(), thenEvaluator.setValue(b).evaluate());
                });
            }
        }
    }
};
var getOrderType_ = function (type) {
    return type == null ? 'asc' : type.toLowerCase();
};
var processOrderBy = function () {
    var order = this.query.order;
    if (order && this.results.length > 0 && !this.sorted) {
        var orderQueryType = getDataType(order);
        if (orderQueryType === DATA_TYPE.Object) {
            orderBy_.call(this, order);
        }
        else if (orderQueryType === DATA_TYPE.Array) {
            orderBy_.call(this, order[0]);
            var _loop_1 = function (i, length_1) {
                var prevOrderQueryBy = order[i - 1].by;
                var currentOrderQuery = order[i];
                var currentorderQueryBy = currentOrderQuery.by;
                var orderColumnDetail = getOrderColumnInfo.call(this_1, currentorderQueryBy);
                if (orderColumnDetail != null) {
                    currentorderQueryBy = orderColumnDetail.name;
                    currentOrderQuery.type = getOrderType_(currentOrderQuery.type);
                    var orderMethod_2 = getValueComparer_(orderColumnDetail, currentOrderQuery);
                    this_1.results.sort(function (a, b) {
                        if (a[prevOrderQueryBy] === b[prevOrderQueryBy]) {
                            return orderMethod_2(a[currentorderQueryBy], b[currentorderQueryBy]);
                        }
                        return 0;
                    });
                }
            };
            var this_1 = this;
            for (var i = 1, length_1 = order.length; i < length_1; i++) {
                _loop_1(i, length_1);
            }
        }
    }
};
var processAggregateQry = function () {
    var datas = this.results;
    var datasLength = datas.length;
    var results = {};
    var columnToAggregate;
    var getCount = function () {
        var result = 0;
        for (var i in datas) {
            result += datas[i][columnToAggregate] ? 1 : 0;
        }
        return result;
    };
    var getMax = function () {
        var result = 0;
        for (var i in datas) {
            result = result > datas[i][columnToAggregate] ?
                result : datas[i][columnToAggregate];
        }
        return result;
    };
    var getMin = function () {
        var result = Infinity, value = Infinity;
        for (var i in datas) {
            value = datas[i][columnToAggregate] ?
                datas[i][columnToAggregate] : Infinity;
            result = result < value ? result : value;
        }
        return result;
    };
    var getSum = function () {
        var result = 0;
        for (var i in datas) {
            result += datas[i][columnToAggregate];
        }
        return result;
    };
    var getAvg = function () {
        return getSum() / datasLength;
    };
    var aggregateQry = this.query.aggregate;
    for (var prop in aggregateQry) {
        var aggregateColumn = aggregateQry[prop];
        var aggregateValType = getDataType(aggregateColumn);
        var aggregateCalculator = void 0;
        switch (prop) {
            case 'count':
                aggregateCalculator = getCount;
                break;
            case 'max':
                aggregateCalculator = getMax;
                break;
            case 'min':
                aggregateCalculator = getMin;
                break;
            case 'sum':
                aggregateCalculator = getSum;
                break;
            case 'avg':
                aggregateCalculator = getAvg;
        }
        switch (aggregateValType) {
            case DATA_TYPE.String:
                columnToAggregate = aggregateColumn;
                results["".concat(prop, "(").concat(columnToAggregate, ")")] = aggregateCalculator();
                break;
            case DATA_TYPE.Array:
                for (var key in aggregateColumn) {
                    columnToAggregate = aggregateColumn[key];
                    results["".concat(prop, "(").concat(columnToAggregate, ")")] = aggregateCalculator();
                }
        }
    }
    // add results to the first index of result
    for (var prop in results) {
        datas[0][prop] = results[prop];
    }
    this.results = [datas[0]];
};

;// CONCATENATED MODULE: ./src/worker/executors/select/group_by.ts


var processGroupBy = function () {
    var groupBy = this.query.groupBy;
    var datas = this.results;
    var lookUpObj = new Map();
    var groupByDataType = getDataType(groupBy);
    if (groupByDataType !== DATA_TYPE.Object) {
        if (groupByDataType === DATA_TYPE.String) {
            for (var i in datas) {
                lookUpObj.set(datas[i][groupBy], datas[i]);
            }
        }
        else {
            var objKey = void 0;
            for (var i in datas) {
                objKey = "";
                for (var column in groupBy) {
                    objKey += datas[i][groupBy[column]];
                }
                lookUpObj.set(objKey, datas[i]);
            }
        }
    }
    else {
        var caseQueryLength = Object.keys(groupBy).length;
        if (caseQueryLength === 1) {
            var groupByColumn = getObjectFirstKey(groupBy);
            this.thenEvaluator.setCaseAndColumn(groupBy, groupByColumn);
            for (var i in datas) {
                lookUpObj.set(this.thenEvaluator.setValue(datas[i]).evaluate(), datas[i]);
            }
        }
        else {
            var objKey = void 0;
            for (var i in datas) {
                objKey = "";
                this.thenEvaluator.setCaseAndValue(groupBy, datas[i]);
                for (var column in groupBy) {
                    objKey += this.thenEvaluator.setColumn(column).evaluate();
                }
                lookUpObj.set(objKey, datas[i]);
            }
        }
    }
    this.results = Array.from(lookUpObj.values());
};
var executeAggregateGroupBy = function () {
    var grpQry = this.query.groupBy;
    var datas = this.results;
    var lookUpObj = new Map();
    // assign aggregate
    var aggregateQry = this.query.aggregate;
    var index;
    var objKey;
    var value;
    var columnToAggregate;
    var calculateAggregate = function () {
        var getCount = function () {
            value = lookUpObj.get(objKey);
            // get old value
            value = value ? value["count(" + columnToAggregate + ")"] : 0;
            // add with old value if data exist
            value += datas[index][columnToAggregate] ? 1 : 0;
            return value;
        };
        var getList = function () {
            value = lookUpObj.get(objKey);
            // get old value
            value = value ? value["list(" + columnToAggregate + ")"] : [];
            // push value
            value.push(datas[index][columnToAggregate]);
            return value;
        };
        var getMax = function () {
            value = lookUpObj.get(objKey);
            // get old value
            value = value ? value["max(" + columnToAggregate + ")"] : 0;
            datas[index][columnToAggregate] = datas[index][columnToAggregate] ?
                datas[index][columnToAggregate] : 0;
            // compare between old value and new value
            return value > datas[index][columnToAggregate] ? value : datas[index][columnToAggregate];
        };
        var getMin = function () {
            value = lookUpObj.get(objKey);
            // get old value
            value = value ? value["min(" + columnToAggregate + ")"] : Infinity;
            datas[index][columnToAggregate] = datas[index][columnToAggregate] ?
                datas[index][columnToAggregate] : Infinity;
            // compare between old value and new value
            return value < datas[index][columnToAggregate] ? value : datas[index][columnToAggregate];
        };
        var getSum = function () {
            value = lookUpObj.get(objKey);
            // get old value
            value = value ? value["sum(" + columnToAggregate + ")"] : 0;
            // add with old value if data exist
            value += datas[index][columnToAggregate] ? datas[index][columnToAggregate] : 0;
            return value;
        };
        var getAvg = function () {
            value = lookUpObj.get(objKey);
            // get old sum value
            var sumOfColumn = value ? value["sum(" + columnToAggregate + ")"] : 0;
            // add with old value if data exist
            sumOfColumn += datas[index][columnToAggregate] ? datas[index][columnToAggregate] : 0;
            datas[index]["sum(" + columnToAggregate + ")"] = sumOfColumn;
            // get old count value
            value = value ? value["count(" + columnToAggregate + ")"] : 0;
            // add with old value if data exist
            value += datas[index][columnToAggregate] ? 1 : 0;
            datas[index]["count(" + columnToAggregate + ")"] = value;
        };
        for (var prop in aggregateQry) {
            var aggregateColumn = aggregateQry[prop];
            var aggregateValType = getDataType(aggregateColumn);
            var aggregateCalculator = void 0;
            switch (prop) {
                case QUERY_OPTION.Count:
                    aggregateCalculator = getCount;
                    break;
                case QUERY_OPTION.Max:
                    aggregateCalculator = getMax;
                    break;
                case QUERY_OPTION.Min:
                    aggregateCalculator = getMin;
                    break;
                case QUERY_OPTION.Sum:
                    aggregateCalculator = getSum;
                    break;
                case QUERY_OPTION.Avg:
                    aggregateCalculator = getAvg;
                    break;
                case QUERY_OPTION.List:
                    aggregateCalculator = getList;
                    break;
            }
            switch (aggregateValType) {
                case DATA_TYPE.String:
                    columnToAggregate = aggregateColumn;
                    datas[index]["".concat(prop, "(").concat(columnToAggregate, ")")] = aggregateCalculator();
                    break;
                case DATA_TYPE.Array:
                    for (var item in aggregateColumn) {
                        columnToAggregate = aggregateColumn[item];
                        datas[index]["".concat(prop, "(").concat(columnToAggregate, ")")] = aggregateCalculator();
                    }
            }
        }
    };
    if (getDataType(grpQry) === DATA_TYPE.String) {
        for (index in datas) {
            objKey = datas[index][grpQry];
            calculateAggregate();
            lookUpObj.set(objKey, datas[index]);
        }
    }
    else {
        for (index in datas) {
            objKey = "";
            for (var column in grpQry) {
                objKey += datas[index][grpQry[column]];
            }
            calculateAggregate();
            lookUpObj.set(objKey, datas[index]);
        }
    }
    datas = Array.from(lookUpObj.values());
    // Checking for avg and if exist then fill the datas;
    var avgQuery = aggregateQry.avg;
    if (avgQuery) {
        if (getDataType(avgQuery) === DATA_TYPE.String) {
            for (index in datas) {
                var sumForAvg = datas[index]["sum(" + avgQuery + ")"], countForAvg = datas[index]["count(" + avgQuery + ")"];
                datas[index]["avg(" + avgQuery + ")"] = sumForAvg / countForAvg;
                if (aggregateQry.count !== avgQuery) {
                    delete datas[index]["count(" + avgQuery + ")"];
                }
                if (aggregateQry.sum !== avgQuery) {
                    delete datas[index]["sum(" + avgQuery + ")"];
                }
            }
        }
        else {
            var isCountTypeString = getDataType(aggregateQry.count) === DATA_TYPE.String;
            var isSumTypeString = getDataType(aggregateQry.sum) === DATA_TYPE.String;
            for (index in datas) {
                for (var column in avgQuery) {
                    var avgColumn = avgQuery[column], sum = datas[index]["sum(" + avgColumn + ")"], count = datas[index]["count(" + avgColumn + ")"];
                    datas[index]["avg(" + avgColumn + ")"] = sum / count;
                    if (isCountTypeString) {
                        if (aggregateQry.count !== avgColumn) {
                            delete datas[index]["count(" + avgColumn + ")"];
                        }
                        else if (aggregateQry.count.indexOf(avgColumn) === -1) {
                            delete datas[index]["count(" + avgColumn + ")"];
                        }
                    }
                    if (isSumTypeString) {
                        if (aggregateQry.sum !== avgColumn) {
                            delete datas[index]["sum(" + avgColumn + ")"];
                        }
                        else if (aggregateQry.sum.indexOf(avgColumn) === -1) {
                            delete datas[index]["sum(" + avgColumn + ")"];
                        }
                    }
                }
            }
        }
    }
    this.results = datas;
};

;// CONCATENATED MODULE: ./src/worker/utils/get_regex_from_like.ts

var getRegexFromLikeExpression = function (likeExpression) {
    var filterValues = likeExpression.split('%');
    var filterValue;
    var occurence;
    if (filterValues[1]) {
        filterValue = filterValues[1];
        occurence = filterValues.length > 2 ? OCCURENCE.Any : OCCURENCE.Last;
    }
    else {
        filterValue = filterValues[0];
        occurence = OCCURENCE.First;
    }
    switch (occurence) {
        case OCCURENCE.First:
            return new RegExp("^".concat(filterValue), 'i');
        case OCCURENCE.Last:
            return new RegExp("".concat(filterValue, "$"), 'i');
        default:
            return new RegExp("".concat(filterValue), 'i');
    }
};

;// CONCATENATED MODULE: ./src/worker/utils/clone.ts

var clone_isObject = function (value) {
    return getDataType(value) === 'object' && !(value instanceof RegExp);
};
var clone = function (obj) {
    if (clone_isObject(obj)) {
        var copy = {};
        for (var i in obj) {
            copy[i] = obj[i] != null && clone_isObject(obj[i]) ? clone(obj[i]) : obj[i];
        }
        return copy;
    }
    return obj;
};

;// CONCATENATED MODULE: ./src/worker/utils/compare.ts


var compare = function (value, compareValue, symbol) {
    var type1 = getDataType(value);
    var type2 = getDataType(compareValue);
    if (type1 !== type2)
        return false;
    if (type1 === DATA_TYPE.DateTime) {
        value = value.getTime();
        compareValue = compareValue.getTime();
    }
    switch (symbol) {
        // greater than
        case QUERY_OPTION.GreaterThan:
            return value > compareValue;
        // less than
        case QUERY_OPTION.LessThan:
            return value < compareValue;
        // less than equal
        case QUERY_OPTION.LessThanEqualTo:
            return value <= compareValue;
        // greather than equal
        case QUERY_OPTION.GreaterThanEqualTo:
            return value >= compareValue;
        // Not equal to
        case QUERY_OPTION.NotEqualTo:
            return value !== compareValue;
        default:
            return value === compareValue;
    }
};

;// CONCATENATED MODULE: ./src/worker/executors/where_checker.ts


/**
 * For matching the different column value existance for where option
 *
 * @export
 * @class WhereChecker
 */
var WhereChecker = /** @class */ (function () {
    function WhereChecker(where, checkFlag) {
        this.where = clone(where);
        this.checkFlag = checkFlag;
    }
    WhereChecker.prototype.remove = function (props) {
        var last = props.pop();
        var value = props.reduce(function (prev, curr) { return prev && prev[curr]; }, this.where);
        delete value[last];
    };
    WhereChecker.prototype.check = function (rowValue) {
        var status = true;
        if (!this.checkFlag)
            return status;
        for (var columnName in this.where) {
            if (!status) {
                return status;
            }
            var whereColumnValue = this.where[columnName];
            var columnValue = rowValue[columnName];
            if (getDataType(whereColumnValue) === "object") {
                for (var key in whereColumnValue) {
                    if (!status) {
                        return status;
                    }
                    switch (key) {
                        case QUERY_OPTION.In:
                            status = this.checkIn(columnName, columnValue);
                            break;
                        case QUERY_OPTION.Like:
                            status = this.checkLike_(columnName, columnValue);
                            break;
                        case QUERY_OPTION.Regex:
                            status = this.checkRegex(columnName, columnValue);
                            break;
                        case QUERY_OPTION.Between:
                        case QUERY_OPTION.GreaterThan:
                        case QUERY_OPTION.LessThan:
                        case QUERY_OPTION.GreaterThanEqualTo:
                        case QUERY_OPTION.LessThanEqualTo:
                        case QUERY_OPTION.NotEqualTo:
                            status = this.checkComparisionOp_(columnName, columnValue, key);
                            break;
                        default:
                            status = false;
                    }
                }
            }
            else {
                status = compare(whereColumnValue, columnValue);
            }
        }
        return status;
    };
    WhereChecker.prototype.checkIn = function (column, value) {
        return this.where[column][QUERY_OPTION.In].find(function (q) { return compare(q, value); }) != null;
    };
    WhereChecker.prototype.checkLike_ = function (column, value) {
        return getRegexFromLikeExpression(this.where[column][QUERY_OPTION.Like]).test(value);
    };
    WhereChecker.prototype.checkRegex = function (column, value) {
        return this.where[column][QUERY_OPTION.Regex].test(value);
    };
    WhereChecker.prototype.checkComparisionOp_ = function (column, value, symbol) {
        var compareValue = this.where[column][symbol];
        if (symbol != QUERY_OPTION.Between) {
            return compare(value, compareValue, symbol);
        }
        return compare(value, compareValue.low, '>=') &&
            compare(value, compareValue.high, '<=');
    };
    return WhereChecker;
}());


;// CONCATENATED MODULE: ./src/worker/executors/base_fetch.ts
var base_fetch_extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var BaseFetch = /** @class */ (function (_super) {
    base_fetch_extends(BaseFetch, _super);
    function BaseFetch() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.limitAtEnd = false;
        _this.skipAtEnd = false;
        return _this;
    }
    BaseFetch.prototype.goToWhereLogic = function () {
        var _this = this;
        var query = this.query;
        var whereQuery = query.where;
        var firstColumn = (function () {
            for (var key in whereQuery) {
                if (_this.objectStore.indexNames.contains(key)) {
                    return key;
                }
            }
        })();
        if (firstColumn == null) {
            firstColumn = getObjectFirstKey(whereQuery);
            if (!query.store) {
                return promiseReject(new LogHelper(ERROR_TYPE.NoIndexFound, { column: firstColumn }));
            }
        }
        var value = whereQuery[firstColumn];
        if (getDataType(value) === 'object') {
            var checkFlag = getLength(value) > 1 ||
                getLength(whereQuery) > 1;
            this.whereChecker = new WhereChecker(whereQuery, checkFlag);
            var key = getObjectFirstKey(value);
            this.whereChecker.remove([firstColumn, key]);
            switch (key) {
                case QUERY_OPTION.Like: {
                    var regexVal = getRegexFromLikeExpression(value[QUERY_OPTION.Like]);
                    return this.executeRegexLogic(firstColumn, regexVal);
                }
                case QUERY_OPTION.Regex:
                    return this.executeRegexLogic(firstColumn, value[QUERY_OPTION.Regex]);
                case QUERY_OPTION.In:
                    return this.executeInLogic(firstColumn, value[QUERY_OPTION.In]);
                case QUERY_OPTION.Between:
                case QUERY_OPTION.GreaterThan:
                case QUERY_OPTION.LessThan:
                case QUERY_OPTION.GreaterThanEqualTo:
                case QUERY_OPTION.LessThanEqualTo:
                    return this.executeWhereLogic(firstColumn, value, key, "next");
                case QUERY_OPTION.Aggregate: break;
                default:
                    return this.executeWhereLogic(firstColumn, value, null, "next");
            }
        }
        else {
            var checkFlag = getLength(whereQuery) > 1;
            this.whereChecker = new WhereChecker(whereQuery, checkFlag);
            this.whereChecker.remove([firstColumn]);
            return this.executeWhereLogic(firstColumn, value, null, "next");
        }
    };
    return BaseFetch;
}(Base));


;// CONCATENATED MODULE: ./src/worker/executors/select/regex.ts


var executeRegexLogic = function (column, exp) {
    var _this = this;
    var skip = this.skipRecord;
    var skipOrPush = function (val) {
        if (skip === 0) {
            _this['pushResult'](val);
        }
        else {
            --skip;
        }
    };
    this.shouldAddValue = function (cursor) {
        return exp.test(cursor.key) &&
            _this.whereChecker.check(cursor.value);
    };
    var cursorRequest = this.objectStore.index(column).openCursor();
    var onSuccess = getCursorOnSuccess.call(this, executeSimpleForWhere_, executeLimitForWhere_, regex_executeSkipForWhere_, regex_executeSkipAndLimitForWhere_);
    return promise(function (res, rej) {
        cursorRequest.onerror = rej;
        cursorRequest.onsuccess = onSuccess.call(_this, res, skipOrPush);
    });
};
var regex_executeSkipAndLimitForWhere_ = function (onFinish, skipOrPush) {
    var _this = this;
    return function (e) {
        var cursor = e.target.result;
        if (_this.results.length !== _this.limitRecord && cursor) {
            if (_this.shouldAddValue(cursor)) {
                skipOrPush(cursor.value);
            }
            cursor.continue();
        }
        else {
            onFinish();
        }
    };
};
var regex_executeSkipForWhere_ = function (onFinish, skipOrPush) {
    var _this = this;
    return function (e) {
        var cursor = e.target.result;
        if (cursor) {
            if (_this.shouldAddValue(cursor)) {
                skipOrPush((cursor.value));
            }
            cursor.continue();
        }
        else {
            onFinish();
        }
    };
};

;// CONCATENATED MODULE: ./src/worker/executors/select/in.ts



var executeInLogic = function (column, values) {
    var _this = this;
    var skip = this.skipRecord;
    var skipOrPush = function (val) {
        if (skip === 0) {
            _this['pushResult'](val);
        }
        else {
            --skip;
        }
    };
    var onSuccess = getCursorOnSuccess.call(this, executeSimpleForWhere_, executeLimitForWhere_, regex_executeSkipForWhere_, regex_executeSkipAndLimitForWhere_);
    var runInLogic = function (value) {
        return promise(function (res, rej) {
            var cursorRequest = _this.objectStore.index(column).openCursor(_this.util.keyRange(value));
            cursorRequest.onsuccess = onSuccess.call(_this, res, skipOrPush);
            cursorRequest.onerror = rej;
        });
    };
    return promiseAll(values.map(runInLogic));
};

;// CONCATENATED MODULE: ./src/worker/executors/select/join.ts
var __assign = ( false) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};




var executeJoinQuery = function () {
    return new Join(this).execute();
};
var Join = /** @class */ (function () {
    function Join(select) {
        this.joinQueryStack_ = [];
        this.currentQueryStackIndex_ = 0;
        this.tablesFetched = [];
        this.results = [];
        this.select = select;
    }
    Object.defineProperty(Join.prototype, "query", {
        get: function () {
            return this.select.query;
        },
        enumerable: false,
        configurable: true
    });
    Join.prototype.getTable = function (name) {
        return this.select.table(name);
    };
    Join.prototype.executeSelect = function (query) {
        // this.select.util.emptyTx();
        return new Select(query, this.select.util).
            execute();
    };
    Join.prototype.execute = function () {
        var _this = this;
        var query = this.query;
        this.joinQueryStack_ = getDataType(query.join) === DATA_TYPE.Object ?
            [query.join] : query.join;
        // get the data for first table
        var tableName = query.from;
        var tablesToFetch = [];
        if (tableName) {
            tablesToFetch.push(tableName);
        }
        var joinQueryStack = this.joinQueryStack_;
        for (var i = 0, length_1 = joinQueryStack.length; i < length_1; i++) {
            var item = joinQueryStack[i];
            var jointblInfo = this.getJoinTableInfo_(item.on);
            // table 1 is fetched & table2 needs to be fetched for join
            if (item.with === jointblInfo.table1.table) {
                jointblInfo = {
                    table1: jointblInfo.table2,
                    table2: jointblInfo.table1
                };
            }
            var err = this.checkJoinQuery_(jointblInfo, item);
            if (err) {
                return promiseReject(err);
            }
            joinQueryStack[i].joinTableInfo = jointblInfo;
            if (item.with) {
                tablesToFetch.push(item.with);
            }
        }
        if (!this.select.isTxQuery && tablesToFetch.length > 0) {
            this.select.util.createTransaction(tablesToFetch);
        }
        return this.executeSelect({
            from: tableName,
            where: query.where,
            case: query.case,
            flatten: query.flatten,
            store: query.store,
            meta: query.meta
        }).then(function (results) {
            _this.results = results.map(function (item) {
                var _a;
                return _a = {},
                    _a[_this.currentQueryStackIndex_] = item,
                    _a;
            });
            _this.tablesFetched.push(joinQueryStack[0].joinTableInfo.table1.table);
            return _this.startExecutingJoinLogic_();
        });
    };
    Join.prototype.onJoinQueryFinished_ = function () {
        if (this.results.length === 0)
            return;
        var selectApi = this.select;
        try {
            var results_1 = [];
            var tables = getKeys(this.results[0]);
            var tablesLength_1 = tables.length;
            this.results.forEach(function (result) {
                var data = result["0"]; // first table data
                for (var i = 1; i < tablesLength_1; i++) {
                    data = __assign(__assign({}, data), result[i]);
                }
                results_1.push(data);
            });
            selectApi['results'] = results_1;
            selectApi.setLimitAndSkipEvaluationAtEnd_();
            selectApi.query.flatten = null;
            if (true) {
                try {
                    selectApi.processOrderBy();
                }
                catch (ex) {
                    return promiseReject(new LogHelper(ERROR_TYPE.InvalidOrderQuery, ex.message));
                }
            }
            else {}
        }
        catch (ex) {
            return promiseReject(new LogHelper(ERROR_TYPE.InvalidJoinQuery, ex.message));
        }
    };
    Join.prototype.startExecutingJoinLogic_ = function () {
        var _this = this;
        var joinQuery = this.joinQueryStack_[this.currentQueryStackIndex_];
        if (joinQuery) {
            try {
                var jointblInfo_1 = joinQuery.joinTableInfo;
                return this.executeSelect({
                    from: joinQuery.with,
                    where: joinQuery.where,
                    case: joinQuery.case,
                    flatten: joinQuery.flatten,
                    store: joinQuery.store,
                    meta: joinQuery.meta
                }).then(function (results) {
                    _this.jointables(joinQuery, jointblInfo_1, results);
                    _this.tablesFetched.push(jointblInfo_1.table2.table);
                    ++_this.currentQueryStackIndex_;
                    return _this.startExecutingJoinLogic_();
                });
            }
            catch (ex) {
                return promiseReject(new LogHelper(ERROR_TYPE.InvalidJoinQuery, ex.message));
            }
        }
        else {
            return this.onJoinQueryFinished_();
        }
    };
    Join.prototype.jointables = function (joinQuery, jointblInfo, secondtableData) {
        var _this = this;
        var joinType = joinQuery.type;
        var output = [];
        var column1 = jointblInfo.table1.column;
        var column2 = jointblInfo.table2.column;
        var table1Index = this.tablesFetched.indexOf(jointblInfo.table1.table);
        var table2Index = this.currentQueryStackIndex_ + 1;
        var asQuery = joinQuery.as;
        var mapWithAlias = asQuery ? function (value) {
            for (var key in asQuery) {
                var asValue = asQuery[key];
                if (value[asValue] === undefined) {
                    value[asValue] = value[key];
                    delete value[key];
                }
            }
            return value;
        } : function (val) { return val; };
        var performInnerJoin = function () {
            var index = 0;
            _this.results.forEach(function (valueFromFirstTable) {
                secondtableData.forEach(function (valueFromSecondTable) {
                    if (valueFromFirstTable[table1Index][column1] === valueFromSecondTable[column2]) {
                        output[index] = __assign({}, valueFromFirstTable);
                        output[index++][table2Index] = mapWithAlias(__assign({}, valueFromSecondTable));
                    }
                });
            });
        };
        var performleftJoin = function () {
            var index = 0;
            var valueMatchedFromSecondTable;
            var callBack;
            var columnDefaultValue = {};
            var nullValue = null;
            if (joinQuery.store) {
                getKeys(joinQuery.store).forEach(function (columnName) {
                    columnDefaultValue[columnName] = nullValue;
                });
            }
            else {
                _this.getTable(jointblInfo.table2.table).columns.forEach(function (col) {
                    columnDefaultValue[col.name] = nullValue;
                });
            }
            if (table2Index === 1) {
                callBack = function (valueFromSecondTable, valueFromFirstTable) {
                    if (valueFromFirstTable[table1Index][column1] === valueFromSecondTable[column2]) {
                        valueMatchedFromSecondTable.push(valueFromSecondTable);
                    }
                };
            }
            else {
                callBack = function (valueFromSecondTable, valueFromFirstTable) {
                    var value = valueFromFirstTable[table1Index];
                    if (value != null && value[column1] === valueFromSecondTable[column2]) {
                        valueMatchedFromSecondTable.push(valueFromSecondTable);
                    }
                };
            }
            var whereQry = Object.assign(joinQuery.where || {}, joinQuery['whereJoin'] || {});
            var whereCheker = new WhereChecker(whereQry, getLength(whereQry) > 0);
            _this.results.forEach(function (valueFromFirstTable) {
                valueMatchedFromSecondTable = [];
                // perform left join
                secondtableData.forEach(function (val) {
                    callBack(val, valueFromFirstTable);
                });
                if (valueMatchedFromSecondTable.length === 0) {
                    valueMatchedFromSecondTable = [columnDefaultValue];
                }
                valueMatchedFromSecondTable.forEach(function (value) {
                    value = mapWithAlias(value);
                    if (!whereCheker.check(value))
                        return;
                    output[index] = __assign({}, valueFromFirstTable);
                    output[index++][table2Index] = value;
                });
            });
        };
        switch (joinType) {
            case "left":
                performleftJoin();
                break;
            default:
                performInnerJoin();
        }
        this.results = output;
    };
    Join.prototype.getJoinTableInfo_ = function (joinOn) {
        joinOn = removeSpace(joinOn);
        var splittedjoinOn = joinOn.split("=");
        var splittedjoinOnbydotFirst = splittedjoinOn[0].split(".");
        var splittedjoinOnbydotSecond = splittedjoinOn[1].split(".");
        var info = {
            table1: {
                table: splittedjoinOnbydotFirst[0],
                column: splittedjoinOnbydotFirst[1]
            },
            table2: {
                table: splittedjoinOnbydotSecond[0],
                column: splittedjoinOnbydotSecond[1]
            }
        };
        return info;
    };
    Join.prototype.checkJoinQuery_ = function (jointblInfo, qry) {
        if (qry.store)
            return null;
        var table1 = jointblInfo.table1;
        var table2 = jointblInfo.table2;
        var tableSchemaOf1stTable = this.getTable(table1.table);
        var tableSchemaOf2ndTable = this.getTable(table2.table);
        var err;
        // check on info & with info 
        if (qry.with !== table2.table) {
            err = new LogHelper(ERROR_TYPE.InvalidJoinQuery, "on value should contains value of with");
        }
        // check for column existance
        if (tableSchemaOf1stTable.columns.find(function (q) { return q.name === table1.column; }) == null) {
            err = new LogHelper(ERROR_TYPE.InvalidJoinQuery, "column ".concat(table1.column, " does not exist in table ").concat(table1.table));
        }
        else if (tableSchemaOf2ndTable.columns.find(function (q) { return q.name === table2.column; }) == null) {
            err = new LogHelper(ERROR_TYPE.InvalidJoinQuery, "column ".concat(table2.column, " does not exist in table ").concat(table2.table));
        }
        // check for column match in both table
        if (qry.as == null) {
            qry.as = {};
        }
        tableSchemaOf1stTable.columns.every(function (column) {
            var columnFound = tableSchemaOf2ndTable.columns.find(function (q) { return q.name === column.name && q.name !== table1.column; });
            if (columnFound != null && qry.as[columnFound.name] == null) {
                err = new LogHelper(ERROR_TYPE.InvalidJoinQuery, "column ".concat(column.name, " exist in both table ").concat(table1.table, " & ").concat(table2.table));
                return false;
            }
            return true;
        });
        var whereQry = qry.where;
        if (whereQry) {
            var whereJoin = {};
            var _loop_1 = function (key) {
                // const whereQueryVal = whereQry[key];
                var columnFound = tableSchemaOf2ndTable.columns.find(function (q) { return q.name === key; });
                if (!columnFound) {
                    whereJoin[key] = whereQry[key];
                    delete whereQry[key];
                }
            };
            for (var key in whereQry) {
                _loop_1(key);
            }
            qry['whereJoin'] = whereJoin;
            if (getLength(whereQry) === 0) {
                qry.where = null;
            }
        }
        return err;
    };
    return Join;
}());

;// CONCATENATED MODULE: ./src/worker/memory_store/index.ts


var MemoryObjectStore = /** @class */ (function () {
    function MemoryObjectStore(data) {
        this.data = data;
    }
    Object.defineProperty(MemoryObjectStore.prototype, "indexNames", {
        get: function () {
            var keys = getKeys(this.data[0]);
            return {
                contains: function (columnName) {
                    return keys.indexOf(columnName) >= 0;
                }
            };
        },
        enumerable: false,
        configurable: true
    });
    MemoryObjectStore.prototype.index = function (column) {
        var _this = this;
        return {
            openCursor: function (keyRange) {
                var cursorRequest = {};
                var index = 0;
                var cursor = {
                    continue: function () {
                        ++index;
                        execute();
                    },
                };
                var callOnSuccess = function (result) {
                    cursorRequest.onsuccess({
                        target: {
                            result: result
                        }
                    });
                };
                var execute = function () {
                    var value = _this.data[index];
                    if (value) {
                        var columnValue = value[column];
                        if (columnValue && (keyRange == null || keyRange.includes(columnValue))) {
                            cursor.key = columnValue;
                            cursor.value = value;
                            callOnSuccess(cursor);
                        }
                        else {
                            cursor.continue();
                        }
                    }
                    else {
                        callOnSuccess(null);
                    }
                };
                promiseResolve().then(execute);
                return cursorRequest;
            }
        };
    };
    return MemoryObjectStore;
}());


;// CONCATENATED MODULE: ./src/worker/executors/select/index.ts
var select_extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var select_assign = ( false) || function () {
    select_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return select_assign.apply(this, arguments);
};
var __spreadArray = ( false) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};














var Select = /** @class */ (function (_super) {
    select_extends(Select, _super);
    function Select(query, util) {
        var _this = _super.call(this) || this;
        _this.sorted = false;
        _this.isSubQuery = false;
        _this.thenEvaluator = new ThenEvaluator();
        _this.returnResult_ = function () {
            if (_this.results.length > 0) {
                var query = _this.query;
                if (query.flatten) {
                    var flattendData_1 = [];
                    var indexToDelete_1 = new Map();
                    query.flatten.forEach(function (column) {
                        _this.results.forEach(function (data, i) {
                            data[column].forEach(function (item) {
                                var _a;
                                flattendData_1.push(select_assign(select_assign({}, data), (_a = {}, _a[column] = item, _a)));
                            });
                            indexToDelete_1.set(i, true);
                        });
                    });
                    var itemsDeleted_1 = 0;
                    indexToDelete_1.forEach(function (_, key) {
                        _this.results.splice(key - itemsDeleted_1, 1);
                        ++itemsDeleted_1;
                    });
                    _this.results = _this.results.concat(flattendData_1);
                }
                _this.processGroupDistinctAggr();
                _this.processOrderBy();
                if (_this.skipAtEnd) {
                    _this.results.splice(0, query.skip);
                }
                if (_this.limitAtEnd) {
                    _this.results = _this.results.slice(0, query.limit);
                }
            }
            return _this.results;
        };
        _this.query = query;
        _this.util = util;
        _this.tableName = query.from;
        _this.setPushResult();
        if (isArray(query.where)) {
            _this.isArrayQry = true;
            _this.setLimitAndSkipEvaluationAtEnd_();
        }
        else {
            _this.skipRecord = query.skip;
            _this.limitRecord = query.limit;
        }
        var orderQuery = query.order;
        if (orderQuery) {
            if (isArray(orderQuery) || orderQuery.case || isObject(orderQuery.by)) {
                (orderQuery.idbSorting) = false;
            }
            _this.setLimitAndSkipEvaluationAtEnd_();
        }
        else if (query.groupBy) {
            _this.setLimitAndSkipEvaluationAtEnd_();
        }
        return _this;
    }
    Select.prototype.execute = function (beforeExecute) {
        var _this = this;
        var pResult;
        if (!beforeExecute) {
            beforeExecute = function () { return promiseResolve(null); };
        }
        var query = this.query;
        try {
            var err = new QueryHelper(this.db).validate(API.Select, query);
            if (err)
                return promiseReject(err);
            return beforeExecute().then(function (_) {
                _this.initTransaction_();
                if (query.join == null) {
                    if (query.where != null) {
                        if (isArray(query.where)) {
                            pResult = _this.processWhereArrayQry();
                        }
                        else {
                            pResult = _this.processWhere_();
                        }
                    }
                    else {
                        pResult = _this.executeWhereUndefinedLogic();
                    }
                }
                else {
                    pResult = _this.executeJoinQuery();
                }
                return pResult.then(_this.returnResult_.bind(_this));
            });
        }
        catch (ex) {
            return this.onException(ex);
        }
    };
    Select.prototype.processWhereArrayQry = function () {
        var _this = this;
        this.isArrayQry = true;
        var whereQuery = this.query.where;
        var pKey = this.primaryKey();
        var isFirstWhere = true, output = [], operation;
        var isItemExist = function (keyValue) {
            return output.findIndex(function (item) { return item[pKey] === keyValue; }) >= 0;
        };
        var onSuccess = function () {
            if (operation === QUERY_OPTION.And) {
                var doAnd = function () {
                    var andResults = [];
                    _this.results.forEach(function (item) {
                        if (isItemExist(item[pKey])) {
                            andResults.push(item);
                        }
                    });
                    output = andResults;
                    andResults = null;
                };
                if (isFirstWhere === true) {
                    output = _this.results;
                }
                else if (output.length > 0) {
                    doAnd();
                }
            }
            else {
                if (output.length > 0) {
                    _this.results = __spreadArray(__spreadArray([], output, true), _this.results, true);
                    _this.removeDuplicates();
                    output = _this.results;
                }
                else {
                    output = _this.results;
                }
            }
            isFirstWhere = false;
            if (whereQuery.length > 0) {
                _this.results = [];
                return processFirstQry();
            }
            else {
                _this.results = output;
            }
        };
        var processFirstQry = function () {
            var whereQueryToProcess = whereQuery.shift();
            if (whereQueryToProcess[QUERY_OPTION.Or]) {
                if (getLength(whereQueryToProcess) === 1) {
                    operation = QUERY_OPTION.Or;
                    whereQueryToProcess = whereQueryToProcess[QUERY_OPTION.Or];
                }
                else {
                    operation = QUERY_OPTION.And;
                }
            }
            else {
                operation = QUERY_OPTION.And;
            }
            _this.query.where = whereQueryToProcess;
            return _this.processWhere_().then(onSuccess);
        };
        return processFirstQry();
    };
    Select.prototype.initTransaction_ = function () {
        var store = this.query.store;
        if (store) {
            this.objectStore = new MemoryObjectStore(store);
            return;
        }
        if (!this.isTxQuery) {
            this.util.createTransactionIfNotExist([this.tableName], IDB_MODE.ReadOnly);
        }
        this.objectStore = this.util.objectStore(this.tableName);
    };
    Select.prototype.processWhere_ = function () {
        var _this = this;
        this.shouldAddValue = function (cursor) {
            return _this.whereChecker.check(cursor.value);
        };
        if (this.query.where.or) {
            this.processOrLogic_();
        }
        return this.goToWhereLogic().then(function () {
            return _this.onWhereEvaluated();
        });
    };
    Select.prototype.onWhereEvaluated = function () {
        if (this.isOr) {
            return this.orQuerySuccess_();
        }
    };
    Select.prototype.orQueryFinish_ = function () {
        this.isOr = false;
        this.results = this.orInfo.results;
        // free or info memory
        this.orInfo = null;
        this.removeDuplicates();
        // this.onQueryFinished();
    };
    Select.prototype.orQuerySuccess_ = function () {
        var query = this.query;
        if (this.results.length > 0) {
            this.orInfo.results = __spreadArray(__spreadArray([], this.orInfo.results, true), this.results, true);
        }
        this.results = [];
        var key = getObjectFirstKey(this.orInfo.orQuery);
        if (key != null) {
            var where = {};
            where[key] = this.orInfo.orQuery[key];
            delete this.orInfo.orQuery[key];
            query.where = where;
            return this.goToWhereLogic().then(this.onWhereEvaluated.bind(this));
        }
        return this.orQueryFinish_();
    };
    Select.prototype.processOrLogic_ = function () {
        this.isOr = true;
        var where = this.query.where;
        this.orInfo = {
            orQuery: where.or,
            results: []
        };
        this.setLimitAndSkipEvaluationAtEnd_();
        // free or memory
        delete where.or;
    };
    return Select;
}(BaseFetch));

Select.prototype.executeInLogic = executeInLogic;
Select.prototype.executeWhereUndefinedLogic = executeWhereUndefinedLogic;
Select.prototype.executeWhereLogic = executeWhereLogic;
Select.prototype.executeRegexLogic = executeRegexLogic;
Select.prototype.setLimitAndSkipEvaluationAtEnd_ = setLimitAndSkipEvaluationAtEnd;
Select.prototype.setPushResult = setPushResult;
Select.prototype.removeDuplicates = removeDuplicates;
Select.prototype.executeJoinQuery = executeJoinQuery;
Select.prototype.processGroupDistinctAggr = processGroupDistinctAggr;
Select.prototype.processOrderBy = processOrderBy;
Select.prototype.processAggregateQry = processAggregateQry;
Select.prototype.executeAggregateGroupBy = executeAggregateGroupBy;
Select.prototype.processGroupBy = processGroupBy;

;// CONCATENATED MODULE: ./src/worker/executors/count/not_where.ts

var not_where_executeWhereUndefinedLogic = function () {
    var _this = this;
    var countRequest;
    var objectStore = this.objectStore;
    var onSuccess = (function () {
        if (objectStore.count) {
            countRequest = objectStore.count();
            return function (onFinish) {
                return function () {
                    _this.resultCount = countRequest.result;
                    onFinish();
                };
            };
        }
        else {
            var cursor_1;
            countRequest = objectStore.openCursor();
            return function (onFinish) {
                return function (e) {
                    cursor_1 = e.target.result;
                    if (cursor_1) {
                        ++_this.resultCount;
                        cursor_1.continue();
                    }
                    else {
                        onFinish();
                    }
                };
            };
        }
    })();
    return promise(function (res, rej) {
        countRequest.onerror = rej;
        countRequest.onsuccess = onSuccess(res);
    });
};

;// CONCATENATED MODULE: ./src/worker/executors/count/where.ts


var onWhereCount = function (onFinish) {
    var _this = this;
    return function (e) {
        var cursor = e.target.result;
        if (cursor) {
            if (_this.shouldAddValue(cursor)) {
                ++_this.resultCount;
            }
            cursor.continue();
        }
        else {
            onFinish();
        }
    };
};
var where_executeWhereLogic = function (column, value, op) {
    var _this = this;
    value = op ? value[op] : value;
    var cursorRequest;
    var isWhereKeysLengthOne = getLength(this.query.where) === 1;
    var objectStore = this.objectStore;
    return promise(function (res, rej) {
        if (isWhereKeysLengthOne && objectStore.count) {
            cursorRequest = objectStore.index(column).count(_this.util.keyRange(value, op));
            cursorRequest.onsuccess = function () {
                _this.resultCount = cursorRequest.result;
                res();
            };
        }
        else {
            cursorRequest = objectStore.index(column).openCursor(_this.util.keyRange(value, op));
            cursorRequest.onsuccess = onWhereCount.call(_this, res);
        }
        cursorRequest.onerror = rej;
    });
};

;// CONCATENATED MODULE: ./src/worker/executors/count/regex.ts


var regex_executeRegexLogic = function (column, exp) {
    var _this = this;
    var cursorRequest = this.objectStore.index(column).openCursor();
    this.shouldAddValue = function (cursor) {
        return exp.test(cursor.key) &&
            _this.whereChecker.check(cursor.value);
    };
    return promise(function (res, rej) {
        cursorRequest.onerror = rej;
        cursorRequest.onsuccess = onWhereCount.call(_this, res);
    });
};

;// CONCATENATED MODULE: ./src/worker/executors/count/in.ts



var in_executeInLogic = function (column, values) {
    var _this = this;
    var objectStore = this.objectStore;
    var columnStore = objectStore.index(column);
    var isWhereKeysLengthOne = getLength(this.query.where) === 1;
    var runInLogic = function (value) {
        var keyRange = _this.util.keyRange(value);
        if (isWhereKeysLengthOne && objectStore.count) {
            return promise(function (res, rej) {
                var cursorRequest = columnStore.count(keyRange);
                cursorRequest.onsuccess = function (e) {
                    _this.resultCount += e.target.result;
                    res();
                };
                cursorRequest.onerror = rej;
            });
        }
        return promise(function (res, rej) {
            var cursorRequest = columnStore.openCursor(keyRange);
            cursorRequest.onsuccess = onWhereCount.call(_this, res);
            cursorRequest.onerror = rej;
        });
    };
    return promiseAll(values.map(function (val) {
        return runInLogic(val);
    }));
};

;// CONCATENATED MODULE: ./src/worker/executors/count/index.ts
var count_extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();









var Count = /** @class */ (function (_super) {
    count_extends(Count, _super);
    function Count(query, util) {
        var _this = _super.call(this) || this;
        _this.resultCount = 0;
        _this.query = query;
        _this.util = util;
        _this.tableName = query.from;
        return _this;
    }
    Count.prototype.execute = function (beforeExecute) {
        var _this = this;
        var queryHelper = new QueryHelper(this.db);
        var query = this.query;
        var err = queryHelper.validate(API.Count, query);
        if (err) {
            return promiseReject(err);
        }
        return beforeExecute().then(function (_) {
            var result;
            try {
                var getDataFromSelect = function () {
                    var selectInstance = new Select(query, _this.util);
                    selectInstance.isTxQuery = _this.isTxQuery;
                    return selectInstance.execute().then(function (results) {
                        _this.resultCount = results.length;
                    });
                };
                _this.initTransaction_();
                if (query.join == null) {
                    if (query.where != null) {
                        if (query.where.or || isArray(query.where)) {
                            result = getDataFromSelect();
                        }
                        else {
                            _this.shouldAddValue = function (cursor) {
                                return _this.whereChecker.check(cursor.value);
                            };
                            result = _this.goToWhereLogic();
                        }
                    }
                    else {
                        result = _this.executeWhereUndefinedLogic();
                    }
                }
                else {
                    result = getDataFromSelect();
                }
            }
            catch (ex) {
                _this.onException(ex);
            }
            return result.then(function (_) {
                return _this.resultCount;
            });
        });
    };
    Count.prototype.initTransaction_ = function () {
        var tableName = this.query.from;
        if (!this.isTxQuery) {
            this.util.createTransaction([tableName], IDB_MODE.ReadOnly);
        }
        this.objectStore = this.util.objectStore(tableName);
    };
    return Count;
}(BaseFetch));

Count.prototype.executeWhereUndefinedLogic = not_where_executeWhereUndefinedLogic;
Count.prototype.executeWhereLogic = where_executeWhereLogic;
Count.prototype.executeRegexLogic = regex_executeRegexLogic;
Count.prototype.executeInLogic = in_executeInLogic;

;// CONCATENATED MODULE: ./src/worker/utils/resolve.ts

var variableFromPath = function (path) {
    var properties = isArray(path) ? path : path.split(".");
    return properties.reduce(function (prev, curr) { return prev && prev[curr]; }, self);
};

;// CONCATENATED MODULE: ./src/worker/executors/update/update_value.ts


var updateValue = function (query, storedValue) {
    var setValue = query.set;
    var mapSet = query.mapSet;
    if (mapSet) {
        var result = mapSet(setValue, storedValue);
        if (result != null) {
            setValue = result;
        }
    }
    for (var key in setValue) {
        var columnSetValue = setValue[key];
        if (getDataType(columnSetValue) !== DATA_TYPE.Object) {
            storedValue[key] = columnSetValue;
        }
        else {
            for (var op in columnSetValue) {
                var value = columnSetValue[op];
                switch (op) {
                    case '+':
                        storedValue[key] += value;
                        break;
                    case '-':
                        storedValue[key] -= value;
                        break;
                    case '*':
                        storedValue[key] *= value;
                        break;
                    case '/':
                        storedValue[key] /= value;
                        break;
                    case '{push}':
                        storedValue[key].push(value);
                        break;
                    default: storedValue[key] = columnSetValue;
                }
                break;
            }
        }
    }
    return storedValue;
};

;// CONCATENATED MODULE: ./src/worker/executors/update/not_where.ts


var update_not_where_executeWhereUndefinedLogic = function () {
    var _this = this;
    var cursorRequest = this.objectStore.openCursor();
    return promise(function (res, rej) {
        cursorRequest.onsuccess = function (e) {
            var cursor = e.target.result;
            if (cursor) {
                try {
                    var cursorUpdateRequest = cursor.update(updateValue(_this.query, cursor.value));
                    cursorUpdateRequest.onsuccess = function () {
                        ++_this.rowAffected;
                        cursor.continue();
                    };
                    cursorUpdateRequest.onerror = rej;
                }
                catch (ex) {
                    rej(ex);
                }
            }
            else {
                res();
            }
        };
        cursorRequest.onerror = rej;
    });
};

;// CONCATENATED MODULE: ./src/worker/executors/update/in.ts


var update_in_executeInLogic = function (column, values) {
    var _this = this;
    var columnStore = this.objectStore.index(column);
    var query = this.query;
    var runInLogic = function (value) {
        return promise(function (res, rej) {
            var cursorRequest = columnStore.openCursor(_this.util.keyRange(value));
            cursorRequest.onsuccess = function (e) {
                var cursor = e.target.result;
                if (cursor) {
                    var value_1 = cursor.value;
                    if (_this.whereChecker.check(value_1)) {
                        try {
                            var cursorUpdateRequest = cursor.update(updateValue(query, value_1));
                            cursorUpdateRequest.onsuccess = function () {
                                ++_this.rowAffected;
                                cursor.continue();
                            };
                            cursorUpdateRequest.onerror = rej;
                        }
                        catch (ex) {
                            rej(ex);
                        }
                    }
                    else {
                        cursor.continue();
                    }
                }
                else {
                    res();
                }
            };
            cursorRequest.onerror = rej;
        });
    };
    return promiseAll(values.map(function (val) {
        return runInLogic(val);
    }));
};

;// CONCATENATED MODULE: ./src/worker/executors/update/regex.ts


var update_regex_executeRegexLogic = function (column, exp) {
    var _this = this;
    var cursor;
    var cursorOpenRequest = this.objectStore.index(column).openCursor();
    this.shouldAddValue = function (cursor) {
        return exp.test(cursor.key) &&
            _this.whereChecker.check(cursor.value);
    };
    return promise(function (res, rej) {
        cursorOpenRequest.onsuccess = function (e) {
            cursor = e.target.result;
            if (cursor) {
                if (_this.shouldAddValue(cursor)) {
                    try {
                        var cursorUpdateRequest = cursor.update(updateValue(_this.query, cursor.value));
                        cursorUpdateRequest.onsuccess = function () {
                            ++_this.rowAffected;
                            cursor.continue();
                        };
                        cursorUpdateRequest.onerror = rej;
                    }
                    catch (ex) {
                        rej(ex);
                    }
                }
                else {
                    cursor.continue();
                }
            }
            else {
                res();
            }
        };
        cursorOpenRequest.onerror = rej;
    });
};

;// CONCATENATED MODULE: ./src/worker/executors/update/where.ts


var update_where_executeWhereLogic = function (column, value, op) {
    var _this = this;
    var query = this.query;
    value = op ? value[op] : value;
    var cursorRequest = this.objectStore.index(column).openCursor(this.util.keyRange(value, op));
    return promise(function (res, rej) {
        cursorRequest.onsuccess = function (e) {
            var cursor = e.target.result;
            if (cursor) {
                if (_this.whereChecker.check(cursor.value)) {
                    try {
                        var cursorUpdateRequest = cursor.update(updateValue(query, cursor.value));
                        cursorUpdateRequest.onsuccess = function () {
                            ++_this.rowAffected;
                            cursor.continue();
                        };
                        cursorUpdateRequest.onerror = rej;
                    }
                    catch (ex) {
                        rej(ex);
                    }
                }
                else {
                    cursor.continue();
                }
            }
            else {
                res();
            }
        };
        cursorRequest.onerror = rej;
    });
};

;// CONCATENATED MODULE: ./src/worker/executors/update/index.ts
var update_extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();









var Update = /** @class */ (function (_super) {
    update_extends(Update, _super);
    function Update(query, util) {
        var _this = _super.call(this) || this;
        _this.query = query;
        _this.util = util;
        _this.tableName = query.in;
        var mapSet = query.mapSet;
        if (mapSet) {
            var method = getDataType(mapSet) === DATA_TYPE.String ?
                variableFromPath(mapSet) : mapSet;
            if (!method) {
                throw new LogHelper(ERROR_TYPE.MethodNotExist, mapSet);
            }
            query.mapSet = method;
        }
        return _this;
    }
    Update.prototype.execute = function (beforeExecute) {
        var _this = this;
        var query = this.query;
        try {
            var queryHelper = new QueryHelper(this.db);
            var err = queryHelper.validate(API.Update, query);
            if (err)
                return promiseReject(err);
            return beforeExecute().then(function (_) {
                _this.initTransaction();
                var pResult;
                if (query.where != null) {
                    if (query.where.or || isArray(query.where)) {
                        pResult = _this.executeComplexLogic_();
                    }
                    else {
                        pResult = _this.goToWhereLogic();
                    }
                }
                else {
                    pResult = _this.executeWhereUndefinedLogic();
                }
                return pResult.then(function () {
                    return _this.rowAffected;
                });
            });
        }
        catch (ex) {
            return this.onException(ex);
        }
    };
    Update.prototype.executeComplexLogic_ = function () {
        var _this = this;
        var query = this.query;
        var selectObject = new Select({
            from: query.in,
            where: query.where,
            ignoreCase: query.ignoreCase
        }, this.util);
        selectObject.isTxQuery = this.isTxQuery;
        return selectObject.execute().then(function (results) {
            var _a, _b;
            var key = _this.primaryKey(query.in);
            var inQuery = [];
            results.forEach(function (value) {
                inQuery.push(value[key]);
            });
            results = null;
            var whereQry = (_a = {}, _a[key] = (_b = {}, _b[QUERY_OPTION.In] = inQuery, _b), _a);
            _this.query.where = whereQry;
            _this.initTransaction();
            return _this.goToWhereLogic();
        });
    };
    Update.prototype.initTransaction = function () {
        var tableName = this.query.in;
        if (!this.isTxQuery) {
            this.util.createTransaction([tableName]);
        }
        this.objectStore = this.util.objectStore(tableName);
    };
    return Update;
}(BaseFetch));

Update.prototype.executeWhereUndefinedLogic = update_not_where_executeWhereUndefinedLogic;
Update.prototype.executeWhereLogic = update_where_executeWhereLogic;
Update.prototype.executeRegexLogic = update_regex_executeRegexLogic;
Update.prototype.executeInLogic = update_in_executeInLogic;

;// CONCATENATED MODULE: ./src/worker/intersect/index.ts
var intersect_extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var intersect_assign = ( false) || function () {
    intersect_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return intersect_assign.apply(this, arguments);
};


var Intersect = /** @class */ (function (_super) {
    intersect_extends(Intersect, _super);
    function Intersect(intersectQry, util) {
        var _this = _super.call(this) || this;
        _this.query = intersectQry;
        _this.util = util;
        return _this;
    }
    Intersect.prototype.execute = function () {
        var _this = this;
        var intersectQry = this.query;
        var index = 0;
        var hashMap = {};
        var hashMapTemp = {};
        var isQueryForSameTable = true;
        var queries = intersectQry.queries;
        var queryLength = queries.length;
        queries.every(function (qry, i) {
            if (i + 1 < queryLength && qry.from !== queries[i + 1].from) {
                isQueryForSameTable = false;
                return false;
            }
            return true;
        });
        var getHashKey;
        if (isQueryForSameTable) {
            var pKey_1 = this.primaryKey(queries[0].from);
            getHashKey = function (val) {
                return val[pKey_1];
            };
        }
        else {
            getHashKey = function (val) {
                var columnValKey = "";
                for (var key in val) {
                    columnValKey += val[key];
                }
                return columnValKey;
            };
        }
        var select;
        var fetchData = function () {
            if (index < queryLength) {
                select = new Select(queries[index], _this.util);
                return select.execute().then(function (selectResult) {
                    hashMap = {};
                    selectResult.forEach(function (val) {
                        var columnValKey = getHashKey(val);
                        if (index === 0) {
                            hashMapTemp[columnValKey] = val;
                        }
                        else if (hashMapTemp[columnValKey] != null) {
                            hashMap[columnValKey] = val;
                        }
                    });
                    if (index > 0) {
                        hashMapTemp = intersect_assign({}, hashMap);
                    }
                    ++index;
                    return fetchData();
                });
            }
            else {
                var results_1 = [];
                var resultPusher = void 0;
                var skip_1 = intersectQry.skip;
                var limit_1 = intersectQry.limit;
                var onFinished = function () {
                    select['results'] = results_1;
                    Object.assign(select.query, {
                        order: intersectQry.order,
                        join: {}
                    });
                    select.processOrderBy();
                    select.processGroupDistinctAggr();
                    return (select['results']);
                };
                var shouldStopLoop_1 = false;
                var key_1;
                var pushResult_1 = function () {
                    results_1.push(hashMap[key_1]);
                };
                var checkLimitAndPush_1 = function () {
                    if (results_1.length < limit_1) {
                        pushResult_1();
                    }
                    else {
                        shouldStopLoop_1 = true;
                    }
                };
                var skipChecker_1 = function (callBack) {
                    if (skip_1 === 0) {
                        callBack();
                    }
                    else {
                        --skip_1;
                    }
                };
                if (intersectQry.skip && intersectQry.limit) {
                    resultPusher = function () {
                        skipChecker_1(function () {
                            checkLimitAndPush_1();
                        });
                    };
                }
                else if (intersectQry.limit) {
                    resultPusher = checkLimitAndPush_1;
                }
                else if (intersectQry.skip) {
                    resultPusher = function () {
                        skipChecker_1(function () {
                            pushResult_1();
                        });
                    };
                }
                else {
                    resultPusher = function () {
                        pushResult_1();
                    };
                }
                if (limit_1) {
                    for (key_1 in hashMap) {
                        resultPusher(key_1);
                        if (shouldStopLoop_1) {
                            break;
                        }
                    }
                }
                else {
                    for (key_1 in hashMap) {
                        resultPusher(key_1);
                    }
                }
                return onFinished();
            }
        };
        return fetchData();
    };
    return Intersect;
}(Base));


;// CONCATENATED MODULE: ./src/worker/executors/drop_db.ts


var DropDb = /** @class */ (function () {
    function DropDb() {
    }
    DropDb.prototype.execute = function (dbName) {
        return promise(function (res, rej) {
            var dropDbRequest = indexedDB.deleteDatabase(dbName);
            dropDbRequest.onblocked = function () {
                var err = new LogHelper(ERROR_TYPE.DbBlocked);
                return rej(getError(err));
            };
            dropDbRequest.onerror = function (e) {
                return rej(getError(e));
            };
            dropDbRequest.onsuccess = function () {
                res();
            };
        });
    };
    return DropDb;
}());


;// CONCATENATED MODULE: ./src/worker/union/index.ts
var union_extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var Union = /** @class */ (function (_super) {
    union_extends(Union, _super);
    function Union(query, util) {
        var _this = _super.call(this) || this;
        _this.query = query;
        _this.util = util;
        return _this;
    }
    Union.prototype.execute = function () {
        var _this = this;
        var query = this.query;
        var index = 0;
        var hashMap = new Map();
        var isQueryForSameTable = true;
        var queryLength = query.length;
        query.every(function (qry, i) {
            if (i + 1 < queryLength && qry.from !== query[i + 1].from) {
                isQueryForSameTable = false;
                return false;
            }
            return true;
        });
        var getHashKey;
        if (isQueryForSameTable) {
            var pKey_1 = this.primaryKey(query[0].from);
            getHashKey = function (val) {
                return val[pKey_1];
            };
        }
        else {
            getHashKey = function (val) {
                var columnValKey = "";
                for (var key in val) {
                    columnValKey += val[key];
                }
                return columnValKey;
            };
        }
        var select;
        var fetchData = function () {
            if (index < query.length) {
                select = new Select(query[index++], _this.util);
                return select.execute().then(function (selectResult) {
                    selectResult.forEach(function (val) {
                        hashMap.set(getHashKey(val), val);
                    });
                    return fetchData();
                });
            }
            else {
                return Array.from(hashMap.values());
            }
        };
        return fetchData();
    };
    return Union;
}(Base));


;// CONCATENATED MODULE: ./src/worker/executors/remove/not_where.ts

var remove_not_where_executeWhereUndefinedLogic = function () {
    var _this = this;
    var cursor;
    var cursorRequest = this.objectStore.openCursor();
    return promise(function (res, rej) {
        cursorRequest.onsuccess = function (e) {
            cursor = e.target.result;
            if (cursor) {
                cursor.delete();
                ++_this.rowAffected;
                cursor.continue();
            }
            else {
                res();
            }
        };
        cursorRequest.onerror = rej;
    });
};

;// CONCATENATED MODULE: ./src/worker/executors/remove/where.ts

var onWhereRemove = function (onFinish) {
    var _this = this;
    return function (e) {
        var cursor = e.target.result;
        if (cursor) {
            if (_this.shouldAddValue(cursor.value)) {
                cursor.delete();
                ++_this.rowAffected;
            }
            cursor.continue();
        }
        else {
            onFinish();
        }
    };
};
var remove_where_executeWhereLogic = function (column, value, op) {
    var _this = this;
    value = op ? value[op] : value;
    var cursorRequest = this.objectStore.index(column).openCursor(this.util.keyRange(value, op));
    return promise(function (res, rej) {
        cursorRequest.onsuccess = onWhereRemove.call(_this, res);
        cursorRequest.onerror = rej;
    });
};

;// CONCATENATED MODULE: ./src/worker/executors/remove/in.ts


var remove_in_executeInLogic = function (column, values) {
    var _this = this;
    var columnIndex = this.objectStore.index(column);
    var runInLogic = function (value) {
        return promise(function (res, rej) {
            var cursorRequest = columnIndex.openCursor(_this.util.keyRange(value));
            cursorRequest.onsuccess = onWhereRemove.call(_this, res);
            cursorRequest.onerror = rej;
        });
    };
    return promiseAll(values.map(function (val) {
        return runInLogic(val);
    }));
};

;// CONCATENATED MODULE: ./src/worker/executors/remove/regex.ts

var remove_regex_executeRegexLogic = function (column, exp) {
    var _this = this;
    var cursor;
    var cursorRequest = this.objectStore.index(column).openCursor();
    this.shouldAddValue = function (cursor) {
        return exp.test(cursor.key) &&
            _this.whereChecker.check(cursor.value);
    };
    return promise(function (res, rej) {
        cursorRequest.onsuccess = function (e) {
            cursor = e.target.result;
            if (cursor) {
                if (_this.shouldAddValue(cursor)) {
                    cursor.delete();
                    ++_this.rowAffected;
                }
                cursor.continue();
            }
            else {
                res();
            }
        };
        cursorRequest.onerror = rej;
    });
};

;// CONCATENATED MODULE: ./src/worker/executors/remove/index.ts
var remove_extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();









var Remove = /** @class */ (function (_super) {
    remove_extends(Remove, _super);
    function Remove(query, util) {
        var _this = _super.call(this) || this;
        _this.query = query;
        _this.util = util;
        _this.tableName = query.from;
        return _this;
    }
    Remove.prototype.execute = function (beforeExecute) {
        var _this = this;
        var queryHelper = new QueryHelper(this.db);
        var query = this.query;
        var err = queryHelper.validate(API.Remove, query);
        if (err)
            return promiseReject(err);
        var pResult;
        return beforeExecute().then(function (_) {
            try {
                _this.initTransaction_();
                if (query.where != null) {
                    if (isArray(query.where)) {
                        pResult = _this.processWhereArrayQry();
                    }
                    else {
                        pResult = _this.processWhere_();
                    }
                }
                else {
                    pResult = _this.executeWhereUndefinedLogic();
                }
            }
            catch (ex) {
                return _this.onException(ex);
            }
            return pResult.then(function () {
                return _this.rowAffected;
            });
        });
    };
    Remove.prototype.processWhereArrayQry = function () {
        var _this = this;
        var selectObject = new Select(this.query, this.util);
        selectObject.isTxQuery = this.isTxQuery;
        return selectObject.execute().then(function (results) {
            var _a, _b;
            var keyList = [];
            var pkey = _this.primaryKey(_this.query.from);
            results.forEach(function (item) {
                keyList.push(item[pkey]);
            });
            results = null;
            var whereQry = (_a = {}, _a[pkey] = (_b = {}, _b[QUERY_OPTION.In] = keyList, _b), _a);
            _this.query[QUERY_OPTION.Where] = whereQry;
            return _this.processWhere_();
        });
    };
    Remove.prototype.processWhere_ = function () {
        var _this = this;
        this.shouldAddValue = function (value) {
            return _this.whereChecker.check(value);
        };
        if (this.query.where.or) {
            this.processOrLogic();
        }
        return this.goToWhereLogic().then(function () {
            return _this.onWhereEvaluated();
        });
    };
    Remove.prototype.initTransaction_ = function () {
        if (!this.isTxQuery) {
            this.util.createTransaction([this.query.from]);
        }
        this.objectStore = this.util.objectStore(this.query.from);
    };
    Remove.prototype.onWhereEvaluated = function () {
        if (this.isOr) {
            return this.orQuerySuccess_();
        }
    };
    Remove.prototype.orQuerySuccess_ = function () {
        var _this = this;
        var orQueryFromOrInfo = this._orInfo.OrQuery;
        var key = getObjectFirstKey(orQueryFromOrInfo);
        if (key != null) {
            var where = {};
            where[key] = orQueryFromOrInfo[key];
            delete orQueryFromOrInfo[key];
            this.query.where = where;
            return this.goToWhereLogic().then(function () {
                return _this.onWhereEvaluated();
            });
        }
        else {
            this.isOr = true;
        }
    };
    Remove.prototype.processOrLogic = function () {
        this.isOr = true;
        var where = this.query.where;
        this._orInfo = {
            OrQuery: where.or
        };
        // free or memory
        delete where.or;
    };
    return Remove;
}(BaseFetch));

Remove.prototype.executeInLogic = remove_in_executeInLogic;
Remove.prototype.executeWhereUndefinedLogic = remove_not_where_executeWhereUndefinedLogic;
Remove.prototype.executeWhereLogic = remove_where_executeWhereLogic;
Remove.prototype.executeRegexLogic = remove_regex_executeRegexLogic;

;// CONCATENATED MODULE: ./src/worker/executors/clear/index.ts
var clear_extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var Clear = /** @class */ (function (_super) {
    clear_extends(Clear, _super);
    function Clear(tableName, util) {
        var _this = _super.call(this) || this;
        _this.query = tableName;
        _this.util = util;
        _this.tableName = tableName;
        return _this;
    }
    Clear.prototype.execute = function (beforeExecute) {
        var _this = this;
        var tableName = this.query;
        if (!this.isTxQuery) {
            this.util.createTransaction([tableName, MetaHelper.tableName]);
        }
        return beforeExecute().then(function (_) {
            var clearRequest = _this.util.objectStore(tableName).clear();
            try {
                return promise(function (res, rej) {
                    clearRequest.onsuccess = function (e) {
                        var currentTable = _this.table(tableName);
                        for (var columnName in currentTable.autoIncColumnValue) {
                            currentTable.autoIncColumnValue[columnName] = 0;
                        }
                        MetaHelper.set(MetaHelper.dbSchema, _this.util.db, _this.util).then(res).catch(rej);
                    };
                    clearRequest.onerror = rej;
                });
            }
            catch (ex) {
                return _this.onException(ex);
            }
        });
    };
    return Clear;
}(Base));


;// CONCATENATED MODULE: ./src/worker/executors/transaction/index.ts
var transaction_extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();









var Transaction = /** @class */ (function (_super) {
    transaction_extends(Transaction, _super);
    function Transaction(qry, util) {
        var _this = _super.call(this) || this;
        _this.results = {};
        _this.reqQueue = [];
        _this.isQueryExecuting = false;
        _this.isTxStarted_ = false;
        _this.query = qry;
        _this.util = util;
        return _this;
    }
    Transaction.prototype.execute = function (cb) {
        var _this = this;
        this.beforeExecute = cb;
        var err = this.validate();
        if (err)
            return promiseReject(err);
        this.startExecution_();
        return promise(function (res, rej) {
            _this.onSuccess = res;
            _this.onError = rej;
        }).then(function (result) {
            _this.beforeExecute = null;
            _this.log("transaction finished");
            return result;
        });
    };
    Transaction.prototype.validate = function () {
        var query = this.query;
        var notExistingTable = this.notExistingTable_(query.tables);
        if (notExistingTable) {
            return new LogHelper(ERROR_TYPE.TableNotExist, { tableName: notExistingTable });
        }
        var methodName = query.method;
        var txLogic = variableFromPath(methodName);
        if (!txLogic) {
            return new LogHelper(ERROR_TYPE.MethodNotExist, methodName);
        }
    };
    Transaction.prototype.startExecution_ = function () {
        var _this = this;
        var query = this.query;
        var createPusher = function (api) {
            return function (qry) {
                return _this.pushReq_({
                    name: api,
                    query: qry
                });
            };
        };
        var setResult = function (key, value) {
            _this.results[key] = value;
        };
        var getResult = function (key) {
            return _this.results[key];
        };
        var abort = function (msg) {
            _this.abortTx_(msg);
        };
        var start = function () {
            _this.startTx_();
        };
        var methodName = query.method;
        var txLogic = variableFromPath(methodName);
        this.log("transaction query started");
        return txLogic.call(this, {
            data: query.data,
            insert: createPusher(API.Insert),
            select: createPusher(API.Select),
            update: createPusher(API.Update),
            remove: createPusher(API.Remove),
            count: createPusher(API.Count),
            setResult: setResult,
            getResult: getResult, abort: abort,
            start: start
        });
    };
    Transaction.prototype.log = function (message) {
        this.util.logger.log(message);
    };
    Transaction.prototype.startTx_ = function () {
        var _this = this;
        try {
            this.isTxStarted_ = true;
            var tableNames = this.query.tables;
            tableNames = tableNames.concat(MetaHelper.tableName);
            this.util.createTransaction(tableNames).then(function (_) {
                _this.onSuccess(_this.results);
            }).catch(function (err) {
                _this.onError(err);
            });
            return this.processExecutionOfQry_();
        }
        catch (ex) {
            this.onError(this.onException(ex));
        }
    };
    Transaction.prototype.onReqFinished_ = function (result) {
        var finisehdRequest = this.reqQueue.shift();
        this.log("finished request : ".concat(finisehdRequest.name, " "));
        if (finisehdRequest) {
            if (result.error) {
                this.abortTx_("automatic abort of transaction due to error occured");
                this.log("transaction aborted due to error occured");
                this.onError(result.error);
            }
            else {
                this.isQueryExecuting = false;
                if (finisehdRequest.onSuccess) {
                    finisehdRequest.onSuccess(result);
                }
                this.processExecutionOfQry_();
            }
        }
    };
    Transaction.prototype.abortTx_ = function (msg) {
        this.reqQueue = [];
        this.util.abortTransaction();
        this.log("transaction aborted. Msg : ".concat(msg));
    };
    Transaction.prototype.executeRequest_ = function (request) {
        var _this = this;
        this.isQueryExecuting = true;
        var requestObj;
        this.log("executing request : ".concat(request.name, " "));
        var onReqFinished = this.onReqFinished_.bind(this);
        var query = request.query;
        var callAPI = function (api) {
            requestObj = new api(query, _this.util);
        };
        switch (request.name) {
            case API.Select:
                callAPI(Select);
                break;
            case API.Insert:
                callAPI(Insert);
                break;
            case API.Update:
                callAPI(Update);
                break;
            case API.Remove:
                callAPI(Remove);
                break;
            case API.Count:
                callAPI(Count);
                break;
        }
        requestObj.isTxQuery = true;
        requestObj.execute(this.beforeExecute).then(onReqFinished).catch(function (err) {
            var result = {
                error: err
            };
            onReqFinished(result);
        });
    };
    Transaction.prototype.pushReq_ = function (request) {
        var promiseObj = promise(function (resolve, reject) {
            request.onSuccess = function (result) {
                resolve(result);
            };
            request.onError = function (error) {
                reject(error);
            };
        });
        this.reqQueue.push(request);
        if (this.isTxStarted_ === true) {
            this.processExecutionOfQry_();
        }
        this.log("request pushed : ".concat(request.name));
        return promiseObj;
    };
    Transaction.prototype.processExecutionOfQry_ = function () {
        if (this.isQueryExecuting === false) {
            if (this.reqQueue.length > 0) {
                this.executeRequest_(this.reqQueue[0]);
            }
        }
    };
    Transaction.prototype.notExistingTable_ = function (tables) {
        var _this = this;
        var invalidTable = null;
        tables.every(function (tableName) {
            var table = _this.table(tableName);
            if (table == null) {
                invalidTable = tableName;
                return false;
            }
            return true;
        });
        return invalidTable;
    };
    return Transaction;
}(Base));


;// CONCATENATED MODULE: ./src/worker/utils/db_schema.ts
var userDbSchema = function (db) {
    var database = {
        name: db.name,
        version: db.version,
        tables: []
    };
    db.tables.forEach(function (table) {
        var tableAsObj = {
            name: table.name,
            columns: {}
        };
        table.columns.forEach(function (column) {
            tableAsObj.columns[column.name] = column;
        });
        database.tables.push(tableAsObj);
    });
    return database;
};

;// CONCATENATED MODULE: ./src/worker/query_manager.ts
















var QueryManager = /** @class */ (function () {
    function QueryManager(fn) {
        this.middlewares = [];
        this.util = new IDBUtil();
        this.onQryFinished = IS_WORKER ? function (result) {
            self.postMessage(result);
        } : fn;
    }
    Object.defineProperty(QueryManager.prototype, "db", {
        get: function () {
            return this.util.db;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QueryManager.prototype, "logger", {
        get: function () {
            return this.util.logger;
        },
        enumerable: false,
        configurable: true
    });
    QueryManager.prototype.executeMiddleware_ = function (request) {
        var _this = this;
        var lastIndex = getLength(this.middlewares) - 1;
        if (lastIndex < 0) {
            return promiseResolve();
        }
        var middlewareContext = {};
        var db = this.db;
        Object.defineProperty(middlewareContext, 'database', {
            get: function () {
                return userDbSchema(db);
            }
        });
        return promise(function (res) {
            var index = 0;
            var callNextMiddleware = function () {
                if (index <= lastIndex) {
                    var promiseResult = variableFromPath(_this.middlewares[index++])(request, middlewareContext);
                    if (!promiseResult || !promiseResult.then) {
                        promiseResult = Promise.resolve(promiseResult);
                    }
                    promiseResult.then(function (_) {
                        callNextMiddleware();
                    });
                }
                else {
                    res();
                }
            };
            callNextMiddleware();
        });
    };
    QueryManager.prototype.executeQuery = function (request, cb) {
        var queryResult;
        var query = request.query;
        var ctx = this;
        var idbutil = ctx.util;
        var callAPI = function (api, beforeExecute) {
            queryResult = new api(query, idbutil).
                execute(beforeExecute);
        };
        switch (request.name) {
            case API.OpenDb:
                cb();
                queryResult = ctx.openDb(query);
                break;
            case API.InitDb:
                cb();
                queryResult = ctx.initDb(query);
                break;
            case API.CloseDb:
                cb();
                queryResult = ctx.closeDb();
                break;
            case API.Insert:
                callAPI(Insert, cb);
                break;
            case API.Select:
                callAPI(Select, cb);
                break;
            case API.Count:
                callAPI(Count, cb);
                break;
            case API.Update:
                callAPI(Update, cb);
                break;
            case API.Intersect:
                cb();
                callAPI(Intersect);
                break;
            case API.DropDb:
                cb();
                queryResult = ctx.dropDb();
                break;
            case API.Terminate:
                cb();
                queryResult = ctx.terminate();
                break;
            case API.Union:
                cb();
                callAPI(Union);
                break;
            case API.Remove:
                callAPI(Remove, cb);
                break;
            case API.Clear:
                callAPI(Clear, cb);
                break;
            case API.Transaction:
                callAPI(Transaction, cb);
                break;
            case API.Get:
                cb();
                queryResult = MetaHelper.get(query, idbutil);
                break;
            case API.Set:
                cb();
                queryResult = MetaHelper.set(query.key, query.value, idbutil);
                break;
            case API.ImportScripts:
                cb();
                queryResult = ctx.importScripts_(request);
                break;
            case API.ChangeLogStatus:
                cb();
                ctx.logger.status = query;
                queryResult = Promise.resolve();
                break;
            case API.Middleware:
                cb();
                var value = variableFromPath(query);
                if (!value) {
                    return promiseReject(new LogHelper(ERROR_TYPE.InvalidMiddleware, query));
                }
                ctx.middlewares.push(query);
                return promiseResolve();
            default:
                if (true) {
                    console.error('The Api:-' + request.name + ' does not support.');
                }
                queryResult = promiseResolve();
        }
        ctx.logger.log("Executing query ".concat(request.name, " in web worker"));
        return queryResult;
    };
    QueryManager.prototype.callMiddleware_ = function (middlewares, result) {
        return promise(function (res) {
            var index = 0;
            var lastIndex = getLength(middlewares) - 1;
            var callNextMiddleware = function () {
                if (index <= lastIndex) {
                    var promiseResult = middlewares[index++](result);
                    if (!(promiseResult instanceof Promise)) {
                        promiseResult = promiseResolve(promiseResult);
                    }
                    promiseResult.then(function (modifiedResult) {
                        result = modifiedResult;
                        callNextMiddleware();
                    });
                }
                else {
                    res(result);
                }
            };
            callNextMiddleware();
        });
    };
    QueryManager.prototype.run = function (request) {
        var _this = this;
        var onResultCallback = [];
        var beforeExecuteCallback = [];
        request.onResult = function (cb) {
            onResultCallback.push(function (result) {
                return cb(result);
            });
        };
        request.beforeExecute = function (cb) {
            beforeExecuteCallback.push(function (result) {
                return cb(result);
            });
        };
        this.executeMiddleware_(request).then(function (_) {
            return _this.executeQuery(request, function () {
                return _this.callMiddleware_(beforeExecuteCallback);
            }).then(function (result) {
                return _this.callMiddleware_(onResultCallback, result).then(function (modifiedResult) {
                    _this.returnResult_({
                        result: modifiedResult
                    });
                });
            });
        }).catch(function (ex) {
            onResultCallback = [];
            var err = getError(ex);
            var result = {
                error: err
            };
            _this.returnResult_(result);
        });
    };
    QueryManager.prototype.importScripts_ = function (request) {
        return promise(function (res, rej) {
            try {
                importScripts.apply(void 0, request.query);
                res();
            }
            catch (e) {
                var err = new LogHelper(ERROR_TYPE.ImportScriptsFailed, e.message);
                rej(err);
            }
        });
    };
    QueryManager.prototype.returnResult_ = function (result) {
        this.logger.log("Query finished inside web worker");
        if (this.util) {
            this.util.emptyTx();
        }
        this.onQryFinished(result);
    };
    QueryManager.prototype.dropDb = function () {
        var dbName = this.db.name;
        return this.terminate().then(function () {
            return new DropDb().execute(dbName);
        });
    };
    QueryManager.prototype.closeDb = function () {
        return this.util.close();
    };
    QueryManager.prototype.terminate = function () {
        var _this = this;
        return this.closeDb().then(function () {
            _this.util.db = null;
        });
    };
    QueryManager.prototype.openDb = function (query) {
        var _this = this;
        return this.closeDb().then(function (_) {
            var pResult;
            if (_this.db && query.name === _this.db.name) {
                pResult = _this.initDb();
            }
            else {
                pResult = _this.initDb({
                    name: query.name,
                    tables: [],
                    version: query.version
                });
            }
            return pResult.then(function () {
                return _this.db;
            });
        });
    };
    QueryManager.prototype.initDb = function (dataBase) {
        var _this = this;
        if (!IS_IDB_SUPPORTED) {
            return promiseReject(new LogHelper(ERROR_TYPE.IndexedDbNotSupported));
        }
        var dbMeta = dataBase ? new DbMeta(dataBase) : this.db;
        this.util = new IDBUtil();
        return promise(function (res, rej) {
            _this.util.initDb(dbMeta).then(function (dbInfo) {
                if (dbInfo.isCreated) {
                    MetaHelper.get(MetaHelper.dbSchema, _this.util).then(function (value) {
                        if (value) {
                            value.tables.forEach(function (table, index) {
                                var targetTable = dbMeta.tables[index];
                                if (targetTable) {
                                    targetTable.autoIncColumnValue =
                                        table.autoIncColumnValue;
                                }
                            });
                        }
                        _this.util.db = dbMeta;
                        dbInfo.database = userDbSchema(_this.db);
                        MetaHelper.set(MetaHelper.dbSchema, dbMeta, _this.util).then(function () {
                            res(dbInfo);
                        });
                    });
                }
                else {
                    MetaHelper.get(MetaHelper.dbSchema, _this.util).then(function (value) {
                        _this.util.db = value;
                        dbInfo.database = userDbSchema(_this.db);
                        res(dbInfo);
                    });
                }
            }).catch(rej);
        });
    };
    return QueryManager;
}());


;// CONCATENATED MODULE: ./src/worker/index.ts



if (IS_WORKER) {
    var manager_1 = new QueryManager();
    self.onmessage = function (e) {
        manager_1.run(e.data);
    };
}

module.exports = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=jsstore.worker.commonjs2.js.map

/***/ }),

/***/ "./node_modules/jsstore/dist/worker_injector/index.js":
/*!************************************************************!*\
  !*** ./node_modules/jsstore/dist/worker_injector/index.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

module.exports={setup(r,e){r.$worker= false?0:__webpack_require__(/*! ../jsstore.worker.commonjs2.js */ "./node_modules/jsstore/dist/jsstore.worker.commonjs2.js"),r.initQueryManager_()}};

/***/ }),

/***/ "./node_modules/linkedom/node_modules/css-what/lib/es/parse.js":
/*!*********************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/css-what/lib/es/parse.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isTraversal": function() { return /* binding */ isTraversal; },
/* harmony export */   "parse": function() { return /* binding */ parse; }
/* harmony export */ });
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ "./node_modules/linkedom/node_modules/css-what/lib/es/types.js");

const reName = /^[^\\#]?(?:\\(?:[\da-f]{1,6}\s?|.)|[\w\-\u00b0-\uFFFF])+/;
const reEscape = /\\([\da-f]{1,6}\s?|(\s)|.)/gi;
const actionTypes = new Map([
    [126 /* Tilde */, _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Element],
    [94 /* Circumflex */, _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Start],
    [36 /* Dollar */, _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.End],
    [42 /* Asterisk */, _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Any],
    [33 /* ExclamationMark */, _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Not],
    [124 /* Pipe */, _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Hyphen],
]);
// Pseudos, whose data property is parsed as well.
const unpackPseudos = new Set([
    "has",
    "not",
    "matches",
    "is",
    "where",
    "host",
    "host-context",
]);
/**
 * Checks whether a specific selector is a traversal.
 * This is useful eg. in swapping the order of elements that
 * are not traversals.
 *
 * @param selector Selector to check.
 */
function isTraversal(selector) {
    switch (selector.type) {
        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Adjacent:
        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Child:
        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Descendant:
        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Parent:
        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Sibling:
        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.ColumnCombinator:
            return true;
        default:
            return false;
    }
}
const stripQuotesFromPseudos = new Set(["contains", "icontains"]);
// Unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L152
function funescape(_, escaped, escapedWhitespace) {
    const high = parseInt(escaped, 16) - 0x10000;
    // NaN means non-codepoint
    return high !== high || escapedWhitespace
        ? escaped
        : high < 0
            ? // BMP codepoint
                String.fromCharCode(high + 0x10000)
            : // Supplemental Plane codepoint (surrogate pair)
                String.fromCharCode((high >> 10) | 0xd800, (high & 0x3ff) | 0xdc00);
}
function unescapeCSS(str) {
    return str.replace(reEscape, funescape);
}
function isQuote(c) {
    return c === 39 /* SingleQuote */ || c === 34 /* DoubleQuote */;
}
function isWhitespace(c) {
    return (c === 32 /* Space */ ||
        c === 9 /* Tab */ ||
        c === 10 /* NewLine */ ||
        c === 12 /* FormFeed */ ||
        c === 13 /* CarriageReturn */);
}
/**
 * Parses `selector`, optionally with the passed `options`.
 *
 * @param selector Selector to parse.
 * @param options Options for parsing.
 * @returns Returns a two-dimensional array.
 * The first dimension represents selectors separated by commas (eg. `sub1, sub2`),
 * the second contains the relevant tokens for that selector.
 */
function parse(selector) {
    const subselects = [];
    const endIndex = parseSelector(subselects, `${selector}`, 0);
    if (endIndex < selector.length) {
        throw new Error(`Unmatched selector: ${selector.slice(endIndex)}`);
    }
    return subselects;
}
function parseSelector(subselects, selector, selectorIndex) {
    let tokens = [];
    function getName(offset) {
        const match = selector.slice(selectorIndex + offset).match(reName);
        if (!match) {
            throw new Error(`Expected name, found ${selector.slice(selectorIndex)}`);
        }
        const [name] = match;
        selectorIndex += offset + name.length;
        return unescapeCSS(name);
    }
    function stripWhitespace(offset) {
        selectorIndex += offset;
        while (selectorIndex < selector.length &&
            isWhitespace(selector.charCodeAt(selectorIndex))) {
            selectorIndex++;
        }
    }
    function readValueWithParenthesis() {
        selectorIndex += 1;
        const start = selectorIndex;
        let counter = 1;
        for (; counter > 0 && selectorIndex < selector.length; selectorIndex++) {
            if (selector.charCodeAt(selectorIndex) ===
                40 /* LeftParenthesis */ &&
                !isEscaped(selectorIndex)) {
                counter++;
            }
            else if (selector.charCodeAt(selectorIndex) ===
                41 /* RightParenthesis */ &&
                !isEscaped(selectorIndex)) {
                counter--;
            }
        }
        if (counter) {
            throw new Error("Parenthesis not matched");
        }
        return unescapeCSS(selector.slice(start, selectorIndex - 1));
    }
    function isEscaped(pos) {
        let slashCount = 0;
        while (selector.charCodeAt(--pos) === 92 /* BackSlash */)
            slashCount++;
        return (slashCount & 1) === 1;
    }
    function ensureNotTraversal() {
        if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {
            throw new Error("Did not expect successive traversals.");
        }
    }
    function addTraversal(type) {
        if (tokens.length > 0 &&
            tokens[tokens.length - 1].type === _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Descendant) {
            tokens[tokens.length - 1].type = type;
            return;
        }
        ensureNotTraversal();
        tokens.push({ type });
    }
    function addSpecialAttribute(name, action) {
        tokens.push({
            type: _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Attribute,
            name,
            action,
            value: getName(1),
            namespace: null,
            ignoreCase: "quirks",
        });
    }
    /**
     * We have finished parsing the current part of the selector.
     *
     * Remove descendant tokens at the end if they exist,
     * and return the last index, so that parsing can be
     * picked up from here.
     */
    function finalizeSubselector() {
        if (tokens.length &&
            tokens[tokens.length - 1].type === _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Descendant) {
            tokens.pop();
        }
        if (tokens.length === 0) {
            throw new Error("Empty sub-selector");
        }
        subselects.push(tokens);
    }
    stripWhitespace(0);
    if (selector.length === selectorIndex) {
        return selectorIndex;
    }
    loop: while (selectorIndex < selector.length) {
        const firstChar = selector.charCodeAt(selectorIndex);
        switch (firstChar) {
            // Whitespace
            case 32 /* Space */:
            case 9 /* Tab */:
            case 10 /* NewLine */:
            case 12 /* FormFeed */:
            case 13 /* CarriageReturn */: {
                if (tokens.length === 0 ||
                    tokens[0].type !== _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Descendant) {
                    ensureNotTraversal();
                    tokens.push({ type: _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Descendant });
                }
                stripWhitespace(1);
                break;
            }
            // Traversals
            case 62 /* GreaterThan */: {
                addTraversal(_types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Child);
                stripWhitespace(1);
                break;
            }
            case 60 /* LessThan */: {
                addTraversal(_types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Parent);
                stripWhitespace(1);
                break;
            }
            case 126 /* Tilde */: {
                addTraversal(_types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Sibling);
                stripWhitespace(1);
                break;
            }
            case 43 /* Plus */: {
                addTraversal(_types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Adjacent);
                stripWhitespace(1);
                break;
            }
            // Special attribute selectors: .class, #id
            case 46 /* Period */: {
                addSpecialAttribute("class", _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Element);
                break;
            }
            case 35 /* Hash */: {
                addSpecialAttribute("id", _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Equals);
                break;
            }
            case 91 /* LeftSquareBracket */: {
                stripWhitespace(1);
                // Determine attribute name and namespace
                let name;
                let namespace = null;
                if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */) {
                    // Equivalent to no namespace
                    name = getName(1);
                }
                else if (selector.startsWith("*|", selectorIndex)) {
                    namespace = "*";
                    name = getName(2);
                }
                else {
                    name = getName(0);
                    if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */ &&
                        selector.charCodeAt(selectorIndex + 1) !==
                            61 /* Equal */) {
                        namespace = name;
                        name = getName(1);
                    }
                }
                stripWhitespace(0);
                // Determine comparison operation
                let action = _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Exists;
                const possibleAction = actionTypes.get(selector.charCodeAt(selectorIndex));
                if (possibleAction) {
                    action = possibleAction;
                    if (selector.charCodeAt(selectorIndex + 1) !==
                        61 /* Equal */) {
                        throw new Error("Expected `=`");
                    }
                    stripWhitespace(2);
                }
                else if (selector.charCodeAt(selectorIndex) === 61 /* Equal */) {
                    action = _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Equals;
                    stripWhitespace(1);
                }
                // Determine value
                let value = "";
                let ignoreCase = null;
                if (action !== "exists") {
                    if (isQuote(selector.charCodeAt(selectorIndex))) {
                        const quote = selector.charCodeAt(selectorIndex);
                        let sectionEnd = selectorIndex + 1;
                        while (sectionEnd < selector.length &&
                            (selector.charCodeAt(sectionEnd) !== quote ||
                                isEscaped(sectionEnd))) {
                            sectionEnd += 1;
                        }
                        if (selector.charCodeAt(sectionEnd) !== quote) {
                            throw new Error("Attribute value didn't end");
                        }
                        value = unescapeCSS(selector.slice(selectorIndex + 1, sectionEnd));
                        selectorIndex = sectionEnd + 1;
                    }
                    else {
                        const valueStart = selectorIndex;
                        while (selectorIndex < selector.length &&
                            ((!isWhitespace(selector.charCodeAt(selectorIndex)) &&
                                selector.charCodeAt(selectorIndex) !==
                                    93 /* RightSquareBracket */) ||
                                isEscaped(selectorIndex))) {
                            selectorIndex += 1;
                        }
                        value = unescapeCSS(selector.slice(valueStart, selectorIndex));
                    }
                    stripWhitespace(0);
                    // See if we have a force ignore flag
                    const forceIgnore = selector.charCodeAt(selectorIndex) | 0x20;
                    // If the forceIgnore flag is set (either `i` or `s`), use that value
                    if (forceIgnore === 115 /* LowerS */) {
                        ignoreCase = false;
                        stripWhitespace(1);
                    }
                    else if (forceIgnore === 105 /* LowerI */) {
                        ignoreCase = true;
                        stripWhitespace(1);
                    }
                }
                if (selector.charCodeAt(selectorIndex) !==
                    93 /* RightSquareBracket */) {
                    throw new Error("Attribute selector didn't terminate");
                }
                selectorIndex += 1;
                const attributeSelector = {
                    type: _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Attribute,
                    name,
                    action,
                    value,
                    namespace,
                    ignoreCase,
                };
                tokens.push(attributeSelector);
                break;
            }
            case 58 /* Colon */: {
                if (selector.charCodeAt(selectorIndex + 1) === 58 /* Colon */) {
                    tokens.push({
                        type: _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.PseudoElement,
                        name: getName(2).toLowerCase(),
                        data: selector.charCodeAt(selectorIndex) ===
                            40 /* LeftParenthesis */
                            ? readValueWithParenthesis()
                            : null,
                    });
                    continue;
                }
                const name = getName(1).toLowerCase();
                let data = null;
                if (selector.charCodeAt(selectorIndex) ===
                    40 /* LeftParenthesis */) {
                    if (unpackPseudos.has(name)) {
                        if (isQuote(selector.charCodeAt(selectorIndex + 1))) {
                            throw new Error(`Pseudo-selector ${name} cannot be quoted`);
                        }
                        data = [];
                        selectorIndex = parseSelector(data, selector, selectorIndex + 1);
                        if (selector.charCodeAt(selectorIndex) !==
                            41 /* RightParenthesis */) {
                            throw new Error(`Missing closing parenthesis in :${name} (${selector})`);
                        }
                        selectorIndex += 1;
                    }
                    else {
                        data = readValueWithParenthesis();
                        if (stripQuotesFromPseudos.has(name)) {
                            const quot = data.charCodeAt(0);
                            if (quot === data.charCodeAt(data.length - 1) &&
                                isQuote(quot)) {
                                data = data.slice(1, -1);
                            }
                        }
                        data = unescapeCSS(data);
                    }
                }
                tokens.push({ type: _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Pseudo, name, data });
                break;
            }
            case 44 /* Comma */: {
                finalizeSubselector();
                tokens = [];
                stripWhitespace(1);
                break;
            }
            default: {
                if (selector.startsWith("/*", selectorIndex)) {
                    const endIndex = selector.indexOf("*/", selectorIndex + 2);
                    if (endIndex < 0) {
                        throw new Error("Comment was not terminated");
                    }
                    selectorIndex = endIndex + 2;
                    // Remove leading whitespace
                    if (tokens.length === 0) {
                        stripWhitespace(0);
                    }
                    break;
                }
                let namespace = null;
                let name;
                if (firstChar === 42 /* Asterisk */) {
                    selectorIndex += 1;
                    name = "*";
                }
                else if (firstChar === 124 /* Pipe */) {
                    name = "";
                    if (selector.charCodeAt(selectorIndex + 1) === 124 /* Pipe */) {
                        addTraversal(_types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.ColumnCombinator);
                        stripWhitespace(2);
                        break;
                    }
                }
                else if (reName.test(selector.slice(selectorIndex))) {
                    name = getName(0);
                }
                else {
                    break loop;
                }
                if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */ &&
                    selector.charCodeAt(selectorIndex + 1) !== 124 /* Pipe */) {
                    namespace = name;
                    if (selector.charCodeAt(selectorIndex + 1) ===
                        42 /* Asterisk */) {
                        name = "*";
                        selectorIndex += 2;
                    }
                    else {
                        name = getName(1);
                    }
                }
                tokens.push(name === "*"
                    ? { type: _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Universal, namespace }
                    : { type: _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Tag, name, namespace });
            }
        }
    }
    finalizeSubselector();
    return selectorIndex;
}


/***/ }),

/***/ "./node_modules/linkedom/node_modules/css-what/lib/es/types.js":
/*!*********************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/css-what/lib/es/types.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AttributeAction": function() { return /* binding */ AttributeAction; },
/* harmony export */   "IgnoreCaseMode": function() { return /* binding */ IgnoreCaseMode; },
/* harmony export */   "SelectorType": function() { return /* binding */ SelectorType; }
/* harmony export */ });
var SelectorType;
(function (SelectorType) {
    SelectorType["Attribute"] = "attribute";
    SelectorType["Pseudo"] = "pseudo";
    SelectorType["PseudoElement"] = "pseudo-element";
    SelectorType["Tag"] = "tag";
    SelectorType["Universal"] = "universal";
    // Traversals
    SelectorType["Adjacent"] = "adjacent";
    SelectorType["Child"] = "child";
    SelectorType["Descendant"] = "descendant";
    SelectorType["Parent"] = "parent";
    SelectorType["Sibling"] = "sibling";
    SelectorType["ColumnCombinator"] = "column-combinator";
})(SelectorType || (SelectorType = {}));
/**
 * Modes for ignore case.
 *
 * This could be updated to an enum, and the object is
 * the current stand-in that will allow code to be updated
 * without big changes.
 */
const IgnoreCaseMode = {
    Unknown: null,
    QuirksMode: "quirks",
    IgnoreCase: true,
    CaseSensitive: false,
};
var AttributeAction;
(function (AttributeAction) {
    AttributeAction["Any"] = "any";
    AttributeAction["Element"] = "element";
    AttributeAction["End"] = "end";
    AttributeAction["Equals"] = "equals";
    AttributeAction["Exists"] = "exists";
    AttributeAction["Hyphen"] = "hyphen";
    AttributeAction["Not"] = "not";
    AttributeAction["Start"] = "start";
})(AttributeAction || (AttributeAction = {}));


/***/ }),

/***/ "./node_modules/linkedom/node_modules/cssom/lib/CSSConditionRule.js":
/*!**************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/cssom/lib/CSSConditionRule.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

//.CommonJS
var CSSOM = {
  CSSRule: (__webpack_require__(/*! ./CSSRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSRule.js").CSSRule),
  CSSGroupingRule: (__webpack_require__(/*! ./CSSGroupingRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSGroupingRule.js").CSSGroupingRule)
};
///CommonJS


/**
 * @constructor
 * @see https://www.w3.org/TR/css-conditional-3/#the-cssconditionrule-interface
 */
CSSOM.CSSConditionRule = function CSSConditionRule() {
  CSSOM.CSSGroupingRule.call(this);
  this.cssRules = [];
};

CSSOM.CSSConditionRule.prototype = new CSSOM.CSSGroupingRule();
CSSOM.CSSConditionRule.prototype.constructor = CSSOM.CSSConditionRule;
CSSOM.CSSConditionRule.prototype.conditionText = ''
CSSOM.CSSConditionRule.prototype.cssText = ''

//.CommonJS
exports.CSSConditionRule = CSSOM.CSSConditionRule;
///CommonJS


/***/ }),

/***/ "./node_modules/linkedom/node_modules/cssom/lib/CSSDocumentRule.js":
/*!*************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/cssom/lib/CSSDocumentRule.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

//.CommonJS
var CSSOM = {
    CSSRule: (__webpack_require__(/*! ./CSSRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSRule.js").CSSRule),
    MatcherList: (__webpack_require__(/*! ./MatcherList */ "./node_modules/linkedom/node_modules/cssom/lib/MatcherList.js").MatcherList)
};
///CommonJS


/**
 * @constructor
 * @see https://developer.mozilla.org/en/CSS/@-moz-document
 */
CSSOM.CSSDocumentRule = function CSSDocumentRule() {
    CSSOM.CSSRule.call(this);
    this.matcher = new CSSOM.MatcherList();
    this.cssRules = [];
};

CSSOM.CSSDocumentRule.prototype = new CSSOM.CSSRule();
CSSOM.CSSDocumentRule.prototype.constructor = CSSOM.CSSDocumentRule;
CSSOM.CSSDocumentRule.prototype.type = 10;
//FIXME
//CSSOM.CSSDocumentRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
//CSSOM.CSSDocumentRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;

Object.defineProperty(CSSOM.CSSDocumentRule.prototype, "cssText", {
  get: function() {
    var cssTexts = [];
    for (var i=0, length=this.cssRules.length; i < length; i++) {
        cssTexts.push(this.cssRules[i].cssText);
    }
    return "@-moz-document " + this.matcher.matcherText + " {" + cssTexts.join("") + "}";
  }
});


//.CommonJS
exports.CSSDocumentRule = CSSOM.CSSDocumentRule;
///CommonJS


/***/ }),

/***/ "./node_modules/linkedom/node_modules/cssom/lib/CSSFontFaceRule.js":
/*!*************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/cssom/lib/CSSFontFaceRule.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

//.CommonJS
var CSSOM = {
	CSSStyleDeclaration: (__webpack_require__(/*! ./CSSStyleDeclaration */ "./node_modules/linkedom/node_modules/cssom/lib/CSSStyleDeclaration.js").CSSStyleDeclaration),
	CSSRule: (__webpack_require__(/*! ./CSSRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSRule.js").CSSRule)
};
///CommonJS


/**
 * @constructor
 * @see http://dev.w3.org/csswg/cssom/#css-font-face-rule
 */
CSSOM.CSSFontFaceRule = function CSSFontFaceRule() {
	CSSOM.CSSRule.call(this);
	this.style = new CSSOM.CSSStyleDeclaration();
	this.style.parentRule = this;
};

CSSOM.CSSFontFaceRule.prototype = new CSSOM.CSSRule();
CSSOM.CSSFontFaceRule.prototype.constructor = CSSOM.CSSFontFaceRule;
CSSOM.CSSFontFaceRule.prototype.type = 5;
//FIXME
//CSSOM.CSSFontFaceRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
//CSSOM.CSSFontFaceRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;

// http://www.opensource.apple.com/source/WebCore/WebCore-955.66.1/css/WebKitCSSFontFaceRule.cpp
Object.defineProperty(CSSOM.CSSFontFaceRule.prototype, "cssText", {
  get: function() {
    return "@font-face {" + this.style.cssText + "}";
  }
});


//.CommonJS
exports.CSSFontFaceRule = CSSOM.CSSFontFaceRule;
///CommonJS


/***/ }),

/***/ "./node_modules/linkedom/node_modules/cssom/lib/CSSGroupingRule.js":
/*!*************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/cssom/lib/CSSGroupingRule.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

//.CommonJS
var CSSOM = {
	CSSRule: (__webpack_require__(/*! ./CSSRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSRule.js").CSSRule)
};
///CommonJS


/**
 * @constructor
 * @see https://drafts.csswg.org/cssom/#the-cssgroupingrule-interface
 */
CSSOM.CSSGroupingRule = function CSSGroupingRule() {
	CSSOM.CSSRule.call(this);
	this.cssRules = [];
};

CSSOM.CSSGroupingRule.prototype = new CSSOM.CSSRule();
CSSOM.CSSGroupingRule.prototype.constructor = CSSOM.CSSGroupingRule;


/**
 * Used to insert a new CSS rule to a list of CSS rules.
 *
 * @example
 *   cssGroupingRule.cssText
 *   -> "body{margin:0;}"
 *   cssGroupingRule.insertRule("img{border:none;}", 1)
 *   -> 1
 *   cssGroupingRule.cssText
 *   -> "body{margin:0;}img{border:none;}"
 *
 * @param {string} rule
 * @param {number} [index]
 * @see https://www.w3.org/TR/cssom-1/#dom-cssgroupingrule-insertrule
 * @return {number} The index within the grouping rule's collection of the newly inserted rule.
 */
 CSSOM.CSSGroupingRule.prototype.insertRule = function insertRule(rule, index) {
	if (index < 0 || index > this.cssRules.length) {
		throw new RangeError("INDEX_SIZE_ERR");
	}
	var cssRule = CSSOM.parse(rule).cssRules[0];
	cssRule.parentRule = this;
	this.cssRules.splice(index, 0, cssRule);
	return index;
};

/**
 * Used to delete a rule from the grouping rule.
 *
 *   cssGroupingRule.cssText
 *   -> "img{border:none;}body{margin:0;}"
 *   cssGroupingRule.deleteRule(0)
 *   cssGroupingRule.cssText
 *   -> "body{margin:0;}"
 *
 * @param {number} index within the grouping rule's rule list of the rule to remove.
 * @see https://www.w3.org/TR/cssom-1/#dom-cssgroupingrule-deleterule
 */
 CSSOM.CSSGroupingRule.prototype.deleteRule = function deleteRule(index) {
	if (index < 0 || index >= this.cssRules.length) {
		throw new RangeError("INDEX_SIZE_ERR");
	}
	this.cssRules.splice(index, 1)[0].parentRule = null;
};

//.CommonJS
exports.CSSGroupingRule = CSSOM.CSSGroupingRule;
///CommonJS


/***/ }),

/***/ "./node_modules/linkedom/node_modules/cssom/lib/CSSHostRule.js":
/*!*********************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/cssom/lib/CSSHostRule.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

//.CommonJS
var CSSOM = {
	CSSRule: (__webpack_require__(/*! ./CSSRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSRule.js").CSSRule)
};
///CommonJS


/**
 * @constructor
 * @see http://www.w3.org/TR/shadow-dom/#host-at-rule
 */
CSSOM.CSSHostRule = function CSSHostRule() {
	CSSOM.CSSRule.call(this);
	this.cssRules = [];
};

CSSOM.CSSHostRule.prototype = new CSSOM.CSSRule();
CSSOM.CSSHostRule.prototype.constructor = CSSOM.CSSHostRule;
CSSOM.CSSHostRule.prototype.type = 1001;
//FIXME
//CSSOM.CSSHostRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
//CSSOM.CSSHostRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;

Object.defineProperty(CSSOM.CSSHostRule.prototype, "cssText", {
	get: function() {
		var cssTexts = [];
		for (var i=0, length=this.cssRules.length; i < length; i++) {
			cssTexts.push(this.cssRules[i].cssText);
		}
		return "@host {" + cssTexts.join("") + "}";
	}
});


//.CommonJS
exports.CSSHostRule = CSSOM.CSSHostRule;
///CommonJS


/***/ }),

/***/ "./node_modules/linkedom/node_modules/cssom/lib/CSSImportRule.js":
/*!***********************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/cssom/lib/CSSImportRule.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

//.CommonJS
var CSSOM = {
	CSSRule: (__webpack_require__(/*! ./CSSRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSRule.js").CSSRule),
	CSSStyleSheet: (__webpack_require__(/*! ./CSSStyleSheet */ "./node_modules/linkedom/node_modules/cssom/lib/CSSStyleSheet.js").CSSStyleSheet),
	MediaList: (__webpack_require__(/*! ./MediaList */ "./node_modules/linkedom/node_modules/cssom/lib/MediaList.js").MediaList)
};
///CommonJS


/**
 * @constructor
 * @see http://dev.w3.org/csswg/cssom/#cssimportrule
 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSImportRule
 */
CSSOM.CSSImportRule = function CSSImportRule() {
	CSSOM.CSSRule.call(this);
	this.href = "";
	this.media = new CSSOM.MediaList();
	this.styleSheet = new CSSOM.CSSStyleSheet();
};

CSSOM.CSSImportRule.prototype = new CSSOM.CSSRule();
CSSOM.CSSImportRule.prototype.constructor = CSSOM.CSSImportRule;
CSSOM.CSSImportRule.prototype.type = 3;

Object.defineProperty(CSSOM.CSSImportRule.prototype, "cssText", {
  get: function() {
    var mediaText = this.media.mediaText;
    return "@import url(" + this.href + ")" + (mediaText ? " " + mediaText : "") + ";";
  },
  set: function(cssText) {
    var i = 0;

    /**
     * @import url(partial.css) screen, handheld;
     *        ||               |
     *        after-import     media
     *         |
     *         url
     */
    var state = '';

    var buffer = '';
    var index;
    for (var character; (character = cssText.charAt(i)); i++) {

      switch (character) {
        case ' ':
        case '\t':
        case '\r':
        case '\n':
        case '\f':
          if (state === 'after-import') {
            state = 'url';
          } else {
            buffer += character;
          }
          break;

        case '@':
          if (!state && cssText.indexOf('@import', i) === i) {
            state = 'after-import';
            i += 'import'.length;
            buffer = '';
          }
          break;

        case 'u':
          if (state === 'url' && cssText.indexOf('url(', i) === i) {
            index = cssText.indexOf(')', i + 1);
            if (index === -1) {
              throw i + ': ")" not found';
            }
            i += 'url('.length;
            var url = cssText.slice(i, index);
            if (url[0] === url[url.length - 1]) {
              if (url[0] === '"' || url[0] === "'") {
                url = url.slice(1, -1);
              }
            }
            this.href = url;
            i = index;
            state = 'media';
          }
          break;

        case '"':
          if (state === 'url') {
            index = cssText.indexOf('"', i + 1);
            if (!index) {
              throw i + ": '\"' not found";
            }
            this.href = cssText.slice(i + 1, index);
            i = index;
            state = 'media';
          }
          break;

        case "'":
          if (state === 'url') {
            index = cssText.indexOf("'", i + 1);
            if (!index) {
              throw i + ': "\'" not found';
            }
            this.href = cssText.slice(i + 1, index);
            i = index;
            state = 'media';
          }
          break;

        case ';':
          if (state === 'media') {
            if (buffer) {
              this.media.mediaText = buffer.trim();
            }
          }
          break;

        default:
          if (state === 'media') {
            buffer += character;
          }
          break;
      }
    }
  }
});


//.CommonJS
exports.CSSImportRule = CSSOM.CSSImportRule;
///CommonJS


/***/ }),

/***/ "./node_modules/linkedom/node_modules/cssom/lib/CSSKeyframeRule.js":
/*!*************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/cssom/lib/CSSKeyframeRule.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

//.CommonJS
var CSSOM = {
	CSSRule: (__webpack_require__(/*! ./CSSRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSRule.js").CSSRule),
	CSSStyleDeclaration: (__webpack_require__(/*! ./CSSStyleDeclaration */ "./node_modules/linkedom/node_modules/cssom/lib/CSSStyleDeclaration.js").CSSStyleDeclaration)
};
///CommonJS


/**
 * @constructor
 * @see http://www.w3.org/TR/css3-animations/#DOM-CSSKeyframeRule
 */
CSSOM.CSSKeyframeRule = function CSSKeyframeRule() {
	CSSOM.CSSRule.call(this);
	this.keyText = '';
	this.style = new CSSOM.CSSStyleDeclaration();
	this.style.parentRule = this;
};

CSSOM.CSSKeyframeRule.prototype = new CSSOM.CSSRule();
CSSOM.CSSKeyframeRule.prototype.constructor = CSSOM.CSSKeyframeRule;
CSSOM.CSSKeyframeRule.prototype.type = 8;
//FIXME
//CSSOM.CSSKeyframeRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
//CSSOM.CSSKeyframeRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;

// http://www.opensource.apple.com/source/WebCore/WebCore-955.66.1/css/WebKitCSSKeyframeRule.cpp
Object.defineProperty(CSSOM.CSSKeyframeRule.prototype, "cssText", {
  get: function() {
    return this.keyText + " {" + this.style.cssText + "} ";
  }
});


//.CommonJS
exports.CSSKeyframeRule = CSSOM.CSSKeyframeRule;
///CommonJS


/***/ }),

/***/ "./node_modules/linkedom/node_modules/cssom/lib/CSSKeyframesRule.js":
/*!**************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/cssom/lib/CSSKeyframesRule.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

//.CommonJS
var CSSOM = {
	CSSRule: (__webpack_require__(/*! ./CSSRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSRule.js").CSSRule)
};
///CommonJS


/**
 * @constructor
 * @see http://www.w3.org/TR/css3-animations/#DOM-CSSKeyframesRule
 */
CSSOM.CSSKeyframesRule = function CSSKeyframesRule() {
	CSSOM.CSSRule.call(this);
	this.name = '';
	this.cssRules = [];
};

CSSOM.CSSKeyframesRule.prototype = new CSSOM.CSSRule();
CSSOM.CSSKeyframesRule.prototype.constructor = CSSOM.CSSKeyframesRule;
CSSOM.CSSKeyframesRule.prototype.type = 7;
//FIXME
//CSSOM.CSSKeyframesRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
//CSSOM.CSSKeyframesRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;

// http://www.opensource.apple.com/source/WebCore/WebCore-955.66.1/css/WebKitCSSKeyframesRule.cpp
Object.defineProperty(CSSOM.CSSKeyframesRule.prototype, "cssText", {
  get: function() {
    var cssTexts = [];
    for (var i=0, length=this.cssRules.length; i < length; i++) {
      cssTexts.push("  " + this.cssRules[i].cssText);
    }
    return "@" + (this._vendorPrefix || '') + "keyframes " + this.name + " { \n" + cssTexts.join("\n") + "\n}";
  }
});


//.CommonJS
exports.CSSKeyframesRule = CSSOM.CSSKeyframesRule;
///CommonJS


/***/ }),

/***/ "./node_modules/linkedom/node_modules/cssom/lib/CSSMediaRule.js":
/*!**********************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/cssom/lib/CSSMediaRule.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

//.CommonJS
var CSSOM = {
	CSSRule: (__webpack_require__(/*! ./CSSRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSRule.js").CSSRule),
	CSSGroupingRule: (__webpack_require__(/*! ./CSSGroupingRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSGroupingRule.js").CSSGroupingRule),
	CSSConditionRule: (__webpack_require__(/*! ./CSSConditionRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSConditionRule.js").CSSConditionRule),
	MediaList: (__webpack_require__(/*! ./MediaList */ "./node_modules/linkedom/node_modules/cssom/lib/MediaList.js").MediaList)
};
///CommonJS


/**
 * @constructor
 * @see http://dev.w3.org/csswg/cssom/#cssmediarule
 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSMediaRule
 */
CSSOM.CSSMediaRule = function CSSMediaRule() {
	CSSOM.CSSConditionRule.call(this);
	this.media = new CSSOM.MediaList();
};

CSSOM.CSSMediaRule.prototype = new CSSOM.CSSConditionRule();
CSSOM.CSSMediaRule.prototype.constructor = CSSOM.CSSMediaRule;
CSSOM.CSSMediaRule.prototype.type = 4;

// https://opensource.apple.com/source/WebCore/WebCore-7611.1.21.161.3/css/CSSMediaRule.cpp
Object.defineProperties(CSSOM.CSSMediaRule.prototype, {
  "conditionText": {
    get: function() {
      return this.media.mediaText;
    },
    set: function(value) {
      this.media.mediaText = value;
    },
    configurable: true,
    enumerable: true
  },
  "cssText": {
    get: function() {
      var cssTexts = [];
      for (var i=0, length=this.cssRules.length; i < length; i++) {
        cssTexts.push(this.cssRules[i].cssText);
      }
      return "@media " + this.media.mediaText + " {" + cssTexts.join("") + "}";
    },
    configurable: true,
    enumerable: true
  }
});


//.CommonJS
exports.CSSMediaRule = CSSOM.CSSMediaRule;
///CommonJS


/***/ }),

/***/ "./node_modules/linkedom/node_modules/cssom/lib/CSSRule.js":
/*!*****************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/cssom/lib/CSSRule.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports) {

//.CommonJS
var CSSOM = {};
///CommonJS


/**
 * @constructor
 * @see http://dev.w3.org/csswg/cssom/#the-cssrule-interface
 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSRule
 */
CSSOM.CSSRule = function CSSRule() {
	this.parentRule = null;
	this.parentStyleSheet = null;
};

CSSOM.CSSRule.UNKNOWN_RULE = 0;                 // obsolete
CSSOM.CSSRule.STYLE_RULE = 1;
CSSOM.CSSRule.CHARSET_RULE = 2;                 // obsolete
CSSOM.CSSRule.IMPORT_RULE = 3;
CSSOM.CSSRule.MEDIA_RULE = 4;
CSSOM.CSSRule.FONT_FACE_RULE = 5;
CSSOM.CSSRule.PAGE_RULE = 6;
CSSOM.CSSRule.KEYFRAMES_RULE = 7;
CSSOM.CSSRule.KEYFRAME_RULE = 8;
CSSOM.CSSRule.MARGIN_RULE = 9;
CSSOM.CSSRule.NAMESPACE_RULE = 10;
CSSOM.CSSRule.COUNTER_STYLE_RULE = 11;
CSSOM.CSSRule.SUPPORTS_RULE = 12;
CSSOM.CSSRule.DOCUMENT_RULE = 13;
CSSOM.CSSRule.FONT_FEATURE_VALUES_RULE = 14;
CSSOM.CSSRule.VIEWPORT_RULE = 15;
CSSOM.CSSRule.REGION_STYLE_RULE = 16;


CSSOM.CSSRule.prototype = {
	constructor: CSSOM.CSSRule
	//FIXME
};


//.CommonJS
exports.CSSRule = CSSOM.CSSRule;
///CommonJS


/***/ }),

/***/ "./node_modules/linkedom/node_modules/cssom/lib/CSSStyleDeclaration.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/cssom/lib/CSSStyleDeclaration.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

//.CommonJS
var CSSOM = {};
///CommonJS


/**
 * @constructor
 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration
 */
CSSOM.CSSStyleDeclaration = function CSSStyleDeclaration(){
	this.length = 0;
	this.parentRule = null;

	// NON-STANDARD
	this._importants = {};
};


CSSOM.CSSStyleDeclaration.prototype = {

	constructor: CSSOM.CSSStyleDeclaration,

	/**
	 *
	 * @param {string} name
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-getPropertyValue
	 * @return {string} the value of the property if it has been explicitly set for this declaration block.
	 * Returns the empty string if the property has not been set.
	 */
	getPropertyValue: function(name) {
		return this[name] || "";
	},

	/**
	 *
	 * @param {string} name
	 * @param {string} value
	 * @param {string} [priority=null] "important" or null
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-setProperty
	 */
	setProperty: function(name, value, priority) {
		if (this[name]) {
			// Property already exist. Overwrite it.
			var index = Array.prototype.indexOf.call(this, name);
			if (index < 0) {
				this[this.length] = name;
				this.length++;
			}
		} else {
			// New property.
			this[this.length] = name;
			this.length++;
		}
		this[name] = value + "";
		this._importants[name] = priority;
	},

	/**
	 *
	 * @param {string} name
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-removeProperty
	 * @return {string} the value of the property if it has been explicitly set for this declaration block.
	 * Returns the empty string if the property has not been set or the property name does not correspond to a known CSS property.
	 */
	removeProperty: function(name) {
		if (!(name in this)) {
			return "";
		}
		var index = Array.prototype.indexOf.call(this, name);
		if (index < 0) {
			return "";
		}
		var prevValue = this[name];
		this[name] = "";

		// That's what WebKit and Opera do
		Array.prototype.splice.call(this, index, 1);

		// That's what Firefox does
		//this[index] = ""

		return prevValue;
	},

	getPropertyCSSValue: function() {
		//FIXME
	},

	/**
	 *
	 * @param {String} name
	 */
	getPropertyPriority: function(name) {
		return this._importants[name] || "";
	},


	/**
	 *   element.style.overflow = "auto"
	 *   element.style.getPropertyShorthand("overflow-x")
	 *   -> "overflow"
	 */
	getPropertyShorthand: function() {
		//FIXME
	},

	isPropertyImplicit: function() {
		//FIXME
	},

	// Doesn't work in IE < 9
	get cssText(){
		var properties = [];
		for (var i=0, length=this.length; i < length; ++i) {
			var name = this[i];
			var value = this.getPropertyValue(name);
			var priority = this.getPropertyPriority(name);
			if (priority) {
				priority = " !" + priority;
			}
			properties[i] = name + ": " + value + priority + ";";
		}
		return properties.join(" ");
	},

	set cssText(text){
		var i, name;
		for (i = this.length; i--;) {
			name = this[i];
			this[name] = "";
		}
		Array.prototype.splice.call(this, 0, this.length);
		this._importants = {};

		var dummyRule = CSSOM.parse('#bogus{' + text + '}').cssRules[0].style;
		var length = dummyRule.length;
		for (i = 0; i < length; ++i) {
			name = dummyRule[i];
			this.setProperty(dummyRule[i], dummyRule.getPropertyValue(name), dummyRule.getPropertyPriority(name));
		}
	}
};


//.CommonJS
exports.CSSStyleDeclaration = CSSOM.CSSStyleDeclaration;
CSSOM.parse = (__webpack_require__(/*! ./parse */ "./node_modules/linkedom/node_modules/cssom/lib/parse.js").parse); // Cannot be included sooner due to the mutual dependency between parse.js and CSSStyleDeclaration.js
///CommonJS


/***/ }),

/***/ "./node_modules/linkedom/node_modules/cssom/lib/CSSStyleRule.js":
/*!**********************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/cssom/lib/CSSStyleRule.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

//.CommonJS
var CSSOM = {
	CSSStyleDeclaration: (__webpack_require__(/*! ./CSSStyleDeclaration */ "./node_modules/linkedom/node_modules/cssom/lib/CSSStyleDeclaration.js").CSSStyleDeclaration),
	CSSRule: (__webpack_require__(/*! ./CSSRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSRule.js").CSSRule)
};
///CommonJS


/**
 * @constructor
 * @see http://dev.w3.org/csswg/cssom/#cssstylerule
 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleRule
 */
CSSOM.CSSStyleRule = function CSSStyleRule() {
	CSSOM.CSSRule.call(this);
	this.selectorText = "";
	this.style = new CSSOM.CSSStyleDeclaration();
	this.style.parentRule = this;
};

CSSOM.CSSStyleRule.prototype = new CSSOM.CSSRule();
CSSOM.CSSStyleRule.prototype.constructor = CSSOM.CSSStyleRule;
CSSOM.CSSStyleRule.prototype.type = 1;

Object.defineProperty(CSSOM.CSSStyleRule.prototype, "cssText", {
	get: function() {
		var text;
		if (this.selectorText) {
			text = this.selectorText + " {" + this.style.cssText + "}";
		} else {
			text = "";
		}
		return text;
	},
	set: function(cssText) {
		var rule = CSSOM.CSSStyleRule.parse(cssText);
		this.style = rule.style;
		this.selectorText = rule.selectorText;
	}
});


/**
 * NON-STANDARD
 * lightweight version of parse.js.
 * @param {string} ruleText
 * @return CSSStyleRule
 */
CSSOM.CSSStyleRule.parse = function(ruleText) {
	var i = 0;
	var state = "selector";
	var index;
	var j = i;
	var buffer = "";

	var SIGNIFICANT_WHITESPACE = {
		"selector": true,
		"value": true
	};

	var styleRule = new CSSOM.CSSStyleRule();
	var name, priority="";

	for (var character; (character = ruleText.charAt(i)); i++) {

		switch (character) {

		case " ":
		case "\t":
		case "\r":
		case "\n":
		case "\f":
			if (SIGNIFICANT_WHITESPACE[state]) {
				// Squash 2 or more white-spaces in the row into 1
				switch (ruleText.charAt(i - 1)) {
					case " ":
					case "\t":
					case "\r":
					case "\n":
					case "\f":
						break;
					default:
						buffer += " ";
						break;
				}
			}
			break;

		// String
		case '"':
			j = i + 1;
			index = ruleText.indexOf('"', j) + 1;
			if (!index) {
				throw '" is missing';
			}
			buffer += ruleText.slice(i, index);
			i = index - 1;
			break;

		case "'":
			j = i + 1;
			index = ruleText.indexOf("'", j) + 1;
			if (!index) {
				throw "' is missing";
			}
			buffer += ruleText.slice(i, index);
			i = index - 1;
			break;

		// Comment
		case "/":
			if (ruleText.charAt(i + 1) === "*") {
				i += 2;
				index = ruleText.indexOf("*/", i);
				if (index === -1) {
					throw new SyntaxError("Missing */");
				} else {
					i = index + 1;
				}
			} else {
				buffer += character;
			}
			break;

		case "{":
			if (state === "selector") {
				styleRule.selectorText = buffer.trim();
				buffer = "";
				state = "name";
			}
			break;

		case ":":
			if (state === "name") {
				name = buffer.trim();
				buffer = "";
				state = "value";
			} else {
				buffer += character;
			}
			break;

		case "!":
			if (state === "value" && ruleText.indexOf("!important", i) === i) {
				priority = "important";
				i += "important".length;
			} else {
				buffer += character;
			}
			break;

		case ";":
			if (state === "value") {
				styleRule.style.setProperty(name, buffer.trim(), priority);
				priority = "";
				buffer = "";
				state = "name";
			} else {
				buffer += character;
			}
			break;

		case "}":
			if (state === "value") {
				styleRule.style.setProperty(name, buffer.trim(), priority);
				priority = "";
				buffer = "";
			} else if (state === "name") {
				break;
			} else {
				buffer += character;
			}
			state = "selector";
			break;

		default:
			buffer += character;
			break;

		}
	}

	return styleRule;

};


//.CommonJS
exports.CSSStyleRule = CSSOM.CSSStyleRule;
///CommonJS


/***/ }),

/***/ "./node_modules/linkedom/node_modules/cssom/lib/CSSStyleSheet.js":
/*!***********************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/cssom/lib/CSSStyleSheet.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

//.CommonJS
var CSSOM = {
	StyleSheet: (__webpack_require__(/*! ./StyleSheet */ "./node_modules/linkedom/node_modules/cssom/lib/StyleSheet.js").StyleSheet),
	CSSStyleRule: (__webpack_require__(/*! ./CSSStyleRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSStyleRule.js").CSSStyleRule)
};
///CommonJS


/**
 * @constructor
 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet
 */
CSSOM.CSSStyleSheet = function CSSStyleSheet() {
	CSSOM.StyleSheet.call(this);
	this.cssRules = [];
};


CSSOM.CSSStyleSheet.prototype = new CSSOM.StyleSheet();
CSSOM.CSSStyleSheet.prototype.constructor = CSSOM.CSSStyleSheet;


/**
 * Used to insert a new rule into the style sheet. The new rule now becomes part of the cascade.
 *
 *   sheet = new Sheet("body {margin: 0}")
 *   sheet.toString()
 *   -> "body{margin:0;}"
 *   sheet.insertRule("img {border: none}", 0)
 *   -> 0
 *   sheet.toString()
 *   -> "img{border:none;}body{margin:0;}"
 *
 * @param {string} rule
 * @param {number} index
 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet-insertRule
 * @return {number} The index within the style sheet's rule collection of the newly inserted rule.
 */
CSSOM.CSSStyleSheet.prototype.insertRule = function(rule, index) {
	if (index < 0 || index > this.cssRules.length) {
		throw new RangeError("INDEX_SIZE_ERR");
	}
	var cssRule = CSSOM.parse(rule).cssRules[0];
	cssRule.parentStyleSheet = this;
	this.cssRules.splice(index, 0, cssRule);
	return index;
};


/**
 * Used to delete a rule from the style sheet.
 *
 *   sheet = new Sheet("img{border:none} body{margin:0}")
 *   sheet.toString()
 *   -> "img{border:none;}body{margin:0;}"
 *   sheet.deleteRule(0)
 *   sheet.toString()
 *   -> "body{margin:0;}"
 *
 * @param {number} index within the style sheet's rule list of the rule to remove.
 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet-deleteRule
 */
CSSOM.CSSStyleSheet.prototype.deleteRule = function(index) {
	if (index < 0 || index >= this.cssRules.length) {
		throw new RangeError("INDEX_SIZE_ERR");
	}
	this.cssRules.splice(index, 1);
};


/**
 * NON-STANDARD
 * @return {string} serialize stylesheet
 */
CSSOM.CSSStyleSheet.prototype.toString = function() {
	var result = "";
	var rules = this.cssRules;
	for (var i=0; i<rules.length; i++) {
		result += rules[i].cssText + "\n";
	}
	return result;
};


//.CommonJS
exports.CSSStyleSheet = CSSOM.CSSStyleSheet;
CSSOM.parse = (__webpack_require__(/*! ./parse */ "./node_modules/linkedom/node_modules/cssom/lib/parse.js").parse); // Cannot be included sooner due to the mutual dependency between parse.js and CSSStyleSheet.js
///CommonJS


/***/ }),

/***/ "./node_modules/linkedom/node_modules/cssom/lib/CSSSupportsRule.js":
/*!*************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/cssom/lib/CSSSupportsRule.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

//.CommonJS
var CSSOM = {
  CSSRule: (__webpack_require__(/*! ./CSSRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSRule.js").CSSRule),
  CSSGroupingRule: (__webpack_require__(/*! ./CSSGroupingRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSGroupingRule.js").CSSGroupingRule),
  CSSConditionRule: (__webpack_require__(/*! ./CSSConditionRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSConditionRule.js").CSSConditionRule)
};
///CommonJS


/**
 * @constructor
 * @see https://drafts.csswg.org/css-conditional-3/#the-csssupportsrule-interface
 */
CSSOM.CSSSupportsRule = function CSSSupportsRule() {
  CSSOM.CSSConditionRule.call(this);
};

CSSOM.CSSSupportsRule.prototype = new CSSOM.CSSConditionRule();
CSSOM.CSSSupportsRule.prototype.constructor = CSSOM.CSSSupportsRule;
CSSOM.CSSSupportsRule.prototype.type = 12;

Object.defineProperty(CSSOM.CSSSupportsRule.prototype, "cssText", {
  get: function() {
    var cssTexts = [];

    for (var i = 0, length = this.cssRules.length; i < length; i++) {
      cssTexts.push(this.cssRules[i].cssText);
    }

    return "@supports " + this.conditionText + " {" + cssTexts.join("") + "}";
  }
});

//.CommonJS
exports.CSSSupportsRule = CSSOM.CSSSupportsRule;
///CommonJS


/***/ }),

/***/ "./node_modules/linkedom/node_modules/cssom/lib/CSSValue.js":
/*!******************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/cssom/lib/CSSValue.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports) {

//.CommonJS
var CSSOM = {};
///CommonJS


/**
 * @constructor
 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSValue
 *
 * TODO: add if needed
 */
CSSOM.CSSValue = function CSSValue() {
};

CSSOM.CSSValue.prototype = {
	constructor: CSSOM.CSSValue,

	// @see: http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSValue
	set cssText(text) {
		var name = this._getConstructorName();

		throw new Error('DOMException: property "cssText" of "' + name + '" is readonly and can not be replaced with "' + text + '"!');
	},

	get cssText() {
		var name = this._getConstructorName();

		throw new Error('getter "cssText" of "' + name + '" is not implemented!');
	},

	_getConstructorName: function() {
		var s = this.constructor.toString(),
				c = s.match(/function\s([^\(]+)/),
				name = c[1];

		return name;
	}
};


//.CommonJS
exports.CSSValue = CSSOM.CSSValue;
///CommonJS


/***/ }),

/***/ "./node_modules/linkedom/node_modules/cssom/lib/CSSValueExpression.js":
/*!****************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/cssom/lib/CSSValueExpression.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

//.CommonJS
var CSSOM = {
	CSSValue: (__webpack_require__(/*! ./CSSValue */ "./node_modules/linkedom/node_modules/cssom/lib/CSSValue.js").CSSValue)
};
///CommonJS


/**
 * @constructor
 * @see http://msdn.microsoft.com/en-us/library/ms537634(v=vs.85).aspx
 *
 */
CSSOM.CSSValueExpression = function CSSValueExpression(token, idx) {
	this._token = token;
	this._idx = idx;
};

CSSOM.CSSValueExpression.prototype = new CSSOM.CSSValue();
CSSOM.CSSValueExpression.prototype.constructor = CSSOM.CSSValueExpression;

/**
 * parse css expression() value
 *
 * @return {Object}
 *         - error:
 *         or
 *         - idx:
 *         - expression:
 *
 * Example:
 *
 * .selector {
 *		zoom: expression(documentElement.clientWidth > 1000 ? '1000px' : 'auto');
 * }
 */
CSSOM.CSSValueExpression.prototype.parse = function() {
	var token = this._token,
			idx = this._idx;

	var character = '',
			expression = '',
			error = '',
			info,
			paren = [];


	for (; ; ++idx) {
		character = token.charAt(idx);

		// end of token
		if (character === '') {
			error = 'css expression error: unfinished expression!';
			break;
		}

		switch(character) {
			case '(':
				paren.push(character);
				expression += character;
				break;

			case ')':
				paren.pop(character);
				expression += character;
				break;

			case '/':
				if ((info = this._parseJSComment(token, idx))) { // comment?
					if (info.error) {
						error = 'css expression error: unfinished comment in expression!';
					} else {
						idx = info.idx;
						// ignore the comment
					}
				} else if ((info = this._parseJSRexExp(token, idx))) { // regexp
					idx = info.idx;
					expression += info.text;
				} else { // other
					expression += character;
				}
				break;

			case "'":
			case '"':
				info = this._parseJSString(token, idx, character);
				if (info) { // string
					idx = info.idx;
					expression += info.text;
				} else {
					expression += character;
				}
				break;

			default:
				expression += character;
				break;
		}

		if (error) {
			break;
		}

		// end of expression
		if (paren.length === 0) {
			break;
		}
	}

	var ret;
	if (error) {
		ret = {
			error: error
		};
	} else {
		ret = {
			idx: idx,
			expression: expression
		};
	}

	return ret;
};


/**
 *
 * @return {Object|false}
 *          - idx:
 *          - text:
 *          or
 *          - error:
 *          or
 *          false
 *
 */
CSSOM.CSSValueExpression.prototype._parseJSComment = function(token, idx) {
	var nextChar = token.charAt(idx + 1),
			text;

	if (nextChar === '/' || nextChar === '*') {
		var startIdx = idx,
				endIdx,
				commentEndChar;

		if (nextChar === '/') { // line comment
			commentEndChar = '\n';
		} else if (nextChar === '*') { // block comment
			commentEndChar = '*/';
		}

		endIdx = token.indexOf(commentEndChar, startIdx + 1 + 1);
		if (endIdx !== -1) {
			endIdx = endIdx + commentEndChar.length - 1;
			text = token.substring(idx, endIdx + 1);
			return {
				idx: endIdx,
				text: text
			};
		} else {
			var error = 'css expression error: unfinished comment in expression!';
			return {
				error: error
			};
		}
	} else {
		return false;
	}
};


/**
 *
 * @return {Object|false}
 *					- idx:
 *					- text:
 *					or 
 *					false
 *
 */
CSSOM.CSSValueExpression.prototype._parseJSString = function(token, idx, sep) {
	var endIdx = this._findMatchedIdx(token, idx, sep),
			text;

	if (endIdx === -1) {
		return false;
	} else {
		text = token.substring(idx, endIdx + sep.length);

		return {
			idx: endIdx,
			text: text
		};
	}
};


/**
 * parse regexp in css expression
 *
 * @return {Object|false}
 *				- idx:
 *				- regExp:
 *				or 
 *				false
 */

/*

all legal RegExp
 
/a/
(/a/)
[/a/]
[12, /a/]

!/a/

+/a/
-/a/
* /a/
/ /a/
%/a/

===/a/
!==/a/
==/a/
!=/a/
>/a/
>=/a/
</a/
<=/a/

&/a/
|/a/
^/a/
~/a/
<</a/
>>/a/
>>>/a/

&&/a/
||/a/
?/a/
=/a/
,/a/

		delete /a/
				in /a/
instanceof /a/
				new /a/
		typeof /a/
			void /a/

*/
CSSOM.CSSValueExpression.prototype._parseJSRexExp = function(token, idx) {
	var before = token.substring(0, idx).replace(/\s+$/, ""),
			legalRegx = [
				/^$/,
				/\($/,
				/\[$/,
				/\!$/,
				/\+$/,
				/\-$/,
				/\*$/,
				/\/\s+/,
				/\%$/,
				/\=$/,
				/\>$/,
				/<$/,
				/\&$/,
				/\|$/,
				/\^$/,
				/\~$/,
				/\?$/,
				/\,$/,
				/delete$/,
				/in$/,
				/instanceof$/,
				/new$/,
				/typeof$/,
				/void$/
			];

	var isLegal = legalRegx.some(function(reg) {
		return reg.test(before);
	});

	if (!isLegal) {
		return false;
	} else {
		var sep = '/';

		// same logic as string
		return this._parseJSString(token, idx, sep);
	}
};


/**
 *
 * find next sep(same line) index in `token`
 *
 * @return {Number}
 *
 */
CSSOM.CSSValueExpression.prototype._findMatchedIdx = function(token, idx, sep) {
	var startIdx = idx,
			endIdx;

	var NOT_FOUND = -1;

	while(true) {
		endIdx = token.indexOf(sep, startIdx + 1);

		if (endIdx === -1) { // not found
			endIdx = NOT_FOUND;
			break;
		} else {
			var text = token.substring(idx + 1, endIdx),
					matched = text.match(/\\+$/);
			if (!matched || matched[0] % 2 === 0) { // not escaped
				break;
			} else {
				startIdx = endIdx;
			}
		}
	}

	// boundary must be in the same line(js sting or regexp)
	var nextNewLineIdx = token.indexOf('\n', idx + 1);
	if (nextNewLineIdx < endIdx) {
		endIdx = NOT_FOUND;
	}


	return endIdx;
};




//.CommonJS
exports.CSSValueExpression = CSSOM.CSSValueExpression;
///CommonJS


/***/ }),

/***/ "./node_modules/linkedom/node_modules/cssom/lib/MatcherList.js":
/*!*********************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/cssom/lib/MatcherList.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports) {

//.CommonJS
var CSSOM = {};
///CommonJS


/**
 * @constructor
 * @see https://developer.mozilla.org/en/CSS/@-moz-document
 */
CSSOM.MatcherList = function MatcherList(){
    this.length = 0;
};

CSSOM.MatcherList.prototype = {

    constructor: CSSOM.MatcherList,

    /**
     * @return {string}
     */
    get matcherText() {
        return Array.prototype.join.call(this, ", ");
    },

    /**
     * @param {string} value
     */
    set matcherText(value) {
        // just a temporary solution, actually it may be wrong by just split the value with ',', because a url can include ','.
        var values = value.split(",");
        var length = this.length = values.length;
        for (var i=0; i<length; i++) {
            this[i] = values[i].trim();
        }
    },

    /**
     * @param {string} matcher
     */
    appendMatcher: function(matcher) {
        if (Array.prototype.indexOf.call(this, matcher) === -1) {
            this[this.length] = matcher;
            this.length++;
        }
    },

    /**
     * @param {string} matcher
     */
    deleteMatcher: function(matcher) {
        var index = Array.prototype.indexOf.call(this, matcher);
        if (index !== -1) {
            Array.prototype.splice.call(this, index, 1);
        }
    }

};


//.CommonJS
exports.MatcherList = CSSOM.MatcherList;
///CommonJS


/***/ }),

/***/ "./node_modules/linkedom/node_modules/cssom/lib/MediaList.js":
/*!*******************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/cssom/lib/MediaList.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports) {

//.CommonJS
var CSSOM = {};
///CommonJS


/**
 * @constructor
 * @see http://dev.w3.org/csswg/cssom/#the-medialist-interface
 */
CSSOM.MediaList = function MediaList(){
	this.length = 0;
};

CSSOM.MediaList.prototype = {

	constructor: CSSOM.MediaList,

	/**
	 * @return {string}
	 */
	get mediaText() {
		return Array.prototype.join.call(this, ", ");
	},

	/**
	 * @param {string} value
	 */
	set mediaText(value) {
		var values = value.split(",");
		var length = this.length = values.length;
		for (var i=0; i<length; i++) {
			this[i] = values[i].trim();
		}
	},

	/**
	 * @param {string} medium
	 */
	appendMedium: function(medium) {
		if (Array.prototype.indexOf.call(this, medium) === -1) {
			this[this.length] = medium;
			this.length++;
		}
	},

	/**
	 * @param {string} medium
	 */
	deleteMedium: function(medium) {
		var index = Array.prototype.indexOf.call(this, medium);
		if (index !== -1) {
			Array.prototype.splice.call(this, index, 1);
		}
	}

};


//.CommonJS
exports.MediaList = CSSOM.MediaList;
///CommonJS


/***/ }),

/***/ "./node_modules/linkedom/node_modules/cssom/lib/StyleSheet.js":
/*!********************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/cssom/lib/StyleSheet.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports) {

//.CommonJS
var CSSOM = {};
///CommonJS


/**
 * @constructor
 * @see http://dev.w3.org/csswg/cssom/#the-stylesheet-interface
 */
CSSOM.StyleSheet = function StyleSheet() {
	this.parentStyleSheet = null;
};


//.CommonJS
exports.StyleSheet = CSSOM.StyleSheet;
///CommonJS


/***/ }),

/***/ "./node_modules/linkedom/node_modules/cssom/lib/clone.js":
/*!***************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/cssom/lib/clone.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

//.CommonJS
var CSSOM = {
	CSSStyleSheet: (__webpack_require__(/*! ./CSSStyleSheet */ "./node_modules/linkedom/node_modules/cssom/lib/CSSStyleSheet.js").CSSStyleSheet),
	CSSRule: (__webpack_require__(/*! ./CSSRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSRule.js").CSSRule),
	CSSStyleRule: (__webpack_require__(/*! ./CSSStyleRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSStyleRule.js").CSSStyleRule),
	CSSGroupingRule: (__webpack_require__(/*! ./CSSGroupingRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSGroupingRule.js").CSSGroupingRule),
	CSSConditionRule: (__webpack_require__(/*! ./CSSConditionRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSConditionRule.js").CSSConditionRule),
	CSSMediaRule: (__webpack_require__(/*! ./CSSMediaRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSMediaRule.js").CSSMediaRule),
	CSSSupportsRule: (__webpack_require__(/*! ./CSSSupportsRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSSupportsRule.js").CSSSupportsRule),
	CSSStyleDeclaration: (__webpack_require__(/*! ./CSSStyleDeclaration */ "./node_modules/linkedom/node_modules/cssom/lib/CSSStyleDeclaration.js").CSSStyleDeclaration),
	CSSKeyframeRule: (__webpack_require__(/*! ./CSSKeyframeRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSKeyframeRule.js").CSSKeyframeRule),
	CSSKeyframesRule: (__webpack_require__(/*! ./CSSKeyframesRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSKeyframesRule.js").CSSKeyframesRule)
};
///CommonJS


/**
 * Produces a deep copy of stylesheet ‚Äî the instance variables of stylesheet are copied recursively.
 * @param {CSSStyleSheet|CSSOM.CSSStyleSheet} stylesheet
 * @nosideeffects
 * @return {CSSOM.CSSStyleSheet}
 */
CSSOM.clone = function clone(stylesheet) {

	var cloned = new CSSOM.CSSStyleSheet();

	var rules = stylesheet.cssRules;
	if (!rules) {
		return cloned;
	}

	for (var i = 0, rulesLength = rules.length; i < rulesLength; i++) {
		var rule = rules[i];
		var ruleClone = cloned.cssRules[i] = new rule.constructor();

		var style = rule.style;
		if (style) {
			var styleClone = ruleClone.style = new CSSOM.CSSStyleDeclaration();
			for (var j = 0, styleLength = style.length; j < styleLength; j++) {
				var name = styleClone[j] = style[j];
				styleClone[name] = style[name];
				styleClone._importants[name] = style.getPropertyPriority(name);
			}
			styleClone.length = style.length;
		}

		if (rule.hasOwnProperty('keyText')) {
			ruleClone.keyText = rule.keyText;
		}

		if (rule.hasOwnProperty('selectorText')) {
			ruleClone.selectorText = rule.selectorText;
		}

		if (rule.hasOwnProperty('mediaText')) {
			ruleClone.mediaText = rule.mediaText;
		}

		if (rule.hasOwnProperty('conditionText')) {
			ruleClone.conditionText = rule.conditionText;
		}

		if (rule.hasOwnProperty('cssRules')) {
			ruleClone.cssRules = clone(rule).cssRules;
		}
	}

	return cloned;

};

//.CommonJS
exports.clone = CSSOM.clone;
///CommonJS


/***/ }),

/***/ "./node_modules/linkedom/node_modules/cssom/lib/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/cssom/lib/index.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


exports.CSSStyleDeclaration = __webpack_require__(/*! ./CSSStyleDeclaration */ "./node_modules/linkedom/node_modules/cssom/lib/CSSStyleDeclaration.js").CSSStyleDeclaration;
exports.CSSRule = __webpack_require__(/*! ./CSSRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSRule.js").CSSRule;
exports.CSSGroupingRule = __webpack_require__(/*! ./CSSGroupingRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSGroupingRule.js").CSSGroupingRule;
exports.CSSConditionRule = __webpack_require__(/*! ./CSSConditionRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSConditionRule.js").CSSConditionRule;
exports.CSSStyleRule = __webpack_require__(/*! ./CSSStyleRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSStyleRule.js").CSSStyleRule;
exports.MediaList = __webpack_require__(/*! ./MediaList */ "./node_modules/linkedom/node_modules/cssom/lib/MediaList.js").MediaList;
exports.CSSMediaRule = __webpack_require__(/*! ./CSSMediaRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSMediaRule.js").CSSMediaRule;
exports.CSSSupportsRule = __webpack_require__(/*! ./CSSSupportsRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSSupportsRule.js").CSSSupportsRule;
exports.CSSImportRule = __webpack_require__(/*! ./CSSImportRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSImportRule.js").CSSImportRule;
exports.CSSFontFaceRule = __webpack_require__(/*! ./CSSFontFaceRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSFontFaceRule.js").CSSFontFaceRule;
exports.CSSHostRule = __webpack_require__(/*! ./CSSHostRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSHostRule.js").CSSHostRule;
exports.StyleSheet = __webpack_require__(/*! ./StyleSheet */ "./node_modules/linkedom/node_modules/cssom/lib/StyleSheet.js").StyleSheet;
exports.CSSStyleSheet = __webpack_require__(/*! ./CSSStyleSheet */ "./node_modules/linkedom/node_modules/cssom/lib/CSSStyleSheet.js").CSSStyleSheet;
exports.CSSKeyframesRule = __webpack_require__(/*! ./CSSKeyframesRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSKeyframesRule.js").CSSKeyframesRule;
exports.CSSKeyframeRule = __webpack_require__(/*! ./CSSKeyframeRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSKeyframeRule.js").CSSKeyframeRule;
exports.MatcherList = __webpack_require__(/*! ./MatcherList */ "./node_modules/linkedom/node_modules/cssom/lib/MatcherList.js").MatcherList;
exports.CSSDocumentRule = __webpack_require__(/*! ./CSSDocumentRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSDocumentRule.js").CSSDocumentRule;
exports.CSSValue = __webpack_require__(/*! ./CSSValue */ "./node_modules/linkedom/node_modules/cssom/lib/CSSValue.js").CSSValue;
exports.CSSValueExpression = __webpack_require__(/*! ./CSSValueExpression */ "./node_modules/linkedom/node_modules/cssom/lib/CSSValueExpression.js").CSSValueExpression;
exports.parse = __webpack_require__(/*! ./parse */ "./node_modules/linkedom/node_modules/cssom/lib/parse.js").parse;
exports.clone = __webpack_require__(/*! ./clone */ "./node_modules/linkedom/node_modules/cssom/lib/clone.js").clone;


/***/ }),

/***/ "./node_modules/linkedom/node_modules/cssom/lib/parse.js":
/*!***************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/cssom/lib/parse.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

//.CommonJS
var CSSOM = {};
///CommonJS


/**
 * @param {string} token
 */
CSSOM.parse = function parse(token) {

	var i = 0;

	/**
		"before-selector" or
		"selector" or
		"atRule" or
		"atBlock" or
		"conditionBlock" or
		"before-name" or
		"name" or
		"before-value" or
		"value"
	*/
	var state = "before-selector";

	var index;
	var buffer = "";
	var valueParenthesisDepth = 0;

	var SIGNIFICANT_WHITESPACE = {
		"selector": true,
		"value": true,
		"value-parenthesis": true,
		"atRule": true,
		"importRule-begin": true,
		"importRule": true,
		"atBlock": true,
		"conditionBlock": true,
		'documentRule-begin': true
	};

	var styleSheet = new CSSOM.CSSStyleSheet();

	// @type CSSStyleSheet|CSSMediaRule|CSSSupportsRule|CSSFontFaceRule|CSSKeyframesRule|CSSDocumentRule
	var currentScope = styleSheet;

	// @type CSSMediaRule|CSSSupportsRule|CSSKeyframesRule|CSSDocumentRule
	var parentRule;

	var ancestorRules = [];
	var hasAncestors = false;
	var prevScope;

	var name, priority="", styleRule, mediaRule, supportsRule, importRule, fontFaceRule, keyframesRule, documentRule, hostRule;

	var atKeyframesRegExp = /@(-(?:\w+-)+)?keyframes/g;

	var parseError = function(message) {
		var lines = token.substring(0, i).split('\n');
		var lineCount = lines.length;
		var charCount = lines.pop().length + 1;
		var error = new Error(message + ' (line ' + lineCount + ', char ' + charCount + ')');
		error.line = lineCount;
		/* jshint sub : true */
		error['char'] = charCount;
		error.styleSheet = styleSheet;
		throw error;
	};

	for (var character; (character = token.charAt(i)); i++) {

		switch (character) {

		case " ":
		case "\t":
		case "\r":
		case "\n":
		case "\f":
			if (SIGNIFICANT_WHITESPACE[state]) {
				buffer += character;
			}
			break;

		// String
		case '"':
			index = i + 1;
			do {
				index = token.indexOf('"', index) + 1;
				if (!index) {
					parseError('Unmatched "');
				}
			} while (token[index - 2] === '\\');
			buffer += token.slice(i, index);
			i = index - 1;
			switch (state) {
				case 'before-value':
					state = 'value';
					break;
				case 'importRule-begin':
					state = 'importRule';
					break;
			}
			break;

		case "'":
			index = i + 1;
			do {
				index = token.indexOf("'", index) + 1;
				if (!index) {
					parseError("Unmatched '");
				}
			} while (token[index - 2] === '\\');
			buffer += token.slice(i, index);
			i = index - 1;
			switch (state) {
				case 'before-value':
					state = 'value';
					break;
				case 'importRule-begin':
					state = 'importRule';
					break;
			}
			break;

		// Comment
		case "/":
			if (token.charAt(i + 1) === "*") {
				i += 2;
				index = token.indexOf("*/", i);
				if (index === -1) {
					parseError("Missing */");
				} else {
					i = index + 1;
				}
			} else {
				buffer += character;
			}
			if (state === "importRule-begin") {
				buffer += " ";
				state = "importRule";
			}
			break;

		// At-rule
		case "@":
			if (token.indexOf("@-moz-document", i) === i) {
				state = "documentRule-begin";
				documentRule = new CSSOM.CSSDocumentRule();
				documentRule.__starts = i;
				i += "-moz-document".length;
				buffer = "";
				break;
			} else if (token.indexOf("@media", i) === i) {
				state = "atBlock";
				mediaRule = new CSSOM.CSSMediaRule();
				mediaRule.__starts = i;
				i += "media".length;
				buffer = "";
				break;
			} else if (token.indexOf("@supports", i) === i) {
				state = "conditionBlock";
				supportsRule = new CSSOM.CSSSupportsRule();
				supportsRule.__starts = i;
				i += "supports".length;
				buffer = "";
				break;
			} else if (token.indexOf("@host", i) === i) {
				state = "hostRule-begin";
				i += "host".length;
				hostRule = new CSSOM.CSSHostRule();
				hostRule.__starts = i;
				buffer = "";
				break;
			} else if (token.indexOf("@import", i) === i) {
				state = "importRule-begin";
				i += "import".length;
				buffer += "@import";
				break;
			} else if (token.indexOf("@font-face", i) === i) {
				state = "fontFaceRule-begin";
				i += "font-face".length;
				fontFaceRule = new CSSOM.CSSFontFaceRule();
				fontFaceRule.__starts = i;
				buffer = "";
				break;
			} else {
				atKeyframesRegExp.lastIndex = i;
				var matchKeyframes = atKeyframesRegExp.exec(token);
				if (matchKeyframes && matchKeyframes.index === i) {
					state = "keyframesRule-begin";
					keyframesRule = new CSSOM.CSSKeyframesRule();
					keyframesRule.__starts = i;
					keyframesRule._vendorPrefix = matchKeyframes[1]; // Will come out as undefined if no prefix was found
					i += matchKeyframes[0].length - 1;
					buffer = "";
					break;
				} else if (state === "selector") {
					state = "atRule";
				}
			}
			buffer += character;
			break;

		case "{":
			if (state === "selector" || state === "atRule") {
				styleRule.selectorText = buffer.trim();
				styleRule.style.__starts = i;
				buffer = "";
				state = "before-name";
			} else if (state === "atBlock") {
				mediaRule.media.mediaText = buffer.trim();

				if (parentRule) {
					ancestorRules.push(parentRule);
				}

				currentScope = parentRule = mediaRule;
				mediaRule.parentStyleSheet = styleSheet;
				buffer = "";
				state = "before-selector";
			} else if (state === "conditionBlock") {
				supportsRule.conditionText = buffer.trim();

				if (parentRule) {
					ancestorRules.push(parentRule);
				}

				currentScope = parentRule = supportsRule;
				supportsRule.parentStyleSheet = styleSheet;
				buffer = "";
				state = "before-selector";
			} else if (state === "hostRule-begin") {
				if (parentRule) {
					ancestorRules.push(parentRule);
				}

				currentScope = parentRule = hostRule;
				hostRule.parentStyleSheet = styleSheet;
				buffer = "";
				state = "before-selector";
			} else if (state === "fontFaceRule-begin") {
				if (parentRule) {
					fontFaceRule.parentRule = parentRule;
				}
				fontFaceRule.parentStyleSheet = styleSheet;
				styleRule = fontFaceRule;
				buffer = "";
				state = "before-name";
			} else if (state === "keyframesRule-begin") {
				keyframesRule.name = buffer.trim();
				if (parentRule) {
					ancestorRules.push(parentRule);
					keyframesRule.parentRule = parentRule;
				}
				keyframesRule.parentStyleSheet = styleSheet;
				currentScope = parentRule = keyframesRule;
				buffer = "";
				state = "keyframeRule-begin";
			} else if (state === "keyframeRule-begin") {
				styleRule = new CSSOM.CSSKeyframeRule();
				styleRule.keyText = buffer.trim();
				styleRule.__starts = i;
				buffer = "";
				state = "before-name";
			} else if (state === "documentRule-begin") {
				// FIXME: what if this '{' is in the url text of the match function?
				documentRule.matcher.matcherText = buffer.trim();
				if (parentRule) {
					ancestorRules.push(parentRule);
					documentRule.parentRule = parentRule;
				}
				currentScope = parentRule = documentRule;
				documentRule.parentStyleSheet = styleSheet;
				buffer = "";
				state = "before-selector";
			}
			break;

		case ":":
			if (state === "name") {
				name = buffer.trim();
				buffer = "";
				state = "before-value";
			} else {
				buffer += character;
			}
			break;

		case "(":
			if (state === 'value') {
				// ie css expression mode
				if (buffer.trim() === 'expression') {
					var info = (new CSSOM.CSSValueExpression(token, i)).parse();

					if (info.error) {
						parseError(info.error);
					} else {
						buffer += info.expression;
						i = info.idx;
					}
				} else {
					state = 'value-parenthesis';
					//always ensure this is reset to 1 on transition
					//from value to value-parenthesis
					valueParenthesisDepth = 1;
					buffer += character;
				}
			} else if (state === 'value-parenthesis') {
				valueParenthesisDepth++;
				buffer += character;
			} else {
				buffer += character;
			}
			break;

		case ")":
			if (state === 'value-parenthesis') {
				valueParenthesisDepth--;
				if (valueParenthesisDepth === 0) state = 'value';
			}
			buffer += character;
			break;

		case "!":
			if (state === "value" && token.indexOf("!important", i) === i) {
				priority = "important";
				i += "important".length;
			} else {
				buffer += character;
			}
			break;

		case ";":
			switch (state) {
				case "value":
					styleRule.style.setProperty(name, buffer.trim(), priority);
					priority = "";
					buffer = "";
					state = "before-name";
					break;
				case "atRule":
					buffer = "";
					state = "before-selector";
					break;
				case "importRule":
					importRule = new CSSOM.CSSImportRule();
					importRule.parentStyleSheet = importRule.styleSheet.parentStyleSheet = styleSheet;
					importRule.cssText = buffer + character;
					styleSheet.cssRules.push(importRule);
					buffer = "";
					state = "before-selector";
					break;
				default:
					buffer += character;
					break;
			}
			break;

		case "}":
			switch (state) {
				case "value":
					styleRule.style.setProperty(name, buffer.trim(), priority);
					priority = "";
					/* falls through */
				case "before-name":
				case "name":
					styleRule.__ends = i + 1;
					if (parentRule) {
						styleRule.parentRule = parentRule;
					}
					styleRule.parentStyleSheet = styleSheet;
					currentScope.cssRules.push(styleRule);
					buffer = "";
					if (currentScope.constructor === CSSOM.CSSKeyframesRule) {
						state = "keyframeRule-begin";
					} else {
						state = "before-selector";
					}
					break;
				case "keyframeRule-begin":
				case "before-selector":
				case "selector":
					// End of media/supports/document rule.
					if (!parentRule) {
						parseError("Unexpected }");
					}

					// Handle rules nested in @media or @supports
					hasAncestors = ancestorRules.length > 0;

					while (ancestorRules.length > 0) {
						parentRule = ancestorRules.pop();

						if (
							parentRule.constructor.name === "CSSMediaRule"
							|| parentRule.constructor.name === "CSSSupportsRule"
						) {
							prevScope = currentScope;
							currentScope = parentRule;
							currentScope.cssRules.push(prevScope);
							break;
						}

						if (ancestorRules.length === 0) {
							hasAncestors = false;
						}
					}
					
					if (!hasAncestors) {
						currentScope.__ends = i + 1;
						styleSheet.cssRules.push(currentScope);
						currentScope = styleSheet;
						parentRule = null;
					}

					buffer = "";
					state = "before-selector";
					break;
			}
			break;

		default:
			switch (state) {
				case "before-selector":
					state = "selector";
					styleRule = new CSSOM.CSSStyleRule();
					styleRule.__starts = i;
					break;
				case "before-name":
					state = "name";
					break;
				case "before-value":
					state = "value";
					break;
				case "importRule-begin":
					state = "importRule";
					break;
			}
			buffer += character;
			break;
		}
	}

	return styleSheet;
};


//.CommonJS
exports.parse = CSSOM.parse;
// The following modules cannot be included sooner due to the mutual dependency with parse.js
CSSOM.CSSStyleSheet = (__webpack_require__(/*! ./CSSStyleSheet */ "./node_modules/linkedom/node_modules/cssom/lib/CSSStyleSheet.js").CSSStyleSheet);
CSSOM.CSSStyleRule = (__webpack_require__(/*! ./CSSStyleRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSStyleRule.js").CSSStyleRule);
CSSOM.CSSImportRule = (__webpack_require__(/*! ./CSSImportRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSImportRule.js").CSSImportRule);
CSSOM.CSSGroupingRule = (__webpack_require__(/*! ./CSSGroupingRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSGroupingRule.js").CSSGroupingRule);
CSSOM.CSSMediaRule = (__webpack_require__(/*! ./CSSMediaRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSMediaRule.js").CSSMediaRule);
CSSOM.CSSConditionRule = (__webpack_require__(/*! ./CSSConditionRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSConditionRule.js").CSSConditionRule);
CSSOM.CSSSupportsRule = (__webpack_require__(/*! ./CSSSupportsRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSSupportsRule.js").CSSSupportsRule);
CSSOM.CSSFontFaceRule = (__webpack_require__(/*! ./CSSFontFaceRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSFontFaceRule.js").CSSFontFaceRule);
CSSOM.CSSHostRule = (__webpack_require__(/*! ./CSSHostRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSHostRule.js").CSSHostRule);
CSSOM.CSSStyleDeclaration = (__webpack_require__(/*! ./CSSStyleDeclaration */ "./node_modules/linkedom/node_modules/cssom/lib/CSSStyleDeclaration.js").CSSStyleDeclaration);
CSSOM.CSSKeyframeRule = (__webpack_require__(/*! ./CSSKeyframeRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSKeyframeRule.js").CSSKeyframeRule);
CSSOM.CSSKeyframesRule = (__webpack_require__(/*! ./CSSKeyframesRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSKeyframesRule.js").CSSKeyframesRule);
CSSOM.CSSValueExpression = (__webpack_require__(/*! ./CSSValueExpression */ "./node_modules/linkedom/node_modules/cssom/lib/CSSValueExpression.js").CSSValueExpression);
CSSOM.CSSDocumentRule = (__webpack_require__(/*! ./CSSDocumentRule */ "./node_modules/linkedom/node_modules/cssom/lib/CSSDocumentRule.js").CSSDocumentRule);
///CommonJS


/***/ }),

/***/ "./node_modules/linkedom/commonjs/canvas-shim.cjs":
/*!********************************************************!*\
  !*** ./node_modules/linkedom/commonjs/canvas-shim.cjs ***!
  \********************************************************/
/***/ (function(module) {

class Canvas {
  constructor(width, height) {
    this.width = width;
    this.height = height;
  }
  getContext() {
    return null;
  }
  toDataURL() {
    return '';
  }
}

module.exports = {
  createCanvas: (width, height) => new Canvas(width, height),
};


/***/ }),

/***/ "./node_modules/linkedom/commonjs/canvas.cjs":
/*!***************************************************!*\
  !*** ./node_modules/linkedom/commonjs/canvas.cjs ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* c8 ignore start */
try {
  module.exports = Object(function webpackMissingModule() { var e = new Error("Cannot find module 'canvas'"); e.code = 'MODULE_NOT_FOUND'; throw e; }());
} catch (fallback) {
  module.exports = __webpack_require__(/*! ./canvas-shim.cjs */ "./node_modules/linkedom/commonjs/canvas-shim.cjs");
}
/* c8 ignore stop */


/***/ }),

/***/ "./node_modules/linkedom/commonjs/perf_hooks.cjs":
/*!*******************************************************!*\
  !*** ./node_modules/linkedom/commonjs/perf_hooks.cjs ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

/* c8 ignore start */
try {
  const {performance} = __webpack_require__(Object(function webpackMissingModule() { var e = new Error("Cannot find module 'perf_hooks'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
  exports.performance = performance;
}
catch (fallback) {
  exports.performance = {now() { return +new Date; }};
}
/* c8 ignore stop */


/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/checkPrivateRedeclaration.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/checkPrivateRedeclaration.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _checkPrivateRedeclaration; }
/* harmony export */ });
function _checkPrivateRedeclaration(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/classApplyDescriptorGet.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/classApplyDescriptorGet.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _classApplyDescriptorGet; }
/* harmony export */ });
function _classApplyDescriptorGet(receiver, descriptor) {
  if (descriptor.get) {
    return descriptor.get.call(receiver);
  }
  return descriptor.value;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/classApplyDescriptorSet.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/classApplyDescriptorSet.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _classApplyDescriptorSet; }
/* harmony export */ });
function _classApplyDescriptorSet(receiver, descriptor, value) {
  if (descriptor.set) {
    descriptor.set.call(receiver, value);
  } else {
    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }
    descriptor.value = value;
  }
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/classExtractFieldDescriptor.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/classExtractFieldDescriptor.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _classExtractFieldDescriptor; }
/* harmony export */ });
function _classExtractFieldDescriptor(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to " + action + " private field on non-instance");
  }
  return privateMap.get(receiver);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _classPrivateFieldGet; }
/* harmony export */ });
/* harmony import */ var _classApplyDescriptorGet_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./classApplyDescriptorGet.js */ "./node_modules/@babel/runtime/helpers/esm/classApplyDescriptorGet.js");
/* harmony import */ var _classExtractFieldDescriptor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./classExtractFieldDescriptor.js */ "./node_modules/@babel/runtime/helpers/esm/classExtractFieldDescriptor.js");


function _classPrivateFieldGet(receiver, privateMap) {
  var descriptor = (0,_classExtractFieldDescriptor_js__WEBPACK_IMPORTED_MODULE_1__["default"])(receiver, privateMap, "get");
  return (0,_classApplyDescriptorGet_js__WEBPACK_IMPORTED_MODULE_0__["default"])(receiver, descriptor);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _classPrivateFieldInitSpec; }
/* harmony export */ });
/* harmony import */ var _checkPrivateRedeclaration_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./checkPrivateRedeclaration.js */ "./node_modules/@babel/runtime/helpers/esm/checkPrivateRedeclaration.js");

function _classPrivateFieldInitSpec(obj, privateMap, value) {
  (0,_checkPrivateRedeclaration_js__WEBPACK_IMPORTED_MODULE_0__["default"])(obj, privateMap);
  privateMap.set(obj, value);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _classPrivateFieldSet; }
/* harmony export */ });
/* harmony import */ var _classApplyDescriptorSet_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./classApplyDescriptorSet.js */ "./node_modules/@babel/runtime/helpers/esm/classApplyDescriptorSet.js");
/* harmony import */ var _classExtractFieldDescriptor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./classExtractFieldDescriptor.js */ "./node_modules/@babel/runtime/helpers/esm/classExtractFieldDescriptor.js");


function _classPrivateFieldSet(receiver, privateMap, value) {
  var descriptor = (0,_classExtractFieldDescriptor_js__WEBPACK_IMPORTED_MODULE_1__["default"])(receiver, privateMap, "set");
  (0,_classApplyDescriptorSet_js__WEBPACK_IMPORTED_MODULE_0__["default"])(receiver, descriptor, value);
  return value;
}

/***/ }),

/***/ "./node_modules/linkedom/esm/dom/parser.js":
/*!*************************************************!*\
  !*** ./node_modules/linkedom/esm/dom/parser.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DOMParser": function() { return /* binding */ DOMParser; }
/* harmony export */ });
/* harmony import */ var _shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _shared_parse_from_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/parse-from-string.js */ "./node_modules/linkedom/esm/shared/parse-from-string.js");
/* harmony import */ var _html_document_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../html/document.js */ "./node_modules/linkedom/esm/html/document.js");
/* harmony import */ var _svg_document_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../svg/document.js */ "./node_modules/linkedom/esm/svg/document.js");
/* harmony import */ var _xml_document_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../xml/document.js */ "./node_modules/linkedom/esm/xml/document.js");







/**
 * @implements globalThis.DOMParser
 */
class DOMParser {

  /** @typedef {{ "text/html": HTMLDocument, "image/svg+xml": SVGDocument, "text/xml": XMLDocument }} MimeToDoc */
  /**
   * @template {keyof MimeToDoc} MIME
   * @param {string} markupLanguage
   * @param {MIME} mimeType
   * @returns {MimeToDoc[MIME]}
   */
  parseFromString(markupLanguage, mimeType, globals = null) {
    let isHTML = false, document;
    if (mimeType === 'text/html') {
      isHTML = true;
      document = new _html_document_js__WEBPACK_IMPORTED_MODULE_2__.HTMLDocument;
    }
    else if (mimeType === 'image/svg+xml')
      document = new _svg_document_js__WEBPACK_IMPORTED_MODULE_3__.SVGDocument;
    else
      document = new _xml_document_js__WEBPACK_IMPORTED_MODULE_4__.XMLDocument;
    document[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.DOM_PARSER] = DOMParser;
    if (globals)
      document[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.GLOBALS] = globals;
    if (isHTML && markupLanguage === '...')
      markupLanguage = '<!doctype html><html><head></head><body></body></html>';
    return markupLanguage ?
            (0,_shared_parse_from_string_js__WEBPACK_IMPORTED_MODULE_1__.parseFromString)(document, isHTML, markupLanguage) :
            document;
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/dom/string-map.js":
/*!*****************************************************!*\
  !*** ./node_modules/linkedom/esm/dom/string-map.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DOMStringMap": function() { return /* binding */ DOMStringMap; }
/* harmony export */ });
/* harmony import */ var uhyphen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uhyphen */ "./node_modules/uhyphen/esm/index.js");
/* harmony import */ var _shared_object_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/object.js */ "./node_modules/linkedom/esm/shared/object.js");



const refs = new WeakMap;

const key = name => `data-${(0,uhyphen__WEBPACK_IMPORTED_MODULE_0__["default"])(name)}`;
const prop = name => name.slice(5).replace(/-([a-z])/g, (_, $1) => $1.toUpperCase());

const handler = {
  get(dataset, name) {
    if (name in dataset)
      return refs.get(dataset).getAttribute(key(name));
  },

  set(dataset, name, value) {
    dataset[name] = value;
    refs.get(dataset).setAttribute(key(name), value);
    return true;
  },

  deleteProperty(dataset, name) {
    if (name in dataset)
      refs.get(dataset).removeAttribute(key(name));
    return delete dataset[name];
  }
};

/**
 * @implements globalThis.DOMStringMap
 */
class DOMStringMap {
  /**
   * @param {Element} ref
   */
  constructor(ref) {
    for (const {name, value} of ref.attributes) {
      if (/^data-/.test(name))
        this[prop(name)] = value;
    }
    refs.set(this, ref);
    return new Proxy(this, handler);
  }
}

(0,_shared_object_js__WEBPACK_IMPORTED_MODULE_1__.setPrototypeOf)(DOMStringMap.prototype, null);


/***/ }),

/***/ "./node_modules/linkedom/esm/dom/token-list.js":
/*!*****************************************************!*\
  !*** ./node_modules/linkedom/esm/dom/token-list.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DOMTokenList": function() { return /* binding */ DOMTokenList; }
/* harmony export */ });
/* harmony import */ var _shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/attributes.js */ "./node_modules/linkedom/esm/shared/attributes.js");
/* harmony import */ var _interface_attr_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../interface/attr.js */ "./node_modules/linkedom/esm/interface/attr.js");





const {add} = Set.prototype;
const addTokens = (self, tokens) => {
  for (const token of tokens) {
    if (token)
      add.call(self, token);
  }
};

const update = ({[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.OWNER_ELEMENT]: ownerElement, value}) => {
  const attribute = ownerElement.getAttributeNode('class');
  if (attribute)
    attribute.value = value;
  else
    (0,_shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(
      ownerElement,
      new _interface_attr_js__WEBPACK_IMPORTED_MODULE_2__.Attr(ownerElement.ownerDocument, 'class', value)
    );
};

/**
 * @implements globalThis.DOMTokenList
 */
class DOMTokenList extends Set {

  constructor(ownerElement) {
    super();
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.OWNER_ELEMENT] = ownerElement;
    const attribute = ownerElement.getAttributeNode('class');
    if (attribute)
      addTokens(this, attribute.value.split(/\s+/));
  }

  get length() { return this.size; }

  get value() { return [...this].join(' '); }

  /**
   * @param  {...string} tokens
   */
  add(...tokens) {
    addTokens(this, tokens);
    update(this);
  }

  /**
   * @param {string} token
   */
  contains(token) { return this.has(token); }

  /**
   * @param  {...string} tokens
   */
  remove(...tokens) {
    for (const token of tokens)
      this.delete(token);
    update(this);
  }

  /**
   * @param {string} token
   * @param {boolean?} force
   */
  toggle(token, force) {
    if (this.has(token)) {
      if (force)
        return true;
      this.delete(token);
      update(this);
    }
    else if (force || arguments.length === 1) {
      super.add(token);
      update(this);
      return true;
    }
    return false;
  }

  /**
   * @param {string} token
   * @param {string} newToken
   */
  replace(token, newToken) {
    if (this.has(token)) {
      this.delete(token);
      super.add(newToken);
      update(this);
      return true;
    }
    return false;
  }

  /**
   * @param {string} token
   */
  supports() { return true; }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/anchor-element.js":
/*!**********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/anchor-element.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLAnchorElement": function() { return /* binding */ HTMLAnchorElement; }
/* harmony export */ });
/* harmony import */ var _shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/register-html-class.js */ "./node_modules/linkedom/esm/shared/register-html-class.js");
/* harmony import */ var _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/attributes.js */ "./node_modules/linkedom/esm/shared/attributes.js");
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");





const tagName = 'a';

/**
 * @implements globalThis.HTMLAnchorElement
 */
class HTMLAnchorElement extends _element_js__WEBPACK_IMPORTED_MODULE_2__.HTMLElement {
  constructor(ownerDocument, localName = tagName) {
    super(ownerDocument, localName);
  }

  /* c8 ignore start */ // copy paste from img.src, already covered
  get href() { return encodeURI(_shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'href')); }
  set href(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'href', decodeURI(value)); }

  get download() { return encodeURI(_shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'download')); }
  set download(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'download', decodeURI(value)); }

  get target() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'target'); }
  set target(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'target', value); }

  get type() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'type'); }
  set type(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'type', value); }
  /* c8 ignore stop */

}

(0,_shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_0__.registerHTMLClass)(tagName, HTMLAnchorElement);




/***/ }),

/***/ "./node_modules/linkedom/esm/html/area-element.js":
/*!********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/area-element.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLAreaElement": function() { return /* binding */ HTMLAreaElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLAreaElement
 */
class HTMLAreaElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'area') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/audio-element.js":
/*!*********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/audio-element.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLAudioElement": function() { return /* binding */ HTMLAudioElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLAudioElement
 */
class HTMLAudioElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'audio') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/base-element.js":
/*!********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/base-element.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLBaseElement": function() { return /* binding */ HTMLBaseElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLBaseElement
 */
class HTMLBaseElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'base') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/body-element.js":
/*!********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/body-element.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLBodyElement": function() { return /* binding */ HTMLBodyElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLBodyElement
 */
class HTMLBodyElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'body') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/br-element.js":
/*!******************************************************!*\
  !*** ./node_modules/linkedom/esm/html/br-element.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLBRElement": function() { return /* binding */ HTMLBRElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLBRElement
 */
class HTMLBRElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'br') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/button-element.js":
/*!**********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/button-element.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLButtonElement": function() { return /* binding */ HTMLButtonElement; }
/* harmony export */ });
/* harmony import */ var _shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/register-html-class.js */ "./node_modules/linkedom/esm/shared/register-html-class.js");
/* harmony import */ var _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/attributes.js */ "./node_modules/linkedom/esm/shared/attributes.js");
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");





const tagName = 'button';

/**
 * @implements globalThis.HTMLButtonElement
 */
class HTMLButtonElement extends _element_js__WEBPACK_IMPORTED_MODULE_2__.HTMLElement {
  constructor(ownerDocument, localName = tagName) {
    super(ownerDocument, localName);
  }

  /* c8 ignore start */
  get disabled() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.booleanAttribute.get(this, 'disabled'); }
  set disabled(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.booleanAttribute.set(this, 'disabled', value); }

  get name() { return this.getAttribute('name'); }
  set name(value) { this.setAttribute('name', value); }

  get type() { return this.getAttribute('type'); }
  set type(value) { this.setAttribute('type', value); }
  /* c8 ignore stop */
}

(0,_shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_0__.registerHTMLClass)(tagName, HTMLButtonElement);




/***/ }),

/***/ "./node_modules/linkedom/esm/html/canvas-element.js":
/*!**********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/canvas-element.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLCanvasElement": function() { return /* binding */ HTMLCanvasElement; }
/* harmony export */ });
/* harmony import */ var _shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/register-html-class.js */ "./node_modules/linkedom/esm/shared/register-html-class.js");
/* harmony import */ var _shared_attributes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/attributes.js */ "./node_modules/linkedom/esm/shared/attributes.js");
/* harmony import */ var _commonjs_canvas_cjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../commonjs/canvas.cjs */ "./node_modules/linkedom/commonjs/canvas.cjs");
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");









const {createCanvas} = _commonjs_canvas_cjs__WEBPACK_IMPORTED_MODULE_3__;

const tagName = 'canvas';

/**
 * @implements globalThis.HTMLCanvasElement
 */
class HTMLCanvasElement extends _element_js__WEBPACK_IMPORTED_MODULE_4__.HTMLElement {
  constructor(ownerDocument, localName = tagName) {
    super(ownerDocument, localName);
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.IMAGE] = createCanvas(300, 150);
  }

  get width() {
    return this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.IMAGE].width;
  }

  set width(value) {
    _shared_attributes_js__WEBPACK_IMPORTED_MODULE_2__.numericAttribute.set(this, 'width', value);
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.IMAGE].width = value;
  }

  get height() {
    return this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.IMAGE].height;
  }

  set height(value) {
    _shared_attributes_js__WEBPACK_IMPORTED_MODULE_2__.numericAttribute.set(this, 'height', value);
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.IMAGE].height = value;
  }

  getContext(type) {
    return this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.IMAGE].getContext(type);
  }

  toDataURL(...args) {
    return this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.IMAGE].toDataURL(...args);
  }
}

(0,_shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_1__.registerHTMLClass)(tagName, HTMLCanvasElement);




/***/ }),

/***/ "./node_modules/linkedom/esm/html/d-list-element.js":
/*!**********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/d-list-element.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLDListElement": function() { return /* binding */ HTMLDListElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLDListElement
 */
class HTMLDListElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'dl') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/data-element.js":
/*!********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/data-element.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLDataElement": function() { return /* binding */ HTMLDataElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLDataElement
 */
class HTMLDataElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'data') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/data-list-element.js":
/*!*************************************************************!*\
  !*** ./node_modules/linkedom/esm/html/data-list-element.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLDataListElement": function() { return /* binding */ HTMLDataListElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLDataListElement
 */
class HTMLDataListElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'datalist') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/details-element.js":
/*!***********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/details-element.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLDetailsElement": function() { return /* binding */ HTMLDetailsElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLDetailsElement
 */
class HTMLDetailsElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'details') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/directory-element.js":
/*!*************************************************************!*\
  !*** ./node_modules/linkedom/esm/html/directory-element.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLDirectoryElement": function() { return /* binding */ HTMLDirectoryElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLDirectoryElement
 */
class HTMLDirectoryElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'dir') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/div-element.js":
/*!*******************************************************!*\
  !*** ./node_modules/linkedom/esm/html/div-element.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLDivElement": function() { return /* binding */ HTMLDivElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLDivElement
 */
class HTMLDivElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'div') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/document.js":
/*!****************************************************!*\
  !*** ./node_modules/linkedom/esm/html/document.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLDocument": function() { return /* binding */ HTMLDocument; }
/* harmony export */ });
/* harmony import */ var _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/constants.js */ "./node_modules/linkedom/esm/shared/constants.js");
/* harmony import */ var _shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/register-html-class.js */ "./node_modules/linkedom/esm/shared/register-html-class.js");
/* harmony import */ var _interface_document_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../interface/document.js */ "./node_modules/linkedom/esm/interface/document.js");
/* harmony import */ var _interface_node_list_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../interface/node-list.js */ "./node_modules/linkedom/esm/interface/node-list.js");
/* harmony import */ var _interface_custom_element_registry_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../interface/custom-element-registry.js */ "./node_modules/linkedom/esm/interface/custom-element-registry.js");
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");










const createHTMLElement = (ownerDocument, builtin, localName, options) => {
  if (!builtin && _shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_2__.htmlClasses.has(localName)) {
    const Class = _shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_2__.htmlClasses.get(localName);
    return new Class(ownerDocument, localName);
  }
  const {[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.CUSTOM_ELEMENTS]: {active, registry}} = ownerDocument;
  if (active) {
    const ce = builtin ? options.is : localName;
    if (registry.has(ce)) {
      const {Class} = registry.get(ce);
      const element = new Class(ownerDocument, localName);
      _interface_custom_element_registry_js__WEBPACK_IMPORTED_MODULE_5__.customElements.set(element, {connected: false});
      return element;
    }
  }
  return new _element_js__WEBPACK_IMPORTED_MODULE_6__.HTMLElement(ownerDocument, localName);
};

/**
 * @implements globalThis.HTMLDocument
 */
class HTMLDocument extends _interface_document_js__WEBPACK_IMPORTED_MODULE_3__.Document {
  constructor() { super('text/html'); }

  get all() {
    const nodeList = new _interface_node_list_js__WEBPACK_IMPORTED_MODULE_4__.NodeList;
    let {[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT]: next, [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.END]: end} = this;
    while (next !== end) {
      switch (next.nodeType) {
        case _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE:
          nodeList.push(next);
          break;
      }
      next = next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT];
    }
    return nodeList;
  }

  /**
   * @type HTMLHeadElement
   */
  get head() {
    const {documentElement} = this;
    let {firstElementChild} = documentElement;
    if (!firstElementChild || firstElementChild.tagName !== 'HEAD') {
      firstElementChild = this.createElement('head');
      documentElement.prepend(firstElementChild);
    }
    return firstElementChild;
  }

  /**
   * @type HTMLBodyElement
   */
  get body() {
    const {head} = this;
    let {nextElementSibling} = head;
    if (!nextElementSibling || nextElementSibling.tagName !== 'BODY') {
      nextElementSibling = this.createElement('body');
      head.after(nextElementSibling);
    }
    return nextElementSibling;
  }

  /**
   * @type HTMLTitleElement
   */
  get title() {
    const {head} = this;
    let title = head.getElementsByTagName('title').shift();
    return title ? title.textContent : '';
  }

  set title(textContent) {
    const {head} = this;
    let title = head.getElementsByTagName('title').shift();
    if (title)
      title.textContent = textContent;
    else {
      head.insertBefore(
        this.createElement('title'),
        head.firstChild
      ).textContent = textContent;
    }
  }

  createElement(localName, options) {
    const builtin = !!(options && options.is);
    const element = createHTMLElement(this, builtin, localName, options);
    if (builtin)
      element.setAttribute('is', options.is);
    return element;
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/element.js":
/*!***************************************************!*\
  !*** ./node_modules/linkedom/esm/html/element.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLElement": function() { return /* binding */ HTMLElement; }
/* harmony export */ });
/* harmony import */ var _shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/attributes.js */ "./node_modules/linkedom/esm/shared/attributes.js");
/* harmony import */ var _interface_event_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../interface/event.js */ "./node_modules/linkedom/esm/interface/event.js");
/* harmony import */ var _interface_element_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../interface/element.js */ "./node_modules/linkedom/esm/interface/element.js");
/* harmony import */ var _interface_custom_element_registry_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../interface/custom-element-registry.js */ "./node_modules/linkedom/esm/interface/custom-element-registry.js");







const Level0 = new WeakMap;
const level0 = {
  get(element, name) {
    return Level0.has(element) && Level0.get(element)[name] || null;
  },
  set(element, name, value) {
    if (!Level0.has(element))
      Level0.set(element, {});
    const handlers = Level0.get(element);
    const type = name.slice(2);
    if (handlers[name])
      element.removeEventListener(type, handlers[name], false);
    if ((handlers[name] = value))
      element.addEventListener(type, value, false);
  }
};

/**
 * @implements globalThis.HTMLElement
 */
class HTMLElement extends _interface_element_js__WEBPACK_IMPORTED_MODULE_3__.Element {

  static get observedAttributes() { return []; }

  constructor(ownerDocument = null, localName = '') {
    super(ownerDocument, localName);

    const ownerLess = !ownerDocument;
    let options;

    if (ownerLess) {
      const {constructor: Class} = this;
      if (!_interface_custom_element_registry_js__WEBPACK_IMPORTED_MODULE_4__.Classes.has(Class))
        throw new Error('unable to initialize this Custom Element');
      ({ownerDocument, localName, options} = _interface_custom_element_registry_js__WEBPACK_IMPORTED_MODULE_4__.Classes.get(Class));
    }

    if (ownerDocument[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.UPGRADE]) {
      const {element, values} = ownerDocument[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.UPGRADE];
      ownerDocument[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.UPGRADE] = null;
      for (const [key, value] of values)
        element[key] = value;
      return element;
    }

    if (ownerLess) {
      this.ownerDocument = this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.END].ownerDocument = ownerDocument;
      this.localName = localName;
      _interface_custom_element_registry_js__WEBPACK_IMPORTED_MODULE_4__.customElements.set(this, {connected: false});
      if (options.is)
        this.setAttribute('is', options.is);
    }
  }

  /* c8 ignore start */

  /* TODO: what about these?
  offsetHeight
  offsetLeft
  offsetParent
  offsetTop
  offsetWidth
  */

  blur() { this.dispatchEvent(new _interface_event_js__WEBPACK_IMPORTED_MODULE_2__.Event('blur')); }
  click() { this.dispatchEvent(new _interface_event_js__WEBPACK_IMPORTED_MODULE_2__.Event('click')); }

  // Boolean getters
  get accessKeyLabel() {
    const {accessKey} = this;
    return accessKey && `Alt+Shift+${accessKey}`;
  }
  get isContentEditable() { return this.hasAttribute('contenteditable'); }

  // Boolean Accessors
  get contentEditable() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.booleanAttribute.get(this, 'contenteditable'); }
  set contentEditable(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.booleanAttribute.set(this, 'contenteditable', value); }
  get draggable() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.booleanAttribute.get(this, 'draggable'); }
  set draggable(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.booleanAttribute.set(this, 'draggable', value); }
  get hidden() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.booleanAttribute.get(this, 'hidden'); }
  set hidden(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.booleanAttribute.set(this, 'hidden', value); }
  get spellcheck() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.booleanAttribute.get(this, 'spellcheck'); }
  set spellcheck(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.booleanAttribute.set(this, 'spellcheck', value); }

  // String Accessors
  get accessKey() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'accesskey'); }
  set accessKey(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'accesskey', value); }
  get dir() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'dir'); }
  set dir(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'dir', value); }
  get lang() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'lang'); }
  set lang(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'lang', value); }
  get title() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'title'); }
  set title(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'title', value); }

  // DOM Level 0
  get onabort() { return level0.get(this, 'onabort'); }
  set onabort(value) { level0.set(this, 'onabort', value); }

  get onblur() { return level0.get(this, 'onblur'); }
  set onblur(value) { level0.set(this, 'onblur', value); }

  get oncancel() { return level0.get(this, 'oncancel'); }
  set oncancel(value) { level0.set(this, 'oncancel', value); }

  get oncanplay() { return level0.get(this, 'oncanplay'); }
  set oncanplay(value) { level0.set(this, 'oncanplay', value); }

  get oncanplaythrough() { return level0.get(this, 'oncanplaythrough'); }
  set oncanplaythrough(value) { level0.set(this, 'oncanplaythrough', value); }

  get onchange() { return level0.get(this, 'onchange'); }
  set onchange(value) { level0.set(this, 'onchange', value); }

  get onclick() { return level0.get(this, 'onclick'); }
  set onclick(value) { level0.set(this, 'onclick', value); }

  get onclose() { return level0.get(this, 'onclose'); }
  set onclose(value) { level0.set(this, 'onclose', value); }

  get oncontextmenu() { return level0.get(this, 'oncontextmenu'); }
  set oncontextmenu(value) { level0.set(this, 'oncontextmenu', value); }

  get oncuechange() { return level0.get(this, 'oncuechange'); }
  set oncuechange(value) { level0.set(this, 'oncuechange', value); }

  get ondblclick() { return level0.get(this, 'ondblclick'); }
  set ondblclick(value) { level0.set(this, 'ondblclick', value); }

  get ondrag() { return level0.get(this, 'ondrag'); }
  set ondrag(value) { level0.set(this, 'ondrag', value); }

  get ondragend() { return level0.get(this, 'ondragend'); }
  set ondragend(value) { level0.set(this, 'ondragend', value); }

  get ondragenter() { return level0.get(this, 'ondragenter'); }
  set ondragenter(value) { level0.set(this, 'ondragenter', value); }

  get ondragleave() { return level0.get(this, 'ondragleave'); }
  set ondragleave(value) { level0.set(this, 'ondragleave', value); }

  get ondragover() { return level0.get(this, 'ondragover'); }
  set ondragover(value) { level0.set(this, 'ondragover', value); }

  get ondragstart() { return level0.get(this, 'ondragstart'); }
  set ondragstart(value) { level0.set(this, 'ondragstart', value); }

  get ondrop() { return level0.get(this, 'ondrop'); }
  set ondrop(value) { level0.set(this, 'ondrop', value); }

  get ondurationchange() { return level0.get(this, 'ondurationchange'); }
  set ondurationchange(value) { level0.set(this, 'ondurationchange', value); }

  get onemptied() { return level0.get(this, 'onemptied'); }
  set onemptied(value) { level0.set(this, 'onemptied', value); }

  get onended() { return level0.get(this, 'onended'); }
  set onended(value) { level0.set(this, 'onended', value); }

  get onerror() { return level0.get(this, 'onerror'); }
  set onerror(value) { level0.set(this, 'onerror', value); }

  get onfocus() { return level0.get(this, 'onfocus'); }
  set onfocus(value) { level0.set(this, 'onfocus', value); }

  get oninput() { return level0.get(this, 'oninput'); }
  set oninput(value) { level0.set(this, 'oninput', value); }

  get oninvalid() { return level0.get(this, 'oninvalid'); }
  set oninvalid(value) { level0.set(this, 'oninvalid', value); }

  get onkeydown() { return level0.get(this, 'onkeydown'); }
  set onkeydown(value) { level0.set(this, 'onkeydown', value); }

  get onkeypress() { return level0.get(this, 'onkeypress'); }
  set onkeypress(value) { level0.set(this, 'onkeypress', value); }

  get onkeyup() { return level0.get(this, 'onkeyup'); }
  set onkeyup(value) { level0.set(this, 'onkeyup', value); }

  get onload() { return level0.get(this, 'onload'); }
  set onload(value) { level0.set(this, 'onload', value); }

  get onloadeddata() { return level0.get(this, 'onloadeddata'); }
  set onloadeddata(value) { level0.set(this, 'onloadeddata', value); }

  get onloadedmetadata() { return level0.get(this, 'onloadedmetadata'); }
  set onloadedmetadata(value) { level0.set(this, 'onloadedmetadata', value); }

  get onloadstart() { return level0.get(this, 'onloadstart'); }
  set onloadstart(value) { level0.set(this, 'onloadstart', value); }

  get onmousedown() { return level0.get(this, 'onmousedown'); }
  set onmousedown(value) { level0.set(this, 'onmousedown', value); }

  get onmouseenter() { return level0.get(this, 'onmouseenter'); }
  set onmouseenter(value) { level0.set(this, 'onmouseenter', value); }

  get onmouseleave() { return level0.get(this, 'onmouseleave'); }
  set onmouseleave(value) { level0.set(this, 'onmouseleave', value); }

  get onmousemove() { return level0.get(this, 'onmousemove'); }
  set onmousemove(value) { level0.set(this, 'onmousemove', value); }

  get onmouseout() { return level0.get(this, 'onmouseout'); }
  set onmouseout(value) { level0.set(this, 'onmouseout', value); }

  get onmouseover() { return level0.get(this, 'onmouseover'); }
  set onmouseover(value) { level0.set(this, 'onmouseover', value); }

  get onmouseup() { return level0.get(this, 'onmouseup'); }
  set onmouseup(value) { level0.set(this, 'onmouseup', value); }

  get onmousewheel() { return level0.get(this, 'onmousewheel'); }
  set onmousewheel(value) { level0.set(this, 'onmousewheel', value); }

  get onpause() { return level0.get(this, 'onpause'); }
  set onpause(value) { level0.set(this, 'onpause', value); }

  get onplay() { return level0.get(this, 'onplay'); }
  set onplay(value) { level0.set(this, 'onplay', value); }

  get onplaying() { return level0.get(this, 'onplaying'); }
  set onplaying(value) { level0.set(this, 'onplaying', value); }

  get onprogress() { return level0.get(this, 'onprogress'); }
  set onprogress(value) { level0.set(this, 'onprogress', value); }

  get onratechange() { return level0.get(this, 'onratechange'); }
  set onratechange(value) { level0.set(this, 'onratechange', value); }

  get onreset() { return level0.get(this, 'onreset'); }
  set onreset(value) { level0.set(this, 'onreset', value); }

  get onresize() { return level0.get(this, 'onresize'); }
  set onresize(value) { level0.set(this, 'onresize', value); }

  get onscroll() { return level0.get(this, 'onscroll'); }
  set onscroll(value) { level0.set(this, 'onscroll', value); }

  get onseeked() { return level0.get(this, 'onseeked'); }
  set onseeked(value) { level0.set(this, 'onseeked', value); }

  get onseeking() { return level0.get(this, 'onseeking'); }
  set onseeking(value) { level0.set(this, 'onseeking', value); }

  get onselect() { return level0.get(this, 'onselect'); }
  set onselect(value) { level0.set(this, 'onselect', value); }

  get onshow() { return level0.get(this, 'onshow'); }
  set onshow(value) { level0.set(this, 'onshow', value); }

  get onstalled() { return level0.get(this, 'onstalled'); }
  set onstalled(value) { level0.set(this, 'onstalled', value); }

  get onsubmit() { return level0.get(this, 'onsubmit'); }
  set onsubmit(value) { level0.set(this, 'onsubmit', value); }

  get onsuspend() { return level0.get(this, 'onsuspend'); }
  set onsuspend(value) { level0.set(this, 'onsuspend', value); }

  get ontimeupdate() { return level0.get(this, 'ontimeupdate'); }
  set ontimeupdate(value) { level0.set(this, 'ontimeupdate', value); }

  get ontoggle() { return level0.get(this, 'ontoggle'); }
  set ontoggle(value) { level0.set(this, 'ontoggle', value); }

  get onvolumechange() { return level0.get(this, 'onvolumechange'); }
  set onvolumechange(value) { level0.set(this, 'onvolumechange', value); }

  get onwaiting() { return level0.get(this, 'onwaiting'); }
  set onwaiting(value) { level0.set(this, 'onwaiting', value); }

  get onauxclick() { return level0.get(this, 'onauxclick'); }
  set onauxclick(value) { level0.set(this, 'onauxclick', value); }

  get ongotpointercapture() { return level0.get(this, 'ongotpointercapture'); }
  set ongotpointercapture(value) { level0.set(this, 'ongotpointercapture', value); }

  get onlostpointercapture() { return level0.get(this, 'onlostpointercapture'); }
  set onlostpointercapture(value) { level0.set(this, 'onlostpointercapture', value); }

  get onpointercancel() { return level0.get(this, 'onpointercancel'); }
  set onpointercancel(value) { level0.set(this, 'onpointercancel', value); }

  get onpointerdown() { return level0.get(this, 'onpointerdown'); }
  set onpointerdown(value) { level0.set(this, 'onpointerdown', value); }

  get onpointerenter() { return level0.get(this, 'onpointerenter'); }
  set onpointerenter(value) { level0.set(this, 'onpointerenter', value); }

  get onpointerleave() { return level0.get(this, 'onpointerleave'); }
  set onpointerleave(value) { level0.set(this, 'onpointerleave', value); }

  get onpointermove() { return level0.get(this, 'onpointermove'); }
  set onpointermove(value) { level0.set(this, 'onpointermove', value); }

  get onpointerout() { return level0.get(this, 'onpointerout'); }
  set onpointerout(value) { level0.set(this, 'onpointerout', value); }

  get onpointerover() { return level0.get(this, 'onpointerover'); }
  set onpointerover(value) { level0.set(this, 'onpointerover', value); }

  get onpointerup() { return level0.get(this, 'onpointerup'); }
  set onpointerup(value) { level0.set(this, 'onpointerup', value); }
  /* c8 ignore stop */

}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/embed-element.js":
/*!*********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/embed-element.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLEmbedElement": function() { return /* binding */ HTMLEmbedElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLEmbedElement
 */
class HTMLEmbedElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'embed') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/field-set-element.js":
/*!*************************************************************!*\
  !*** ./node_modules/linkedom/esm/html/field-set-element.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLFieldSetElement": function() { return /* binding */ HTMLFieldSetElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLFieldSetElement
 */
class HTMLFieldSetElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'fieldset') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/font-element.js":
/*!********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/font-element.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLFontElement": function() { return /* binding */ HTMLFontElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLFontElement
 */
class HTMLFontElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'font') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/form-element.js":
/*!********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/form-element.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLFormElement": function() { return /* binding */ HTMLFormElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLFormElement
 */
class HTMLFormElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'form') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/frame-element.js":
/*!*********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/frame-element.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLFrameElement": function() { return /* binding */ HTMLFrameElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLFrameElement
 */
class HTMLFrameElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'frame') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/frame-set-element.js":
/*!*************************************************************!*\
  !*** ./node_modules/linkedom/esm/html/frame-set-element.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLFrameSetElement": function() { return /* binding */ HTMLFrameSetElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLFrameSetElement
 */
class HTMLFrameSetElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'frameset') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/head-element.js":
/*!********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/head-element.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLHeadElement": function() { return /* binding */ HTMLHeadElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLHeadElement
 */
class HTMLHeadElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'head') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/heading-element.js":
/*!***********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/heading-element.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLHeadingElement": function() { return /* binding */ HTMLHeadingElement; }
/* harmony export */ });
/* harmony import */ var _shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/register-html-class.js */ "./node_modules/linkedom/esm/shared/register-html-class.js");
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");




const tagName = 'h1';

/**
 * @implements globalThis.HTMLHeadingElement
 */
class HTMLHeadingElement extends _element_js__WEBPACK_IMPORTED_MODULE_1__.HTMLElement {
  constructor(ownerDocument, localName = tagName) {
    super(ownerDocument, localName);
  }
}

(0,_shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_0__.registerHTMLClass)([tagName, 'h2', 'h3', 'h4', 'h5', 'h6'], HTMLHeadingElement);




/***/ }),

/***/ "./node_modules/linkedom/esm/html/hr-element.js":
/*!******************************************************!*\
  !*** ./node_modules/linkedom/esm/html/hr-element.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLHRElement": function() { return /* binding */ HTMLHRElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLHRElement
 */
class HTMLHRElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'hr') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/html-element.js":
/*!********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/html-element.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLHtmlElement": function() { return /* binding */ HTMLHtmlElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLHtmlElement
 */
class HTMLHtmlElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'html') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/i-frame-element.js":
/*!***********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/i-frame-element.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLIFrameElement": function() { return /* binding */ HTMLIFrameElement; }
/* harmony export */ });
/* harmony import */ var _shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/register-html-class.js */ "./node_modules/linkedom/esm/shared/register-html-class.js");
/* harmony import */ var _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/attributes.js */ "./node_modules/linkedom/esm/shared/attributes.js");
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");





const tagName = 'iframe';

/**
 * @implements globalThis.HTMLIFrameElement
 */
class HTMLIFrameElement extends _element_js__WEBPACK_IMPORTED_MODULE_2__.HTMLElement {
  constructor(ownerDocument, localName = tagName) {
    super(ownerDocument, localName);
  }

  /* c8 ignore start */
  get src() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'src'); }
  set src(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'src', value); }

  get srcdoc() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, "srcdoc"); }
  set srcdoc(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, "srcdoc", value); }

  get name() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, "name"); }
  set name(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, "name", value); }

  get allow() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, "allow"); }
  set allow(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, "allow", value); }

  get allowFullscreen() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.booleanAttribute.get(this, "allowfullscreen"); }
  set allowFullscreen(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.booleanAttribute.set(this, "allowfullscreen", value); }
  
  get referrerPolicy() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, "referrerpolicy"); }
  set referrerPolicy(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, "referrerpolicy", value); }
  
  get loading() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, "loading"); }
  set loading(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, "loading", value); }
  /* c8 ignore stop */
}

(0,_shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_0__.registerHTMLClass)(tagName, HTMLIFrameElement);




/***/ }),

/***/ "./node_modules/linkedom/esm/html/image-element.js":
/*!*********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/image-element.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLImageElement": function() { return /* binding */ HTMLImageElement; }
/* harmony export */ });
/* harmony import */ var _shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/register-html-class.js */ "./node_modules/linkedom/esm/shared/register-html-class.js");
/* harmony import */ var _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/attributes.js */ "./node_modules/linkedom/esm/shared/attributes.js");
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");





const tagName = 'img';

/**
 * @implements globalThis.HTMLImageElement
 */
class HTMLImageElement extends _element_js__WEBPACK_IMPORTED_MODULE_2__.HTMLElement {
  constructor(ownerDocument, localName = tagName) {
    super(ownerDocument, localName);
  }

  /* c8 ignore start */
  get alt() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'alt'); }
  set alt(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'alt', value); }

  get sizes() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'sizes'); }
  set sizes(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'sizes', value); }

  get src() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'src'); }
  set src(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'src', value); }

  get srcset() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'srcset'); }
  set srcset(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'srcset', value); }

  get title() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'title'); }
  set title(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'title', value); }

  get width() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.numericAttribute.get(this, 'width'); }
  set width(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.numericAttribute.set(this, 'width', value); }

  get height() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.numericAttribute.get(this, 'height'); }
  set height(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.numericAttribute.set(this, 'height', value); }
  /* c8 ignore stop */
}

(0,_shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_0__.registerHTMLClass)(tagName, HTMLImageElement);




/***/ }),

/***/ "./node_modules/linkedom/esm/html/input-element.js":
/*!*********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/input-element.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLInputElement": function() { return /* binding */ HTMLInputElement; }
/* harmony export */ });
/* harmony import */ var _shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/register-html-class.js */ "./node_modules/linkedom/esm/shared/register-html-class.js");
/* harmony import */ var _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/attributes.js */ "./node_modules/linkedom/esm/shared/attributes.js");
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");





const tagName = 'input';

/**
 * @implements globalThis.HTMLInputElement
 */
class HTMLInputElement extends _element_js__WEBPACK_IMPORTED_MODULE_2__.HTMLElement {
  constructor(ownerDocument, localName = tagName) {
    super(ownerDocument, localName);
  }

  /* c8 ignore start */
  get autofocus() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.booleanAttribute.get(this, 'autofocus') || -1; }
  set autofocus(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.booleanAttribute.set(this, 'autofocus', value); }

  get disabled() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.booleanAttribute.get(this, 'disabled'); }
  set disabled(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.booleanAttribute.set(this, 'disabled', value); }

  get name() { return this.getAttribute('name'); }
  set name(value) { this.setAttribute('name', value); }

  get placeholder() { return this.getAttribute('placeholder'); }
  set placeholder(value) { this.setAttribute('placeholder', value); }

  get type() { return this.getAttribute('type'); }
  set type(value) { this.setAttribute('type', value); }

  get value() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'value'); }
  set value(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'value', value); }
  /* c8 ignore stop */
}

(0,_shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_0__.registerHTMLClass)(tagName, HTMLInputElement);




/***/ }),

/***/ "./node_modules/linkedom/esm/html/label-element.js":
/*!*********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/label-element.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLLabelElement": function() { return /* binding */ HTMLLabelElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLLabelElement
 */
class HTMLLabelElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'label') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/legend-element.js":
/*!**********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/legend-element.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLLegendElement": function() { return /* binding */ HTMLLegendElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLLegendElement
 */
class HTMLLegendElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'legend') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/li-element.js":
/*!******************************************************!*\
  !*** ./node_modules/linkedom/esm/html/li-element.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLLIElement": function() { return /* binding */ HTMLLIElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLLIElement
 */
class HTMLLIElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'li') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/link-element.js":
/*!********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/link-element.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLLinkElement": function() { return /* binding */ HTMLLinkElement; }
/* harmony export */ });
/* harmony import */ var _shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/register-html-class.js */ "./node_modules/linkedom/esm/shared/register-html-class.js");
/* harmony import */ var _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/attributes.js */ "./node_modules/linkedom/esm/shared/attributes.js");
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");





const tagName = 'link';

/**
 * @implements globalThis.HTMLLinkElement
 */
class HTMLLinkElement extends _element_js__WEBPACK_IMPORTED_MODULE_2__.HTMLElement {
  constructor(ownerDocument, localName = tagName) {
    super(ownerDocument, localName);
  }

  /* c8 ignore start */ // copy paste from img.src, already covered
  get disabled() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.booleanAttribute.get(this, 'disabled'); }
  set disabled(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.booleanAttribute.set(this, 'disabled', value); }

  get href() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'href'); }
  set href(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'href', value); }

  get hreflang() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'hreflang'); }
  set hreflang(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'hreflang', value); }

  get media() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'media'); }
  set media(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'media', value); }

  get rel() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'rel'); }
  set rel(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'rel', value); }

  get type() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'type'); }
  set type(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'type', value); }
  /* c8 ignore stop */

}

(0,_shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_0__.registerHTMLClass)(tagName, HTMLLinkElement);




/***/ }),

/***/ "./node_modules/linkedom/esm/html/map-element.js":
/*!*******************************************************!*\
  !*** ./node_modules/linkedom/esm/html/map-element.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLMapElement": function() { return /* binding */ HTMLMapElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLMapElement
 */
class HTMLMapElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'map') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/marquee-element.js":
/*!***********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/marquee-element.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLMarqueeElement": function() { return /* binding */ HTMLMarqueeElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLMarqueeElement
 */
class HTMLMarqueeElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'marquee') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/media-element.js":
/*!*********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/media-element.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLMediaElement": function() { return /* binding */ HTMLMediaElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLMediaElement
 */
class HTMLMediaElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'media') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/menu-element.js":
/*!********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/menu-element.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLMenuElement": function() { return /* binding */ HTMLMenuElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLMenuElement
 */
class HTMLMenuElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'menu') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/meta-element.js":
/*!********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/meta-element.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLMetaElement": function() { return /* binding */ HTMLMetaElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLMetaElement
 */
class HTMLMetaElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'meta') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/meter-element.js":
/*!*********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/meter-element.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLMeterElement": function() { return /* binding */ HTMLMeterElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLMeterElement
 */
class HTMLMeterElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'meter') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/mod-element.js":
/*!*******************************************************!*\
  !*** ./node_modules/linkedom/esm/html/mod-element.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLModElement": function() { return /* binding */ HTMLModElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLModElement
 */
class HTMLModElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'mod') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/o-list-element.js":
/*!**********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/o-list-element.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLOListElement": function() { return /* binding */ HTMLOListElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLOListElement
 */
class HTMLOListElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'ol') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/object-element.js":
/*!**********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/object-element.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLObjectElement": function() { return /* binding */ HTMLObjectElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLObjectElement
 */
class HTMLObjectElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'object') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/opt-group-element.js":
/*!*************************************************************!*\
  !*** ./node_modules/linkedom/esm/html/opt-group-element.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLOptGroupElement": function() { return /* binding */ HTMLOptGroupElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLOptGroupElement
 */
class HTMLOptGroupElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'optgroup') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/option-element.js":
/*!**********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/option-element.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLOptionElement": function() { return /* binding */ HTMLOptionElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");
/* harmony import */ var _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/attributes.js */ "./node_modules/linkedom/esm/shared/attributes.js");
/* harmony import */ var _shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/register-html-class.js */ "./node_modules/linkedom/esm/shared/register-html-class.js");




const tagName = 'option';

/**
 * @implements globalThis.HTMLOptionElement
 */
class HTMLOptionElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = tagName) {
    super(ownerDocument, localName);
  }

  /* c8 ignore start */
  get value() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'value'); }
  set value(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'value', value); }
  /* c8 ignore stop */

  get selected() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.booleanAttribute.get(this, 'selected'); }
  set selected(value) {
    const option = this.parentElement?.querySelector('option[selected]');
    if (option && option !== this)
      option.selected = false;
    _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.booleanAttribute.set(this, 'selected', value);
  }
}

(0,_shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_2__.registerHTMLClass)(tagName, HTMLOptionElement);




/***/ }),

/***/ "./node_modules/linkedom/esm/html/output-element.js":
/*!**********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/output-element.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLOutputElement": function() { return /* binding */ HTMLOutputElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLOutputElement
 */
class HTMLOutputElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'output') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/paragraph-element.js":
/*!*************************************************************!*\
  !*** ./node_modules/linkedom/esm/html/paragraph-element.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLParagraphElement": function() { return /* binding */ HTMLParagraphElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLParagraphElement
 */
class HTMLParagraphElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'p') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/param-element.js":
/*!*********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/param-element.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLParamElement": function() { return /* binding */ HTMLParamElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLParamElement
 */
class HTMLParamElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'param') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/picture-element.js":
/*!***********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/picture-element.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLPictureElement": function() { return /* binding */ HTMLPictureElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLPictureElement
 */
class HTMLPictureElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'picture') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/pre-element.js":
/*!*******************************************************!*\
  !*** ./node_modules/linkedom/esm/html/pre-element.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLPreElement": function() { return /* binding */ HTMLPreElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLPreElement
 */
class HTMLPreElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'pre') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/progress-element.js":
/*!************************************************************!*\
  !*** ./node_modules/linkedom/esm/html/progress-element.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLProgressElement": function() { return /* binding */ HTMLProgressElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLProgressElement
 */
class HTMLProgressElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'progress') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/quote-element.js":
/*!*********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/quote-element.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLQuoteElement": function() { return /* binding */ HTMLQuoteElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLQuoteElement
 */
class HTMLQuoteElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'quote') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/script-element.js":
/*!**********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/script-element.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLScriptElement": function() { return /* binding */ HTMLScriptElement; }
/* harmony export */ });
/* harmony import */ var _shared_attributes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/attributes.js */ "./node_modules/linkedom/esm/shared/attributes.js");
/* harmony import */ var _shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/register-html-class.js */ "./node_modules/linkedom/esm/shared/register-html-class.js");
/* harmony import */ var _text_element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./text-element.js */ "./node_modules/linkedom/esm/html/text-element.js");





const tagName = 'script';

/**
 * @implements globalThis.HTMLScriptElement
 */
class HTMLScriptElement extends _text_element_js__WEBPACK_IMPORTED_MODULE_2__.TextElement {
  constructor(ownerDocument, localName = tagName) {
    super(ownerDocument, localName);
  }

  get type() {
    return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_0__.stringAttribute.get(this, 'type');
  }
  set type(value) {
    _shared_attributes_js__WEBPACK_IMPORTED_MODULE_0__.stringAttribute.set(this, 'type', value);
  }

  get src() {
    return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_0__.stringAttribute.get(this, 'src');
  }
  set src(value) {
    _shared_attributes_js__WEBPACK_IMPORTED_MODULE_0__.stringAttribute.set(this, 'src', value);
  }

  get defer() {
    return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_0__.booleanAttribute.get(this, 'defer');
  }

  set defer(value) {
    _shared_attributes_js__WEBPACK_IMPORTED_MODULE_0__.booleanAttribute.set(this, 'defer', value);
  }

  get crossOrigin() {
    return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_0__.stringAttribute.get(this, 'crossorigin');
  }
  set crossOrigin(value) {
    _shared_attributes_js__WEBPACK_IMPORTED_MODULE_0__.stringAttribute.set(this, 'crossorigin', value);
  }

  get nomodule() {
    return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_0__.booleanAttribute.get(this, 'nomodule');
  }
  set nomodule(value) {
    _shared_attributes_js__WEBPACK_IMPORTED_MODULE_0__.booleanAttribute.set(this, 'nomodule', value);
  }

  get referrerPolicy() {
    return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_0__.stringAttribute.get(this, 'referrerpolicy');
  }
  set referrerPolicy(value) {
    _shared_attributes_js__WEBPACK_IMPORTED_MODULE_0__.stringAttribute.set(this, 'referrerpolicy', value);
  }

  get nonce() {
    return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_0__.stringAttribute.get(this, 'nonce');
  }
  set nonce(value) {
    _shared_attributes_js__WEBPACK_IMPORTED_MODULE_0__.stringAttribute.set(this, 'nonce', value);
  }

  get async() {
    return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_0__.booleanAttribute.get(this, 'async');
  }
  set async(value) {
    _shared_attributes_js__WEBPACK_IMPORTED_MODULE_0__.booleanAttribute.set(this, 'async', value);
  }

  get text() { return this.textContent; }
  set text(content) { this.textContent = content; }
}

(0,_shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_1__.registerHTMLClass)(tagName, HTMLScriptElement);




/***/ }),

/***/ "./node_modules/linkedom/esm/html/select-element.js":
/*!**********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/select-element.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLSelectElement": function() { return /* binding */ HTMLSelectElement; }
/* harmony export */ });
/* harmony import */ var _shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/register-html-class.js */ "./node_modules/linkedom/esm/shared/register-html-class.js");
/* harmony import */ var _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/attributes.js */ "./node_modules/linkedom/esm/shared/attributes.js");
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");
/* harmony import */ var _interface_node_list_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../interface/node-list.js */ "./node_modules/linkedom/esm/interface/node-list.js");






const tagName = 'select';

/**
 * @implements globalThis.HTMLSelectElement
 */
class HTMLSelectElement extends _element_js__WEBPACK_IMPORTED_MODULE_2__.HTMLElement {
  constructor(ownerDocument, localName = tagName) {
    super(ownerDocument, localName);
  }

  get options() {
    let children = new _interface_node_list_js__WEBPACK_IMPORTED_MODULE_3__.NodeList;
    let {firstElementChild} = this;
    while (firstElementChild) {
      if (firstElementChild.tagName === 'OPTGROUP')
        children.push(...firstElementChild.children);
      else
        children.push(firstElementChild);
      firstElementChild = firstElementChild.nextElementSibling;
    }
    return children;
  }

  /* c8 ignore start */
  get disabled() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.booleanAttribute.get(this, 'disabled'); }
  set disabled(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.booleanAttribute.set(this, 'disabled', value); }

  get name() { return this.getAttribute('name'); }
  set name(value) { this.setAttribute('name', value); }
  /* c8 ignore stop */

  get value() { return this.querySelector('option[selected]')?.value; }
}

(0,_shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_0__.registerHTMLClass)(tagName, HTMLSelectElement);





/***/ }),

/***/ "./node_modules/linkedom/esm/html/slot-element.js":
/*!********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/slot-element.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLSlotElement": function() { return /* binding */ HTMLSlotElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLSlotElement
 */
class HTMLSlotElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'slot') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/source-element.js":
/*!**********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/source-element.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLSourceElement": function() { return /* binding */ HTMLSourceElement; }
/* harmony export */ });
/* harmony import */ var _shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/register-html-class.js */ "./node_modules/linkedom/esm/shared/register-html-class.js");
/* harmony import */ var _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/attributes.js */ "./node_modules/linkedom/esm/shared/attributes.js");
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");





const tagName = 'source';

/**
 * @implements globalThis.HTMLSourceElement
 */
class HTMLSourceElement extends _element_js__WEBPACK_IMPORTED_MODULE_2__.HTMLElement {
  constructor(ownerDocument, localName = tagName) {
    super(ownerDocument, localName);
  }

  /* c8 ignore start */
  get src() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'src'); }
  set src(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'src', value); }

  get srcset() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'srcset'); }
  set srcset(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'srcset', value); }

  get sizes() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'sizes'); }
  set sizes(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'sizes', value); }

  get type() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'type'); }
  set type(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'type', value); }
  /* c8 ignore stop */
}

(0,_shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_0__.registerHTMLClass)(tagName, HTMLSourceElement);




/***/ }),

/***/ "./node_modules/linkedom/esm/html/span-element.js":
/*!********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/span-element.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLSpanElement": function() { return /* binding */ HTMLSpanElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLSpanElement
 */
class HTMLSpanElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'span') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/style-element.js":
/*!*********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/style-element.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLStyleElement": function() { return /* binding */ HTMLStyleElement; }
/* harmony export */ });
/* harmony import */ var cssom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cssom */ "./node_modules/linkedom/node_modules/cssom/lib/index.js");
/* harmony import */ var _shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/register-html-class.js */ "./node_modules/linkedom/esm/shared/register-html-class.js");
/* harmony import */ var _shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _text_element_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./text-element.js */ "./node_modules/linkedom/esm/html/text-element.js");







const tagName = 'style';

/**
 * @implements globalThis.HTMLStyleElement
 */
class HTMLStyleElement extends _text_element_js__WEBPACK_IMPORTED_MODULE_3__.TextElement {
  constructor(ownerDocument, localName = tagName) {
    super(ownerDocument, localName);
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.SHEET] = null;
  }

  get sheet() {
    const sheet = this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.SHEET];
    if (sheet !== null) {
      return sheet;
    }
    return this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.SHEET] = (0,cssom__WEBPACK_IMPORTED_MODULE_0__.parse)(this.textContent);
  }

  get innerHTML() {
    return super.innerHTML || '';
  }
  set innerHTML(value) {
    super.textContent = value;
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.SHEET] = null;
  }
  get innerText() {
    return super.innerText || '';
  }
  set innerText(value) {
    super.textContent = value;
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.SHEET] = null;
  }
  get textContent() {
    return super.textContent || '';
  }
  set textContent(value) {
    super.textContent = value;
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.SHEET] = null;
  }
}

(0,_shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_1__.registerHTMLClass)(tagName, HTMLStyleElement);




/***/ }),

/***/ "./node_modules/linkedom/esm/html/table-caption-element.js":
/*!*****************************************************************!*\
  !*** ./node_modules/linkedom/esm/html/table-caption-element.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLTableCaptionElement": function() { return /* binding */ HTMLTableCaptionElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLTableCaptionElement
 */
class HTMLTableCaptionElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'caption') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/table-cell-element.js":
/*!**************************************************************!*\
  !*** ./node_modules/linkedom/esm/html/table-cell-element.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLTableCellElement": function() { return /* binding */ HTMLTableCellElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLTableCellElement
 */
class HTMLTableCellElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'td') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/table-element.js":
/*!*********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/table-element.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLTableElement": function() { return /* binding */ HTMLTableElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLTableElement
 */
class HTMLTableElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'table') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/table-row-element.js":
/*!*************************************************************!*\
  !*** ./node_modules/linkedom/esm/html/table-row-element.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLTableRowElement": function() { return /* binding */ HTMLTableRowElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLTableRowElement
 */
class HTMLTableRowElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'tr') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/template-element.js":
/*!************************************************************!*\
  !*** ./node_modules/linkedom/esm/html/template-element.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLTemplateElement": function() { return /* binding */ HTMLTemplateElement; }
/* harmony export */ });
/* harmony import */ var _shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/register-html-class.js */ "./node_modules/linkedom/esm/shared/register-html-class.js");
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");






const tagName = 'template';

/**
 * @implements globalThis.HTMLTemplateElement
 */
class HTMLTemplateElement extends _element_js__WEBPACK_IMPORTED_MODULE_2__.HTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, tagName);
    const content = this.ownerDocument.createDocumentFragment();
    (this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.CONTENT] = content)[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.PRIVATE] = this;
  }

  get content() {
    if (this.hasChildNodes() && !this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.CONTENT].hasChildNodes()) {
      for (const node of this.childNodes)
        this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.CONTENT].appendChild(node.cloneNode(true));
    }
    return this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.CONTENT];
  }
}

(0,_shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_1__.registerHTMLClass)(tagName, HTMLTemplateElement);




/***/ }),

/***/ "./node_modules/linkedom/esm/html/text-area-element.js":
/*!*************************************************************!*\
  !*** ./node_modules/linkedom/esm/html/text-area-element.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLTextAreaElement": function() { return /* binding */ HTMLTextAreaElement; }
/* harmony export */ });
/* harmony import */ var _shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/register-html-class.js */ "./node_modules/linkedom/esm/shared/register-html-class.js");
/* harmony import */ var _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/attributes.js */ "./node_modules/linkedom/esm/shared/attributes.js");
/* harmony import */ var _text_element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./text-element.js */ "./node_modules/linkedom/esm/html/text-element.js");





const tagName = 'textarea';

/**
 * @implements globalThis.HTMLTextAreaElement
 */
class HTMLTextAreaElement extends _text_element_js__WEBPACK_IMPORTED_MODULE_2__.TextElement {
  constructor(ownerDocument, localName = tagName) {
    super(ownerDocument, localName);
  }

  /* c8 ignore start */
  get disabled() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.booleanAttribute.get(this, 'disabled'); }
  set disabled(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.booleanAttribute.set(this, 'disabled', value); }

  get name() { return this.getAttribute('name'); }
  set name(value) { this.setAttribute('name', value); }

  get placeholder() { return this.getAttribute('placeholder'); }
  set placeholder(value) { this.setAttribute('placeholder', value); }

  get type() { return this.getAttribute('type'); }
  set type(value) { this.setAttribute('type', value); }

  get value() { return this.textContent; }
  set value(content) { this.textContent = content; }
  /* c8 ignore stop */
}

(0,_shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_0__.registerHTMLClass)(tagName, HTMLTextAreaElement);




/***/ }),

/***/ "./node_modules/linkedom/esm/html/text-element.js":
/*!********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/text-element.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextElement": function() { return /* binding */ TextElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


const {toString} = _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement.prototype;

class TextElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {

  get innerHTML() { return this.textContent; }
  set innerHTML(html) { this.textContent = html; }

  toString() {
    const outerHTML = toString.call(this.cloneNode());
    return outerHTML.replace(/></, `>${this.textContent}<`);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/time-element.js":
/*!********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/time-element.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLTimeElement": function() { return /* binding */ HTMLTimeElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLTimeElement
 */
class HTMLTimeElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'time') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/title-element.js":
/*!*********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/title-element.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLTitleElement": function() { return /* binding */ HTMLTitleElement; }
/* harmony export */ });
/* harmony import */ var _shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/register-html-class.js */ "./node_modules/linkedom/esm/shared/register-html-class.js");
/* harmony import */ var _text_element_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./text-element.js */ "./node_modules/linkedom/esm/html/text-element.js");




const tagName = 'title';

/**
 * @implements globalThis.HTMLTitleElement
 */
class HTMLTitleElement extends _text_element_js__WEBPACK_IMPORTED_MODULE_1__.TextElement {
  constructor(ownerDocument, localName = tagName) {
    super(ownerDocument, localName);
  }
}

(0,_shared_register_html_class_js__WEBPACK_IMPORTED_MODULE_0__.registerHTMLClass)(tagName, HTMLTitleElement);




/***/ }),

/***/ "./node_modules/linkedom/esm/html/track-element.js":
/*!*********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/track-element.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLTrackElement": function() { return /* binding */ HTMLTrackElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLTrackElement
 */
class HTMLTrackElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'track') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/u-list-element.js":
/*!**********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/u-list-element.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLUListElement": function() { return /* binding */ HTMLUListElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLUListElement
 */
class HTMLUListElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'ul') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/unknown-element.js":
/*!***********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/unknown-element.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLUnknownElement": function() { return /* binding */ HTMLUnknownElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLUnknownElement
 */
class HTMLUnknownElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'unknown') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/html/video-element.js":
/*!*********************************************************!*\
  !*** ./node_modules/linkedom/esm/html/video-element.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLVideoElement": function() { return /* binding */ HTMLVideoElement; }
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/html/element.js");


/**
 * @implements globalThis.HTMLVideoElement
 */
class HTMLVideoElement extends _element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement {
  constructor(ownerDocument, localName = 'video') {
    super(ownerDocument, localName);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/index.js":
/*!********************************************!*\
  !*** ./node_modules/linkedom/esm/index.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Attr": function() { return /* reexport safe */ _shared_facades_js__WEBPACK_IMPORTED_MODULE_2__.Attr; },
/* harmony export */   "CharacterData": function() { return /* reexport safe */ _shared_facades_js__WEBPACK_IMPORTED_MODULE_2__.CharacterData; },
/* harmony export */   "Comment": function() { return /* reexport safe */ _shared_facades_js__WEBPACK_IMPORTED_MODULE_2__.Comment; },
/* harmony export */   "CustomEvent": function() { return /* reexport safe */ _interface_custom_event_js__WEBPACK_IMPORTED_MODULE_6__.CustomEvent; },
/* harmony export */   "DOMParser": function() { return /* reexport safe */ _dom_parser_js__WEBPACK_IMPORTED_MODULE_0__.DOMParser; },
/* harmony export */   "Document": function() { return /* binding */ Document; },
/* harmony export */   "DocumentFragment": function() { return /* reexport safe */ _shared_facades_js__WEBPACK_IMPORTED_MODULE_2__.DocumentFragment; },
/* harmony export */   "DocumentType": function() { return /* reexport safe */ _shared_facades_js__WEBPACK_IMPORTED_MODULE_2__.DocumentType; },
/* harmony export */   "Element": function() { return /* reexport safe */ _shared_facades_js__WEBPACK_IMPORTED_MODULE_2__.Element; },
/* harmony export */   "Event": function() { return /* reexport safe */ _interface_event_js__WEBPACK_IMPORTED_MODULE_7__.Event; },
/* harmony export */   "EventTarget": function() { return /* reexport safe */ _interface_event_target_js__WEBPACK_IMPORTED_MODULE_8__.EventTarget; },
/* harmony export */   "Facades": function() { return /* reexport safe */ _shared_facades_js__WEBPACK_IMPORTED_MODULE_2__.Facades; },
/* harmony export */   "HTMLAnchorElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLAnchorElement; },
/* harmony export */   "HTMLAreaElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLAreaElement; },
/* harmony export */   "HTMLAudioElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLAudioElement; },
/* harmony export */   "HTMLBRElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLBRElement; },
/* harmony export */   "HTMLBaseElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLBaseElement; },
/* harmony export */   "HTMLBodyElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLBodyElement; },
/* harmony export */   "HTMLButtonElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLButtonElement; },
/* harmony export */   "HTMLCanvasElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLCanvasElement; },
/* harmony export */   "HTMLClasses": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLClasses; },
/* harmony export */   "HTMLDListElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLDListElement; },
/* harmony export */   "HTMLDataElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLDataElement; },
/* harmony export */   "HTMLDataListElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLDataListElement; },
/* harmony export */   "HTMLDetailsElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLDetailsElement; },
/* harmony export */   "HTMLDirectoryElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLDirectoryElement; },
/* harmony export */   "HTMLDivElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLDivElement; },
/* harmony export */   "HTMLElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLElement; },
/* harmony export */   "HTMLEmbedElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLEmbedElement; },
/* harmony export */   "HTMLFieldSetElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLFieldSetElement; },
/* harmony export */   "HTMLFontElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLFontElement; },
/* harmony export */   "HTMLFormElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLFormElement; },
/* harmony export */   "HTMLFrameElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLFrameElement; },
/* harmony export */   "HTMLFrameSetElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLFrameSetElement; },
/* harmony export */   "HTMLHRElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLHRElement; },
/* harmony export */   "HTMLHeadElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLHeadElement; },
/* harmony export */   "HTMLHeadingElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLHeadingElement; },
/* harmony export */   "HTMLHtmlElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLHtmlElement; },
/* harmony export */   "HTMLIFrameElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLIFrameElement; },
/* harmony export */   "HTMLImageElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLImageElement; },
/* harmony export */   "HTMLInputElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLInputElement; },
/* harmony export */   "HTMLLIElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLLIElement; },
/* harmony export */   "HTMLLabelElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLLabelElement; },
/* harmony export */   "HTMLLegendElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLLegendElement; },
/* harmony export */   "HTMLLinkElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLLinkElement; },
/* harmony export */   "HTMLMapElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLMapElement; },
/* harmony export */   "HTMLMarqueeElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLMarqueeElement; },
/* harmony export */   "HTMLMediaElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLMediaElement; },
/* harmony export */   "HTMLMenuElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLMenuElement; },
/* harmony export */   "HTMLMetaElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLMetaElement; },
/* harmony export */   "HTMLMeterElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLMeterElement; },
/* harmony export */   "HTMLModElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLModElement; },
/* harmony export */   "HTMLOListElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLOListElement; },
/* harmony export */   "HTMLObjectElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLObjectElement; },
/* harmony export */   "HTMLOptGroupElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLOptGroupElement; },
/* harmony export */   "HTMLOptionElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLOptionElement; },
/* harmony export */   "HTMLOutputElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLOutputElement; },
/* harmony export */   "HTMLParagraphElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLParagraphElement; },
/* harmony export */   "HTMLParamElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLParamElement; },
/* harmony export */   "HTMLPictureElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLPictureElement; },
/* harmony export */   "HTMLPreElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLPreElement; },
/* harmony export */   "HTMLProgressElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLProgressElement; },
/* harmony export */   "HTMLQuoteElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLQuoteElement; },
/* harmony export */   "HTMLScriptElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLScriptElement; },
/* harmony export */   "HTMLSelectElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLSelectElement; },
/* harmony export */   "HTMLSlotElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLSlotElement; },
/* harmony export */   "HTMLSourceElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLSourceElement; },
/* harmony export */   "HTMLSpanElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLSpanElement; },
/* harmony export */   "HTMLStyleElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLStyleElement; },
/* harmony export */   "HTMLTableCaptionElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLTableCaptionElement; },
/* harmony export */   "HTMLTableCellElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLTableCellElement; },
/* harmony export */   "HTMLTableElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLTableElement; },
/* harmony export */   "HTMLTableRowElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLTableRowElement; },
/* harmony export */   "HTMLTemplateElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLTemplateElement; },
/* harmony export */   "HTMLTextAreaElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLTextAreaElement; },
/* harmony export */   "HTMLTimeElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLTimeElement; },
/* harmony export */   "HTMLTitleElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLTitleElement; },
/* harmony export */   "HTMLTrackElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLTrackElement; },
/* harmony export */   "HTMLUListElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLUListElement; },
/* harmony export */   "HTMLUnknownElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLUnknownElement; },
/* harmony export */   "HTMLVideoElement": function() { return /* reexport safe */ _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__.HTMLVideoElement; },
/* harmony export */   "InputEvent": function() { return /* reexport safe */ _interface_input_event_js__WEBPACK_IMPORTED_MODULE_9__.InputEvent; },
/* harmony export */   "Node": function() { return /* reexport safe */ _shared_facades_js__WEBPACK_IMPORTED_MODULE_2__.Node; },
/* harmony export */   "NodeFilter": function() { return /* reexport safe */ _interface_node_filter_js__WEBPACK_IMPORTED_MODULE_11__.NodeFilter; },
/* harmony export */   "NodeList": function() { return /* reexport safe */ _interface_node_list_js__WEBPACK_IMPORTED_MODULE_10__.NodeList; },
/* harmony export */   "SVGElement": function() { return /* reexport safe */ _shared_facades_js__WEBPACK_IMPORTED_MODULE_2__.SVGElement; },
/* harmony export */   "ShadowRoot": function() { return /* reexport safe */ _shared_facades_js__WEBPACK_IMPORTED_MODULE_2__.ShadowRoot; },
/* harmony export */   "Text": function() { return /* reexport safe */ _shared_facades_js__WEBPACK_IMPORTED_MODULE_2__.Text; },
/* harmony export */   "illegalConstructor": function() { return /* reexport safe */ _shared_facades_js__WEBPACK_IMPORTED_MODULE_2__.illegalConstructor; },
/* harmony export */   "parseHTML": function() { return /* binding */ parseHTML; },
/* harmony export */   "parseJSON": function() { return /* reexport safe */ _shared_parse_json_js__WEBPACK_IMPORTED_MODULE_4__.parseJSON; },
/* harmony export */   "toJSON": function() { return /* reexport safe */ _shared_parse_json_js__WEBPACK_IMPORTED_MODULE_4__.toJSON; }
/* harmony export */ });
/* harmony import */ var _dom_parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom/parser.js */ "./node_modules/linkedom/esm/dom/parser.js");
/* harmony import */ var _interface_document_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interface/document.js */ "./node_modules/linkedom/esm/interface/document.js");
/* harmony import */ var _shared_facades_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shared/facades.js */ "./node_modules/linkedom/esm/shared/facades.js");
/* harmony import */ var _shared_object_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shared/object.js */ "./node_modules/linkedom/esm/shared/object.js");
/* harmony import */ var _shared_parse_json_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shared/parse-json.js */ "./node_modules/linkedom/esm/shared/parse-json.js");
/* harmony import */ var _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./shared/html-classes.js */ "./node_modules/linkedom/esm/shared/html-classes.js");
/* harmony import */ var _interface_custom_event_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./interface/custom-event.js */ "./node_modules/linkedom/esm/interface/custom-event.js");
/* harmony import */ var _interface_event_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./interface/event.js */ "./node_modules/linkedom/esm/interface/event.js");
/* harmony import */ var _interface_event_target_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./interface/event-target.js */ "./node_modules/linkedom/esm/interface/event-target.js");
/* harmony import */ var _interface_input_event_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./interface/input-event.js */ "./node_modules/linkedom/esm/interface/input-event.js");
/* harmony import */ var _interface_node_list_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./interface/node-list.js */ "./node_modules/linkedom/esm/interface/node-list.js");
/* harmony import */ var _interface_node_filter_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./interface/node-filter.js */ "./node_modules/linkedom/esm/interface/node-filter.js");



















const parseHTML = (html, globals = null) => (new _dom_parser_js__WEBPACK_IMPORTED_MODULE_0__.DOMParser).parseFromString(
  html, 'text/html', globals
).defaultView;

function Document() {
  (0,_shared_facades_js__WEBPACK_IMPORTED_MODULE_2__.illegalConstructor)();
}

(0,_shared_object_js__WEBPACK_IMPORTED_MODULE_3__.setPrototypeOf)(Document, _interface_document_js__WEBPACK_IMPORTED_MODULE_1__.Document).prototype = _interface_document_js__WEBPACK_IMPORTED_MODULE_1__.Document.prototype;


/***/ }),

/***/ "./node_modules/linkedom/esm/interface/attr.js":
/*!*****************************************************!*\
  !*** ./node_modules/linkedom/esm/interface/attr.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Attr": function() { return /* binding */ Attr; }
/* harmony export */ });
/* harmony import */ var _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/constants.js */ "./node_modules/linkedom/esm/shared/constants.js");
/* harmony import */ var _shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/utils.js */ "./node_modules/linkedom/esm/shared/utils.js");
/* harmony import */ var _shared_jsdon_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/jsdon.js */ "./node_modules/linkedom/esm/shared/jsdon.js");
/* harmony import */ var _shared_attributes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/attributes.js */ "./node_modules/linkedom/esm/shared/attributes.js");
/* harmony import */ var _mutation_observer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mutation-observer.js */ "./node_modules/linkedom/esm/interface/mutation-observer.js");
/* harmony import */ var _custom_element_registry_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./custom-element-registry.js */ "./node_modules/linkedom/esm/interface/custom-element-registry.js");
/* harmony import */ var _node_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./node.js */ "./node_modules/linkedom/esm/interface/node.js");











const QUOTE = /"/g;

/**
 * @implements globalThis.Attr
 */
class Attr extends _node_js__WEBPACK_IMPORTED_MODULE_7__.Node {
  constructor(ownerDocument, name, value = '') {
    super(ownerDocument, '#attribute', _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ATTRIBUTE_NODE);
    this.ownerElement = null;
    this.name = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.String)(name);
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.VALUE] = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.String)(value);
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.CHANGED] = false;
  }

  get value() { return this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.VALUE]; }
  set value(newValue) {
    const {[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.VALUE]: oldValue, name, ownerElement} = this;
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.VALUE] = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.String)(newValue);
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.CHANGED] = true;
    if (ownerElement) {
      (0,_mutation_observer_js__WEBPACK_IMPORTED_MODULE_5__.attributeChangedCallback)(ownerElement, name, oldValue);
      (0,_custom_element_registry_js__WEBPACK_IMPORTED_MODULE_6__.attributeChangedCallback)(ownerElement, name, oldValue, this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.VALUE]);
    }
  }

  cloneNode() {
    const {ownerDocument, name, [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.VALUE]: value} = this;
    return new Attr(ownerDocument, name, value);
  }

  toString() {
    const {name, [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.VALUE]: value} = this;
    return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_4__.emptyAttributes.has(name) && !value ?
            name : `${name}="${value.replace(QUOTE, '&quot;')}"`;
  }

  toJSON() {
    const json = [];
    (0,_shared_jsdon_js__WEBPACK_IMPORTED_MODULE_3__.attrAsJSON)(this, json);
    return json;
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/interface/character-data.js":
/*!***************************************************************!*\
  !*** ./node_modules/linkedom/esm/interface/character-data.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CharacterData": function() { return /* binding */ CharacterData; }
/* harmony export */ });
/* harmony import */ var _shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.js */ "./node_modules/linkedom/esm/shared/utils.js");
/* harmony import */ var _shared_node_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/node.js */ "./node_modules/linkedom/esm/shared/node.js");
/* harmony import */ var _shared_jsdon_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/jsdon.js */ "./node_modules/linkedom/esm/shared/jsdon.js");
/* harmony import */ var _mixin_non_document_type_child_node_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../mixin/non-document-type-child-node.js */ "./node_modules/linkedom/esm/mixin/non-document-type-child-node.js");
/* harmony import */ var _mixin_child_node_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../mixin/child-node.js */ "./node_modules/linkedom/esm/mixin/child-node.js");
/* harmony import */ var _node_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node.js */ "./node_modules/linkedom/esm/interface/node.js");
/* harmony import */ var _mutation_observer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./mutation-observer.js */ "./node_modules/linkedom/esm/interface/mutation-observer.js");
// https://dom.spec.whatwg.org/#interface-characterdata












/**
 * @implements globalThis.CharacterData
 */
class CharacterData extends _node_js__WEBPACK_IMPORTED_MODULE_6__.Node {

  constructor(ownerDocument, localName, nodeType, data) {
    super(ownerDocument, localName, nodeType);
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.VALUE] = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__.String)(data);
  }

  // <Mixins>
  get isConnected() { return (0,_shared_node_js__WEBPACK_IMPORTED_MODULE_2__.isConnected)(this); }
  get parentElement() { return (0,_shared_node_js__WEBPACK_IMPORTED_MODULE_2__.parentElement)(this); }
  get previousSibling() { return (0,_shared_node_js__WEBPACK_IMPORTED_MODULE_2__.previousSibling)(this); }
  get nextSibling() { return (0,_shared_node_js__WEBPACK_IMPORTED_MODULE_2__.nextSibling)(this); }

  get previousElementSibling() { return (0,_mixin_non_document_type_child_node_js__WEBPACK_IMPORTED_MODULE_4__.previousElementSibling)(this); }
  get nextElementSibling() { return (0,_mixin_non_document_type_child_node_js__WEBPACK_IMPORTED_MODULE_4__.nextElementSibling)(this); }

  before(...nodes) { (0,_mixin_child_node_js__WEBPACK_IMPORTED_MODULE_5__.before)(this, nodes); }
  after(...nodes) { (0,_mixin_child_node_js__WEBPACK_IMPORTED_MODULE_5__.after)(this, nodes); }
  replaceWith(...nodes) { (0,_mixin_child_node_js__WEBPACK_IMPORTED_MODULE_5__.replaceWith)(this, nodes); }
  remove() { (0,_mixin_child_node_js__WEBPACK_IMPORTED_MODULE_5__.remove)(this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.PREV], this, this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.NEXT]); }
  // </Mixins>

  // CharacterData only
  /* c8 ignore start */
  get data() { return this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.VALUE]; }
  set data(value) {
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.VALUE] = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__.String)(value);
    (0,_mutation_observer_js__WEBPACK_IMPORTED_MODULE_7__.moCallback)(this, this.parentNode);
  }

  get nodeValue() { return this.data; }
  set nodeValue(value) { this.data = value; }

  get textContent() { return this.data; }
  set textContent(value) { this.data = value; }

  get length() { return this.data.length; }

  substringData(offset, count) {
    return this.data.substr(offset, count);
  }

  appendData(data) {
    this.data += data;
  }

  insertData(offset, data) {
    const {data: t} = this;
    this.data = t.slice(0, offset) + data + t.slice(offset);
  }

  deleteData(offset, count) {
    const {data: t} = this;
    this.data = t.slice(0, offset) + t.slice(offset + count);
  }

  replaceData(offset, count, data) {
    const {data: t} = this;
    this.data = t.slice(0, offset) + data + t.slice(offset + count);
  }
  /* c8 ignore stop */

  toJSON() {
    const json = [];
    (0,_shared_jsdon_js__WEBPACK_IMPORTED_MODULE_3__.characterDataAsJSON)(this, json);
    return json;
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/interface/comment.js":
/*!********************************************************!*\
  !*** ./node_modules/linkedom/esm/interface/comment.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Comment": function() { return /* binding */ Comment; }
/* harmony export */ });
/* harmony import */ var _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/constants.js */ "./node_modules/linkedom/esm/shared/constants.js");
/* harmony import */ var _shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _character_data_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./character-data.js */ "./node_modules/linkedom/esm/interface/character-data.js");





/**
 * @implements globalThis.Comment
 */
class Comment extends _character_data_js__WEBPACK_IMPORTED_MODULE_2__.CharacterData {
  constructor(ownerDocument, data = '') {
    super(ownerDocument, '#comment', _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.COMMENT_NODE, data);
  }

  cloneNode() {
    const {ownerDocument, [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.VALUE]: data} = this;
    return new Comment(ownerDocument, data);
  }

  toString() { return `<!--${this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.VALUE]}-->`; }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/interface/css-style-declaration.js":
/*!**********************************************************************!*\
  !*** ./node_modules/linkedom/esm/interface/css-style-declaration.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CSSStyleDeclaration": function() { return /* binding */ CSSStyleDeclaration; }
/* harmony export */ });
/* harmony import */ var uhyphen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uhyphen */ "./node_modules/uhyphen/esm/index.js");
/* harmony import */ var _shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");




const refs = new WeakMap;

const getKeys = style => [...style.keys()].filter(key => key !== _shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PRIVATE);

const updateKeys = style => {
  const attr = refs.get(style).getAttributeNode('style');
  if (!attr || attr[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.CHANGED] || style.get(_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PRIVATE) !== attr) {
    style.clear();
    if (attr) {
      style.set(_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PRIVATE, attr);
      for (const rule of attr[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.VALUE].split(/\s*;\s*/)) {
        let [key, ...rest] = rule.split(':');
        if (rest.length > 0) {
          key = key.trim();
          const value = rest.join(':').trim();
          if (key && value)
            style.set(key, value);
        }
      }
    }
  }
  return attr;
};

const handler = {
  get(style, name) {
    if (name in prototype)
      return style[name];
    updateKeys(style);
    if (name === 'length')
      return getKeys(style).length;
    if (/^\d+$/.test(name))
      return getKeys(style)[name];
    return style.get((0,uhyphen__WEBPACK_IMPORTED_MODULE_0__["default"])(name));
  },

  set(style, name, value) {
    if (name === 'cssText')
      style[name] = value;
    else {
      let attr = updateKeys(style);
      if (value == null)
        style.delete((0,uhyphen__WEBPACK_IMPORTED_MODULE_0__["default"])(name));
      else
        style.set((0,uhyphen__WEBPACK_IMPORTED_MODULE_0__["default"])(name), value);
      if (!attr) {
        const element = refs.get(style);
        attr = element.ownerDocument.createAttribute('style');
        element.setAttributeNode(attr);
        style.set(_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PRIVATE, attr);
      }
      attr[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.CHANGED] = false;
      attr[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.VALUE] = style.toString();
    }
    return true;
  }
};

/**
 * @implements globalThis.CSSStyleDeclaration
 */
class CSSStyleDeclaration extends Map {
  constructor(element) {
    super();
    refs.set(this, element);
    /* c8 ignore start */
    return new Proxy(this, handler);
    /* c8 ignore stop */
  }

  get cssText() {
    return this.toString();
  }

  set cssText(value) {
    refs.get(this).setAttribute('style', value);
  }

  getPropertyValue(name) {
    const self = this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PRIVATE];
    return handler.get(self, name);
  }

  setProperty(name, value) {
    const self = this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PRIVATE];
    handler.set(self, name, value);
  }

  removeProperty(name) {
    const self = this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PRIVATE];
    handler.set(self, name, null);
  }

  [Symbol.iterator]() {
    const keys = getKeys(this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PRIVATE]);
    const {length} = keys;
    let i = 0;
    return {
      next() {
        const done = i === length;
        return {done, value: done ? null : keys[i++]};
      }
    };
  }

  get[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PRIVATE]() { return this; }

  toString() {
    const self = this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PRIVATE];
    updateKeys(self);
    const cssText = [];
    self.forEach(push, cssText);
    return cssText.join(';');
  }
}

const {prototype} = CSSStyleDeclaration;

function push(value, key) {
  if (key !== _shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PRIVATE)
    this.push(`${key}:${value}`);
}


/***/ }),

/***/ "./node_modules/linkedom/esm/interface/custom-element-registry.js":
/*!************************************************************************!*\
  !*** ./node_modules/linkedom/esm/interface/custom-element-registry.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Classes": function() { return /* binding */ Classes; },
/* harmony export */   "CustomElementRegistry": function() { return /* binding */ CustomElementRegistry; },
/* harmony export */   "attributeChangedCallback": function() { return /* binding */ attributeChangedCallback; },
/* harmony export */   "connectedCallback": function() { return /* binding */ connectedCallback; },
/* harmony export */   "customElements": function() { return /* binding */ customElements; },
/* harmony export */   "disconnectedCallback": function() { return /* binding */ disconnectedCallback; }
/* harmony export */ });
/* harmony import */ var _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/constants.js */ "./node_modules/linkedom/esm/shared/constants.js");
/* harmony import */ var _shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _shared_object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/object.js */ "./node_modules/linkedom/esm/shared/object.js");
/* harmony import */ var _shared_shadow_roots_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/shadow-roots.js */ "./node_modules/linkedom/esm/shared/shadow-roots.js");





let reactive = false;

const Classes = new WeakMap;

const customElements = new WeakMap;

const attributeChangedCallback = (element, attributeName, oldValue, newValue) => {
  if (
    reactive &&
    customElements.has(element) &&
    element.attributeChangedCallback &&
    element.constructor.observedAttributes.includes(attributeName)
  ) {
    element.attributeChangedCallback(attributeName, oldValue, newValue);
  }
};

const createTrigger = (method, isConnected) => element => {
  if (customElements.has(element)) {
    const info = customElements.get(element);
    if (info.connected !== isConnected && element.isConnected === isConnected) {
      info.connected = isConnected;
      if (method in element)
        element[method]();
    }
  }
};

const triggerConnected = createTrigger('connectedCallback', true);
const connectedCallback = element => {
  if (reactive) {
    triggerConnected(element);
    if (_shared_shadow_roots_js__WEBPACK_IMPORTED_MODULE_3__.shadowRoots.has(element))
      element = _shared_shadow_roots_js__WEBPACK_IMPORTED_MODULE_3__.shadowRoots.get(element).shadowRoot;
    let {[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT]: next, [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.END]: end} = element;
    while (next !== end) {
      if (next.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE)
        triggerConnected(next);
      next = next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT];
    }
  }
};

const triggerDisconnected = createTrigger('disconnectedCallback', false);
const disconnectedCallback = element => {
  if (reactive) {
    triggerDisconnected(element);
    if (_shared_shadow_roots_js__WEBPACK_IMPORTED_MODULE_3__.shadowRoots.has(element))
      element = _shared_shadow_roots_js__WEBPACK_IMPORTED_MODULE_3__.shadowRoots.get(element).shadowRoot;
    let {[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT]: next, [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.END]: end} = element;
    while (next !== end) {
      if (next.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE)
        triggerDisconnected(next);
      next = next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT];
    }
  }
};

/**
 * @implements globalThis.CustomElementRegistry
 */
class CustomElementRegistry {

  /**
   * @param {Document} ownerDocument
   */
  constructor(ownerDocument) {
    /**
     * @private
     */
    this.ownerDocument = ownerDocument;

    /**
     * @private
     */
    this.registry = new Map;

    /**
     * @private
     */
    this.waiting = new Map;

    /**
     * @private
     */
    this.active = false;
  }

  /**
   * @param {string} localName the custom element definition name
   * @param {Function} Class the custom element **Class** definition
   * @param {object?} options the optional object with an `extends` property
   */
  define(localName, Class, options = {}) {
    const {ownerDocument, registry, waiting} = this;

    if (registry.has(localName))
      throw new Error('unable to redefine ' + localName);

    if (Classes.has(Class))
      throw new Error('unable to redefine the same class: ' + Class);

    this.active = (reactive = true);

    const {extends: extend} = options;

    Classes.set(Class, {
      ownerDocument,
      options: {is: extend ? localName : ''},
      localName: extend || localName
    });

    const check = extend ?
      element => {
        return element.localName === extend &&
               element.getAttribute('is') === localName;
      } :
      element => element.localName === localName;
    registry.set(localName, {Class, check});
    if (waiting.has(localName)) {
      for (const resolve of waiting.get(localName))
        resolve(Class);
      waiting.delete(localName);
    }
    ownerDocument.querySelectorAll(
      extend ? `${extend}[is="${localName}"]` : localName
    ).forEach(this.upgrade, this);
  }

  /**
   * @param {Element} element
   */
  upgrade(element) {
    if (customElements.has(element))
      return;
    const {ownerDocument, registry} = this;
    const ce = element.getAttribute('is') || element.localName;
    if (registry.has(ce)) {
      const {Class, check} = registry.get(ce);
      if (check(element)) {
        const {attributes, isConnected} = element;
        for (const attr of attributes)
          element.removeAttributeNode(attr);

        const values = (0,_shared_object_js__WEBPACK_IMPORTED_MODULE_2__.entries)(element);
        for (const [key] of values)
          delete element[key];

        (0,_shared_object_js__WEBPACK_IMPORTED_MODULE_2__.setPrototypeOf)(element, Class.prototype);
        ownerDocument[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.UPGRADE] = {element, values};
        new Class(ownerDocument, ce);

        customElements.set(element, {connected: isConnected});

        for (const attr of attributes)
          element.setAttributeNode(attr);

        if (isConnected && element.connectedCallback)
          element.connectedCallback();
      }
    }
  }

  /**
   * @param {string} localName the custom element definition name
   */
  whenDefined(localName) {
    const {registry, waiting} = this;
    return new Promise(resolve => {
      if (registry.has(localName))
        resolve(registry.get(localName).Class);
      else {
        if (!waiting.has(localName))
          waiting.set(localName, []);
        waiting.get(localName).push(resolve);
      }
    });
  }

  /**
   * @param {string} localName the custom element definition name
   * @returns {Function?} the custom element **Class**, if any
   */
  get(localName) {
    const info = this.registry.get(localName);
    return info && info.Class;
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/interface/custom-event.js":
/*!*************************************************************!*\
  !*** ./node_modules/linkedom/esm/interface/custom-event.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CustomEvent": function() { return /* binding */ CustomEvent; }
/* harmony export */ });
/* harmony import */ var _event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event.js */ "./node_modules/linkedom/esm/interface/event.js");
// https://dom.spec.whatwg.org/#interface-customevent

/* c8 ignore start */

// One day Node might have CustomEvent too



/**
 * @implements globalThis.CustomEvent
 */
class CustomEvent extends _event_js__WEBPACK_IMPORTED_MODULE_0__.Event {
  constructor(type, eventInitDict = {}) {
    super(type, eventInitDict);
    this.detail = eventInitDict.detail;
  }
}

/* c8 ignore stop */


/***/ }),

/***/ "./node_modules/linkedom/esm/interface/document-fragment.js":
/*!******************************************************************!*\
  !*** ./node_modules/linkedom/esm/interface/document-fragment.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DocumentFragment": function() { return /* binding */ DocumentFragment; }
/* harmony export */ });
/* harmony import */ var _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/constants.js */ "./node_modules/linkedom/esm/shared/constants.js");
/* harmony import */ var _mixin_non_element_parent_node_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mixin/non-element-parent-node.js */ "./node_modules/linkedom/esm/mixin/non-element-parent-node.js");



/**
 * @implements globalThis.DocumentFragment
 */
class DocumentFragment extends _mixin_non_element_parent_node_js__WEBPACK_IMPORTED_MODULE_1__.NonElementParentNode {
  constructor(ownerDocument) {
    super(ownerDocument, '#document-fragment', _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_FRAGMENT_NODE);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/interface/document-type.js":
/*!**************************************************************!*\
  !*** ./node_modules/linkedom/esm/interface/document-type.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DocumentType": function() { return /* binding */ DocumentType; }
/* harmony export */ });
/* harmony import */ var _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/constants.js */ "./node_modules/linkedom/esm/shared/constants.js");
/* harmony import */ var _shared_jsdon_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/jsdon.js */ "./node_modules/linkedom/esm/shared/jsdon.js");
/* harmony import */ var _node_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node.js */ "./node_modules/linkedom/esm/interface/node.js");





/**
 * @implements globalThis.DocumentType
 */
class DocumentType extends _node_js__WEBPACK_IMPORTED_MODULE_2__.Node {
  constructor(ownerDocument, name, publicId = '', systemId = '') {
    super(ownerDocument, '#document-type', _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_TYPE_NODE);
    this.name = name;
    this.publicId = publicId;
    this.systemId = systemId;
  }

  cloneNode() {
    const {ownerDocument, name, publicId, systemId} = this;
    return new DocumentType(ownerDocument, name, publicId, systemId);
  }

  toString() {
    const {name, publicId, systemId} = this;
    const hasPublic = 0 < publicId.length;
    const str = [name];
    if (hasPublic)
      str.push('PUBLIC', `"${publicId}"`);
    if (systemId.length) {
      if (!hasPublic)
        str.push('SYSTEM');
      str.push(`"${systemId}"`);
    }
    return `<!DOCTYPE ${str.join(' ')}>`;
  }

  toJSON() {
    const json = [];
    (0,_shared_jsdon_js__WEBPACK_IMPORTED_MODULE_1__.documentTypeAsJSON)(this, json);
    return json;
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/interface/document.js":
/*!*********************************************************!*\
  !*** ./node_modules/linkedom/esm/interface/document.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Document": function() { return /* binding */ Document; }
/* harmony export */ });
/* harmony import */ var _commonjs_perf_hooks_cjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../commonjs/perf_hooks.cjs */ "./node_modules/linkedom/commonjs/perf_hooks.cjs");
/* harmony import */ var _shared_constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/constants.js */ "./node_modules/linkedom/esm/shared/constants.js");
/* harmony import */ var _shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _shared_facades_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/facades.js */ "./node_modules/linkedom/esm/shared/facades.js");
/* harmony import */ var _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/html-classes.js */ "./node_modules/linkedom/esm/shared/html-classes.js");
/* harmony import */ var _shared_mime_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shared/mime.js */ "./node_modules/linkedom/esm/shared/mime.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../shared/utils.js */ "./node_modules/linkedom/esm/shared/utils.js");
/* harmony import */ var _shared_object_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../shared/object.js */ "./node_modules/linkedom/esm/shared/object.js");
/* harmony import */ var _mixin_non_element_parent_node_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../mixin/non-element-parent-node.js */ "./node_modules/linkedom/esm/mixin/non-element-parent-node.js");
/* harmony import */ var _svg_element_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../svg/element.js */ "./node_modules/linkedom/esm/svg/element.js");
/* harmony import */ var _attr_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./attr.js */ "./node_modules/linkedom/esm/interface/attr.js");
/* harmony import */ var _comment_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./comment.js */ "./node_modules/linkedom/esm/interface/comment.js");
/* harmony import */ var _custom_element_registry_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./custom-element-registry.js */ "./node_modules/linkedom/esm/interface/custom-element-registry.js");
/* harmony import */ var _custom_event_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./custom-event.js */ "./node_modules/linkedom/esm/interface/custom-event.js");
/* harmony import */ var _document_fragment_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./document-fragment.js */ "./node_modules/linkedom/esm/interface/document-fragment.js");
/* harmony import */ var _document_type_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./document-type.js */ "./node_modules/linkedom/esm/interface/document-type.js");
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./element.js */ "./node_modules/linkedom/esm/interface/element.js");
/* harmony import */ var _event_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./event.js */ "./node_modules/linkedom/esm/interface/event.js");
/* harmony import */ var _event_target_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./event-target.js */ "./node_modules/linkedom/esm/interface/event-target.js");
/* harmony import */ var _input_event_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./input-event.js */ "./node_modules/linkedom/esm/interface/input-event.js");
/* harmony import */ var _image_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./image.js */ "./node_modules/linkedom/esm/interface/image.js");
/* harmony import */ var _mutation_observer_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./mutation-observer.js */ "./node_modules/linkedom/esm/interface/mutation-observer.js");
/* harmony import */ var _named_node_map_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./named-node-map.js */ "./node_modules/linkedom/esm/interface/named-node-map.js");
/* harmony import */ var _node_list_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./node-list.js */ "./node_modules/linkedom/esm/interface/node-list.js");
/* harmony import */ var _range_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./range.js */ "./node_modules/linkedom/esm/interface/range.js");
/* harmony import */ var _text_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./text.js */ "./node_modules/linkedom/esm/interface/text.js");
/* harmony import */ var _tree_walker_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./tree-walker.js */ "./node_modules/linkedom/esm/interface/tree-walker.js");


































const query = (method, ownerDocument, selectors) => {
  let {[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.NEXT]: next, [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.END]: end} = ownerDocument;
  return method.call({ownerDocument, [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.NEXT]: next, [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.END]: end}, selectors);
};

const globalExports = (0,_shared_object_js__WEBPACK_IMPORTED_MODULE_7__.assign)(
  {},
  _shared_facades_js__WEBPACK_IMPORTED_MODULE_3__.Facades,
  _shared_html_classes_js__WEBPACK_IMPORTED_MODULE_4__.HTMLClasses,
  {
    CustomEvent: _custom_event_js__WEBPACK_IMPORTED_MODULE_13__.CustomEvent,
    Event: _event_js__WEBPACK_IMPORTED_MODULE_17__.Event,
    EventTarget: _event_target_js__WEBPACK_IMPORTED_MODULE_18__.EventTarget,
    InputEvent: _input_event_js__WEBPACK_IMPORTED_MODULE_19__.InputEvent,
    NamedNodeMap: _named_node_map_js__WEBPACK_IMPORTED_MODULE_22__.NamedNodeMap,
    NodeList: _node_list_js__WEBPACK_IMPORTED_MODULE_23__.NodeList
  }
);

const window = new WeakMap;

/**
 * @implements globalThis.Document
 */
class Document extends _mixin_non_element_parent_node_js__WEBPACK_IMPORTED_MODULE_8__.NonElementParentNode {
  constructor(type) {
    super(null, '#document', _shared_constants_js__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT_NODE);
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.CUSTOM_ELEMENTS] = {active: false, registry: null};
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.MUTATION_OBSERVER] = {active: false, class: null};
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.MIME] = _shared_mime_js__WEBPACK_IMPORTED_MODULE_5__.Mime[type];
    /** @type {DocumentType} */
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.DOCTYPE] = null;
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.DOM_PARSER] = null;
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.GLOBALS] = null;
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.IMAGE] = null;
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.UPGRADE] = null;
  }

  /**
   * @type {globalThis.Document['defaultView']}
   */
  get defaultView() {
    if (!window.has(this))
      window.set(this, new Proxy(globalThis, {
        set: (target, name, value) => {
          switch (name) {
            case 'addEventListener':
            case 'removeEventListener':
            case 'dispatchEvent':
              this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.EVENT_TARGET][name] = value;
              break;
            default:
              target[name] = value;
              break;
          }
          return true;
        },
        get: (globalThis, name) => {
          switch (name) {
            case 'addEventListener':
            case 'removeEventListener':
            case 'dispatchEvent':
              if (!this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.EVENT_TARGET]) {
                const et = this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.EVENT_TARGET] = new _event_target_js__WEBPACK_IMPORTED_MODULE_18__.EventTarget;
                et.dispatchEvent = et.dispatchEvent.bind(et);
                et.addEventListener = et.addEventListener.bind(et);
                et.removeEventListener = et.removeEventListener.bind(et);
              }
              return this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.EVENT_TARGET][name];
            case 'document':
              return this;
            /* c8 ignore start */
            case 'navigator':
              return {
                userAgent: 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36'
              };
            /* c8 ignore stop */
            case 'window':
              return window.get(this);
            case 'customElements':
              if (!this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.CUSTOM_ELEMENTS].registry)
                this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.CUSTOM_ELEMENTS] = new _custom_element_registry_js__WEBPACK_IMPORTED_MODULE_12__.CustomElementRegistry(this);
              return this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.CUSTOM_ELEMENTS];
            case 'performance':
              return _commonjs_perf_hooks_cjs__WEBPACK_IMPORTED_MODULE_0__.performance;
            case 'DOMParser':
              return this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.DOM_PARSER];
            case 'Image':
              if (!this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.IMAGE])
                this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.IMAGE] = (0,_image_js__WEBPACK_IMPORTED_MODULE_20__.ImageClass)(this);
              return this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.IMAGE];
            case 'MutationObserver':
              if (!this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.MUTATION_OBSERVER].class)
                this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.MUTATION_OBSERVER] = new _mutation_observer_js__WEBPACK_IMPORTED_MODULE_21__.MutationObserverClass(this);
              return this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.MUTATION_OBSERVER].class;
          }
          return (this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.GLOBALS] && this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.GLOBALS][name]) ||
                  globalExports[name] ||
                  globalThis[name];
        }
      }));
    return window.get(this);
  }

  get doctype() {
    const docType = this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.DOCTYPE];
    if (docType)
      return docType;
    const {firstChild} = this;
    if (firstChild && firstChild.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT_TYPE_NODE)
      return (this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.DOCTYPE] = firstChild);
    return null;
  }

  set doctype(value) {
    if (/^([a-z:]+)(\s+system|\s+public(\s+"([^"]+)")?)?(\s+"([^"]+)")?/i.test(value)) {
      const {$1: name, $4: publicId, $6: systemId} = RegExp;
      this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.DOCTYPE] = new _document_type_js__WEBPACK_IMPORTED_MODULE_15__.DocumentType(this, name, publicId, systemId);
      (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_6__.knownSiblings)(this, this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.DOCTYPE], this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.NEXT]);
    }
  }

  get documentElement() {
    return this.firstElementChild;
  }

  get isConnected() { return true; }

  /**
   * @protected
   */
   _getParent() {
    return this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.EVENT_TARGET];
  }

  createAttribute(name) { return new _attr_js__WEBPACK_IMPORTED_MODULE_10__.Attr(this, name); }
  createComment(textContent) { return new _comment_js__WEBPACK_IMPORTED_MODULE_11__.Comment(this, textContent); }
  createDocumentFragment() { return new _document_fragment_js__WEBPACK_IMPORTED_MODULE_14__.DocumentFragment(this); }
  createDocumentType(name, publicId, systemId) { return new _document_type_js__WEBPACK_IMPORTED_MODULE_15__.DocumentType(this, name, publicId, systemId); }
  createElement(localName) { return new _element_js__WEBPACK_IMPORTED_MODULE_16__.Element(this, localName); }
  createRange() {
    const range = new _range_js__WEBPACK_IMPORTED_MODULE_24__.Range;
    range.commonAncestorContainer = this;
    return range;
  }
  createTextNode(textContent) { return new _text_js__WEBPACK_IMPORTED_MODULE_25__.Text(this, textContent); }
  createTreeWalker(root, whatToShow = -1) { return new _tree_walker_js__WEBPACK_IMPORTED_MODULE_26__.TreeWalker(root, whatToShow); }
  createNodeIterator(root, whatToShow = -1) { return this.createTreeWalker(root, whatToShow); }

  createEvent(name) {
    const event = (0,_shared_object_js__WEBPACK_IMPORTED_MODULE_7__.create)(name === 'Event' ? new _event_js__WEBPACK_IMPORTED_MODULE_17__.Event('') : new _custom_event_js__WEBPACK_IMPORTED_MODULE_13__.CustomEvent(''));
    event.initEvent = event.initCustomEvent = (
      type,
      canBubble = false,
      cancelable = false,
      detail
    ) => {
      (0,_shared_object_js__WEBPACK_IMPORTED_MODULE_7__.defineProperties)(event, {
        type: {value: type},
        canBubble: {value: canBubble},
        cancelable: {value: cancelable},
        detail: {value: detail}
      });
    };
    return event;
  }

  cloneNode(deep = false) {
    const {
      constructor,
      [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.CUSTOM_ELEMENTS]: customElements,
      [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.DOCTYPE]: doctype
    } = this;
    const document = new constructor();
    document[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.CUSTOM_ELEMENTS] = customElements;
    if (deep) {
      const end = document[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.END];
      const {childNodes} = this;
      for (let {length} = childNodes, i = 0; i < length; i++)
        document.insertBefore(childNodes[i].cloneNode(true), end);
      if (doctype)
        document[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.DOCTYPE] = childNodes[0];
    }
    return document;
  }

  importNode(externalNode) {
    // important: keep the signature length as *one*
    // or it would behave like old IE or Edge with polyfills
    const deep = 1 < arguments.length && !!arguments[1];
    const node = externalNode.cloneNode(deep);
    const {[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.CUSTOM_ELEMENTS]: customElements} = this;
    const {active} = customElements;
    const upgrade = element => {
      const {ownerDocument, nodeType} = element;
      element.ownerDocument = this;
      if (active && ownerDocument !== this && nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_1__.ELEMENT_NODE)
        customElements.upgrade(element);
    };
    upgrade(node);
    if (deep) {
      switch (node.nodeType) {
        case _shared_constants_js__WEBPACK_IMPORTED_MODULE_1__.ELEMENT_NODE:
        case _shared_constants_js__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT_FRAGMENT_NODE: {
          let {[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.NEXT]: next, [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.END]: end} = node;
          while (next !== end) {
            if (next.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_1__.ELEMENT_NODE)
              upgrade(next);
            next = next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.NEXT];
          }
          break;
        }
      }
    }
    return node;
  }

  toString() { return this.childNodes.join(''); }

  querySelector(selectors) {
    return query(super.querySelector, this, selectors);
  }

  querySelectorAll(selectors) {
    return query(super.querySelectorAll, this, selectors);
  }

  /* c8 ignore start */
  getElementsByTagNameNS(_, name) {
    return this.getElementsByTagName(name);
  }
  createAttributeNS(_, name) {
    return this.createAttribute(name);
  }
  createElementNS(nsp, localName, options) {
    return nsp === _shared_constants_js__WEBPACK_IMPORTED_MODULE_1__.SVG_NAMESPACE ?
            new _svg_element_js__WEBPACK_IMPORTED_MODULE_9__.SVGElement(this, localName, null) :
            this.createElement(localName, options);
  }
  /* c8 ignore stop */
}

(0,_shared_object_js__WEBPACK_IMPORTED_MODULE_7__.setPrototypeOf)(
  globalExports.Document = function Document() {
    (0,_shared_facades_js__WEBPACK_IMPORTED_MODULE_3__.illegalConstructor)();
  },
  Document
).prototype = Document.prototype;


/***/ }),

/***/ "./node_modules/linkedom/esm/interface/element.js":
/*!********************************************************!*\
  !*** ./node_modules/linkedom/esm/interface/element.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Element": function() { return /* binding */ Element; }
/* harmony export */ });
/* harmony import */ var _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/constants.js */ "./node_modules/linkedom/esm/shared/constants.js");
/* harmony import */ var _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/attributes.js */ "./node_modules/linkedom/esm/shared/attributes.js");
/* harmony import */ var _shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/utils.js */ "./node_modules/linkedom/esm/shared/utils.js");
/* harmony import */ var _shared_jsdon_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/jsdon.js */ "./node_modules/linkedom/esm/shared/jsdon.js");
/* harmony import */ var _shared_matches_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shared/matches.js */ "./node_modules/linkedom/esm/shared/matches.js");
/* harmony import */ var _shared_shadow_roots_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../shared/shadow-roots.js */ "./node_modules/linkedom/esm/shared/shadow-roots.js");
/* harmony import */ var _shared_node_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../shared/node.js */ "./node_modules/linkedom/esm/shared/node.js");
/* harmony import */ var _mixin_non_document_type_child_node_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../mixin/non-document-type-child-node.js */ "./node_modules/linkedom/esm/mixin/non-document-type-child-node.js");
/* harmony import */ var _mixin_child_node_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../mixin/child-node.js */ "./node_modules/linkedom/esm/mixin/child-node.js");
/* harmony import */ var _mixin_inner_html_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../mixin/inner-html.js */ "./node_modules/linkedom/esm/mixin/inner-html.js");
/* harmony import */ var _mixin_parent_node_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../mixin/parent-node.js */ "./node_modules/linkedom/esm/mixin/parent-node.js");
/* harmony import */ var _dom_string_map_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../dom/string-map.js */ "./node_modules/linkedom/esm/dom/string-map.js");
/* harmony import */ var _dom_token_list_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../dom/token-list.js */ "./node_modules/linkedom/esm/dom/token-list.js");
/* harmony import */ var _css_style_declaration_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./css-style-declaration.js */ "./node_modules/linkedom/esm/interface/css-style-declaration.js");
/* harmony import */ var _event_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./event.js */ "./node_modules/linkedom/esm/interface/event.js");
/* harmony import */ var _named_node_map_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./named-node-map.js */ "./node_modules/linkedom/esm/interface/named-node-map.js");
/* harmony import */ var _shadow_root_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./shadow-root.js */ "./node_modules/linkedom/esm/interface/shadow-root.js");
/* harmony import */ var _node_list_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./node-list.js */ "./node_modules/linkedom/esm/interface/node-list.js");
/* harmony import */ var _attr_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./attr.js */ "./node_modules/linkedom/esm/interface/attr.js");
/* harmony import */ var _text_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./text.js */ "./node_modules/linkedom/esm/interface/text.js");
// https://dom.spec.whatwg.org/#interface-element































// <utils>
const attributesHandler = {
  get(target, key) {
    return key in target ? target[key] : target.find(({name}) => name === key);
  }
};

const create = (ownerDocument, element, localName)  => {
  if ('ownerSVGElement' in element) {
    const svg = ownerDocument.createElementNS(_shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.SVG_NAMESPACE, localName);
    svg.ownerSVGElement = element.ownerSVGElement;
    return svg;
  }
  return ownerDocument.createElement(localName);
};

const isVoid = ({localName, ownerDocument}) => {
  return ownerDocument[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.MIME].voidElements.test(localName);
};

// </utils>

/**
 * @implements globalThis.Element
 */
class Element extends _mixin_parent_node_js__WEBPACK_IMPORTED_MODULE_11__.ParentNode {
  constructor(ownerDocument, localName) {
    super(ownerDocument, localName, _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE);
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.CLASS_LIST] = null;
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.DATASET] = null;
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.STYLE] = null;
  }

  // <Mixins>
  get isConnected() { return (0,_shared_node_js__WEBPACK_IMPORTED_MODULE_7__.isConnected)(this); }
  get parentElement() { return (0,_shared_node_js__WEBPACK_IMPORTED_MODULE_7__.parentElement)(this); }
  get previousSibling() { return (0,_shared_node_js__WEBPACK_IMPORTED_MODULE_7__.previousSibling)(this); }
  get nextSibling() { return (0,_shared_node_js__WEBPACK_IMPORTED_MODULE_7__.nextSibling)(this); }
  get namespaceURI() {
    return 'http://www.w3.org/1999/xhtml';
  }

  get previousElementSibling() { return (0,_mixin_non_document_type_child_node_js__WEBPACK_IMPORTED_MODULE_8__.previousElementSibling)(this); }
  get nextElementSibling() { return (0,_mixin_non_document_type_child_node_js__WEBPACK_IMPORTED_MODULE_8__.nextElementSibling)(this); }

  before(...nodes) { (0,_mixin_child_node_js__WEBPACK_IMPORTED_MODULE_9__.before)(this, nodes); }
  after(...nodes) { (0,_mixin_child_node_js__WEBPACK_IMPORTED_MODULE_9__.after)(this, nodes); }
  replaceWith(...nodes) { (0,_mixin_child_node_js__WEBPACK_IMPORTED_MODULE_9__.replaceWith)(this, nodes); }
  remove() { (0,_mixin_child_node_js__WEBPACK_IMPORTED_MODULE_9__.remove)(this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.PREV], this, this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.END][_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.NEXT]); }
  // </Mixins>

  // <specialGetters>
  get id() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'id'); }
  set id(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'id', value); }

  get className() { return this.classList.value; }
  set className(value) {
    const {classList} = this;
    classList.clear();
    classList.add(...value.split(/\s+/));
  }

  get nodeName() { return (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_3__.localCase)(this); }
  get tagName() { return (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_3__.localCase)(this); }

  get classList() {
    return this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.CLASS_LIST] || (
      this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.CLASS_LIST] = new _dom_token_list_js__WEBPACK_IMPORTED_MODULE_13__.DOMTokenList(this)
    );
  }

  get dataset() {
    return this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.DATASET] || (
      this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.DATASET] = new _dom_string_map_js__WEBPACK_IMPORTED_MODULE_12__.DOMStringMap(this)
    );
  }

  get nonce() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.get(this, 'nonce'); }
  set nonce(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.stringAttribute.set(this, 'nonce', value); }

  get style() {
    return this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.STYLE] || (
      this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.STYLE] = new _css_style_declaration_js__WEBPACK_IMPORTED_MODULE_14__.CSSStyleDeclaration(this)
    );
  }

  get tabIndex() { return _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.numericAttribute.get(this, 'tabindex') || -1; }
  set tabIndex(value) { _shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.numericAttribute.set(this, 'tabindex', value); }
  // </specialGetters>


  // <contentRelated>
  get innerText() {
    const text = [];
    let {[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.NEXT]: next, [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.END]: end} = this;
    while (next !== end) {
      if (next.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.TEXT_NODE) {
        text.push(next.textContent.replace(/\s+/g, ' '));
      } else if(
        text.length && next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.NEXT] != end &&
        _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.BLOCK_ELEMENTS.has(next.tagName)
      ) {
        text.push('\n');
      }
      next = next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.NEXT];
    }
    return text.join('');
  }

  /**
   * @returns {String}
   */
  get textContent() {
    const text = [];
    let {[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.NEXT]: next, [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.END]: end} = this;
    while (next !== end) {
      if (next.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.TEXT_NODE)
        text.push(next.textContent);
      next = next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.NEXT];
    }
    return text.join('');
  }

  set textContent(text) {
    this.replaceChildren();
    if (text)
      this.appendChild(new _text_js__WEBPACK_IMPORTED_MODULE_20__.Text(this.ownerDocument, text));
  }

  get innerHTML() {
    return (0,_mixin_inner_html_js__WEBPACK_IMPORTED_MODULE_10__.getInnerHtml)(this);
  }
  set innerHTML(html) {
    (0,_mixin_inner_html_js__WEBPACK_IMPORTED_MODULE_10__.setInnerHtml)(this, html);
  }

  get outerHTML() { return this.toString(); }
  set outerHTML(html) {
    const template = this.ownerDocument.createElement('');
    template.innerHTML = html;
    this.replaceWith(...template.childNodes);
  }
  // </contentRelated>

  // <attributes>
  get attributes() {
    const attributes = new _named_node_map_js__WEBPACK_IMPORTED_MODULE_16__.NamedNodeMap(this);
    let next = this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.NEXT];
    while (next.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ATTRIBUTE_NODE) {
      attributes.push(next);
      next = next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.NEXT];
    }
    return new Proxy(attributes, attributesHandler);
  }

  focus() { this.dispatchEvent(new _event_js__WEBPACK_IMPORTED_MODULE_15__.Event('focus')); }

  getAttribute(name) {
    if (name === 'class')
      return this.className;
    const attribute = this.getAttributeNode(name);
    return attribute && attribute.value;
  }

  getAttributeNode(name) {
    let next = this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.NEXT];
    while (next.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ATTRIBUTE_NODE) {
      if (next.name === name)
        return next;
      next = next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.NEXT];
    }
    return null;
  }

  getAttributeNames() {
    const attributes = new _node_list_js__WEBPACK_IMPORTED_MODULE_18__.NodeList;
    let next = this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.NEXT];
    while (next.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ATTRIBUTE_NODE) {
      attributes.push(next.name);
      next = next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.NEXT];
    }
    return attributes;
  }

  hasAttribute(name) { return !!this.getAttributeNode(name); }
  hasAttributes() { return this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.NEXT].nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ATTRIBUTE_NODE; }

  removeAttribute(name) {
    if (name === 'class' && this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.CLASS_LIST])
        this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.CLASS_LIST].clear();
    let next = this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.NEXT];
    while (next.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ATTRIBUTE_NODE) {
      if (next.name === name) {
        (0,_shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.removeAttribute)(this, next);
        return;
      }
      next = next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.NEXT];
    }
  }

  removeAttributeNode(attribute) {
    let next = this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.NEXT];
    while (next.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ATTRIBUTE_NODE) {
      if (next === attribute) {
        (0,_shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.removeAttribute)(this, next);
        return;
      }
      next = next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.NEXT];
    }
  }

  setAttribute(name, value) {
    if (name === 'class')
      this.className = value;
    else {
      const attribute = this.getAttributeNode(name);
      if (attribute)
        attribute.value = value;
      else
        (0,_shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(this, new _attr_js__WEBPACK_IMPORTED_MODULE_19__.Attr(this.ownerDocument, name, value));
    }
  }

  setAttributeNode(attribute) {
    const {name} = attribute;
    const previously = this.getAttributeNode(name);
    if (previously !== attribute) {
      if (previously)
        this.removeAttributeNode(previously);
      const {ownerElement} = attribute;
      if (ownerElement)
        ownerElement.removeAttributeNode(attribute);
      (0,_shared_attributes_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(this, attribute);
    }
    return previously;
  }

  toggleAttribute(name, force) {
    if (this.hasAttribute(name)) {
      if (!force) {
        this.removeAttribute(name);
        return false;
      }
      return true;
    }
    else if (force || arguments.length === 1) {
      this.setAttribute(name, '');
      return true;
    }
    return false;
  }
  // </attributes>

  // <ShadowDOM>
  get shadowRoot() {
    if (_shared_shadow_roots_js__WEBPACK_IMPORTED_MODULE_6__.shadowRoots.has(this)) {
      const {mode, shadowRoot} = _shared_shadow_roots_js__WEBPACK_IMPORTED_MODULE_6__.shadowRoots.get(this);
      if (mode === 'open')
        return shadowRoot;
    }
    return null;
  }

  attachShadow(init) {
    if (_shared_shadow_roots_js__WEBPACK_IMPORTED_MODULE_6__.shadowRoots.has(this))
      throw new Error('operation not supported');
    // TODO: shadowRoot should be likely a specialized class that extends DocumentFragment
    //       but until DSD is out, I am not sure I should spend time on this.
    const shadowRoot = new _shadow_root_js__WEBPACK_IMPORTED_MODULE_17__.ShadowRoot(this);
    shadowRoot.append(...this.childNodes);
    _shared_shadow_roots_js__WEBPACK_IMPORTED_MODULE_6__.shadowRoots.set(this, {
      mode: init.mode,
      shadowRoot
    });
    return shadowRoot;
  }
  // </ShadowDOM>

  // <selectors>
  matches(selectors) { return (0,_shared_matches_js__WEBPACK_IMPORTED_MODULE_5__.matches)(this, selectors); }
  closest(selectors) {
    let parentElement = this;
    const matches = (0,_shared_matches_js__WEBPACK_IMPORTED_MODULE_5__.prepareMatch)(parentElement, selectors);
    while (parentElement && !matches(parentElement))
      parentElement = parentElement.parentElement;
    return parentElement;
  }
  // </selectors>

  // <insertAdjacent>
  insertAdjacentElement(position, element) {
    const {parentElement} = this;
    switch (position) {
      case 'beforebegin':
        if (parentElement) {
          parentElement.insertBefore(element, this);
          break;
        }
        return null;
      case 'afterbegin':
        this.insertBefore(element, this.firstChild);
        break;
      case 'beforeend':
        this.insertBefore(element, null);
        break;
      case 'afterend':
        if (parentElement) {
          parentElement.insertBefore(element, this.nextSibling);
          break;
        }
        return null;
    }
    return element;
  }

  insertAdjacentHTML(position, html) {
    const template = this.ownerDocument.createElement('template');
    template.innerHTML = html;
    this.insertAdjacentElement(position, template.content);
  }

  insertAdjacentText(position, text) {
    const node = this.ownerDocument.createTextNode(text);
    this.insertAdjacentElement(position, node);
  }
  // </insertAdjacent>

  cloneNode(deep = false) {
    const {ownerDocument, localName} = this;
    const addNext = next => {
      next.parentNode = parentNode;
      (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_3__.knownAdjacent)($next, next);
      $next = next;
    };
    const clone = create(ownerDocument, this, localName);
    let parentNode = clone, $next = clone;
    let {[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.NEXT]: next, [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.END]: prev} = this;
    while (next !== prev && (deep || next.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ATTRIBUTE_NODE)) {
      switch (next.nodeType) {
        case _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.NODE_END:
          (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_3__.knownAdjacent)($next, parentNode[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.END]);
          $next = parentNode[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.END];
          parentNode = parentNode.parentNode;
          break;
        case _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE: {
          const node = create(ownerDocument, next, next.localName);
          addNext(node);
          parentNode = node;
          break;
        }
        case _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ATTRIBUTE_NODE: {
          const attr = next.cloneNode(deep);
          attr.ownerElement = parentNode;
          addNext(attr);
          break;
        }
        case _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.TEXT_NODE:
        case _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.COMMENT_NODE:
          addNext(next.cloneNode(deep));
          break;
      }
      next = next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.NEXT];
    }
    (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_3__.knownAdjacent)($next, clone[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.END]);
    return clone;
  }

  // <custom>
  toString() {
    const out = [];
    const {[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.END]: end} = this;
    let next = {[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.NEXT]: this};
    let isOpened = false;
    do {
      next = next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.NEXT];
      switch (next.nodeType) {
        case _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ATTRIBUTE_NODE: {
          const attr = ' ' + next;
          switch (attr) {
            case ' id':
            case ' class':
            case ' style':
              break;
            default:
              out.push(attr);
          }
          break;
        }
        case _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.NODE_END: {
          const start = next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.START];
          if (isOpened) {
            if ('ownerSVGElement' in start)
              out.push(' />');
            else if (isVoid(start))
              out.push((0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_3__.ignoreCase)(start) ? '>' : ' />');
            else
              out.push(`></${start.localName}>`);
            isOpened = false;
          }
          else
            out.push(`</${start.localName}>`);
          break;
        }
        case _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE:
          if (isOpened)
            out.push('>');
          if (next.toString !== this.toString) {
            out.push(next.toString());
            next = next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_2__.END];
            isOpened = false;
          }
          else {
            out.push(`<${next.localName}`);
            isOpened = true;
          }
          break;
        case _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.TEXT_NODE:
        case _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.COMMENT_NODE:
          out.push((isOpened ? '>' : '') + next);
          isOpened = false;
          break;
      }
    } while (next !== end);
    return out.join('');
  }

  toJSON() {
    const json = [];
    (0,_shared_jsdon_js__WEBPACK_IMPORTED_MODULE_4__.elementAsJSON)(this, json);
    return json;
  }
  // </custom>


  /* c8 ignore start */
  getAttributeNS(_, name) { return this.getAttribute(name); }
  getElementsByTagNameNS(_, name) { return this.getElementsByTagName(name); }
  hasAttributeNS(_, name) { return this.hasAttribute(name); }
  removeAttributeNS(_, name) { this.removeAttribute(name); }
  setAttributeNS(_, name, value) { this.setAttribute(name, value); }
  setAttributeNodeNS(attr) { return this.setAttributeNode(attr); }
  /* c8 ignore stop */
}


/***/ }),

/***/ "./node_modules/linkedom/esm/interface/event-target.js":
/*!*************************************************************!*\
  !*** ./node_modules/linkedom/esm/interface/event-target.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventTarget": function() { return /* binding */ DOMEventTarget; }
/* harmony export */ });
// https://dom.spec.whatwg.org/#interface-eventtarget

const wm = new WeakMap();

function dispatch(event, listener) {
  if (typeof listener === 'function')
    listener.call(event.target, event);
  else
    listener.handleEvent(event);
  return event._stopImmediatePropagationFlag;
}

function invokeListeners({currentTarget, target}) {
  const map = wm.get(currentTarget);
  if (map && map.has(this.type)) {
    const listeners = map.get(this.type);
    if (currentTarget === target) {
      this.eventPhase = this.AT_TARGET;
    } else {
      this.eventPhase = this.BUBBLING_PHASE;
    }

    this.currentTarget = currentTarget;
    this.target = target;
    for (const [listener, options] of listeners) {
      if (options && options.once)
        listeners.delete(listener);
      if (dispatch(this, listener))
        break;
    }
    delete this.currentTarget;
    delete this.target;
    return this.cancelBubble;
  }
}


/**
 * @implements globalThis.EventTarget
 */
class DOMEventTarget {

  constructor() {
    wm.set(this, new Map);
  }

  /**
   * @protected
   */
  _getParent() {
    return null;
  }

  addEventListener(type, listener, options) {
    const map = wm.get(this);
    if (!map.has(type)) 
      map.set(type, new Map);
    map.get(type).set(listener, options);
  }

  removeEventListener(type, listener) {
    const map = wm.get(this);
    if (map.has(type)) {
      const listeners = map.get(type);
      if (listeners.delete(listener) && !listeners.size)
        map.delete(type);
    }
  }

  dispatchEvent(event) {
    let node = this;
    event.eventPhase = event.CAPTURING_PHASE;

    // intentionally simplified, specs imply way more code: https://dom.spec.whatwg.org/#event-path
    while (node) {
      if (node.dispatchEvent)
        event._path.push({currentTarget: node, target: this});
      node = event.bubbles && node._getParent && node._getParent();
    }
    event._path.some(invokeListeners, event);
    event._path = [];
    event.eventPhase = event.NONE;
    return !event.defaultPrevented;
  }

}




/***/ }),

/***/ "./node_modules/linkedom/esm/interface/event.js":
/*!******************************************************!*\
  !*** ./node_modules/linkedom/esm/interface/event.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Event": function() { return /* binding */ GlobalEvent; }
/* harmony export */ });
// https://dom.spec.whatwg.org/#interface-event

/* c8 ignore start */

// Node 15 has Event but 14 and 12 don't
const BUBBLING_PHASE = 3;
const AT_TARGET = 2;
const CAPTURING_PHASE = 1;
const NONE = 0;

/**
 * @implements globalThis.Event
 */
class GlobalEvent {
    static get BUBBLING_PHASE() { return BUBBLING_PHASE; }
    static get AT_TARGET() { return AT_TARGET; }
    static get CAPTURING_PHASE() { return CAPTURING_PHASE; }
    static get NONE() { return NONE; }

    constructor(type, eventInitDict = {}) {
      this.type = type;
      this.bubbles = !!eventInitDict.bubbles;
      this.cancelBubble = false;
      this._stopImmediatePropagationFlag = false;
      this.cancelable = !!eventInitDict.cancelable;
      this.eventPhase = this.NONE;
      this.timeStamp = Date.now();
      this.defaultPrevented = false;
      this.originalTarget = null;
      this.returnValue = null;
      this.srcElement = null;
      this.target = null;
      this._path = [];
    }

    get BUBBLING_PHASE() { return BUBBLING_PHASE; }
    get AT_TARGET() { return AT_TARGET; }
    get CAPTURING_PHASE() { return CAPTURING_PHASE; }
    get NONE() { return NONE; }

    preventDefault() { this.defaultPrevented = true; }

    // simplified implementation, should be https://dom.spec.whatwg.org/#dom-event-composedpath
    composedPath() {
      return this._path;
    }

    stopPropagation() {
      this.cancelBubble = true;
    }
    
    stopImmediatePropagation() {
      this.stopPropagation();
      this._stopImmediatePropagationFlag = true;
    }
  }



/* c8 ignore stop */


/***/ }),

/***/ "./node_modules/linkedom/esm/interface/image.js":
/*!******************************************************!*\
  !*** ./node_modules/linkedom/esm/interface/image.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ImageClass": function() { return /* binding */ ImageClass; }
/* harmony export */ });
/* harmony import */ var _html_image_element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../html/image-element.js */ "./node_modules/linkedom/esm/html/image-element.js");


const ImageClass = ownerDocument =>
/**
 * @implements globalThis.Image
 */
class Image extends _html_image_element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLImageElement {
  constructor(width, height) {
    super(ownerDocument);
    switch (arguments.length) {
      case 1:
        this.height = width;
        this.width = width;
        break;
      case 2:
        this.height = height;
        this.width = width;
        break;
    }
  }
};


/***/ }),

/***/ "./node_modules/linkedom/esm/interface/input-event.js":
/*!************************************************************!*\
  !*** ./node_modules/linkedom/esm/interface/input-event.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InputEvent": function() { return /* binding */ InputEvent; }
/* harmony export */ });
/* harmony import */ var _event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event.js */ "./node_modules/linkedom/esm/interface/event.js");
// https://dom.spec.whatwg.org/#interface-customevent

/* c8 ignore start */

// One day Node might have CustomEvent too



/**
 * @implements globalThis.InputEvent
 */
class InputEvent extends _event_js__WEBPACK_IMPORTED_MODULE_0__.Event {
  constructor(type, inputEventInit = {}) {
    super(type, inputEventInit);
    this.inputType = inputEventInit.inputType;
    this.data = inputEventInit.data;
    this.dataTransfer = inputEventInit.dataTransfer;
    this.isComposing = inputEventInit.isComposing || false;
    this.ranges = inputEventInit.ranges;
  }
}
/* c8 ignore stop */


/***/ }),

/***/ "./node_modules/linkedom/esm/interface/mutation-observer.js":
/*!******************************************************************!*\
  !*** ./node_modules/linkedom/esm/interface/mutation-observer.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MutationObserverClass": function() { return /* binding */ MutationObserverClass; },
/* harmony export */   "attributeChangedCallback": function() { return /* binding */ attributeChangedCallback; },
/* harmony export */   "moCallback": function() { return /* binding */ moCallback; }
/* harmony export */ });
/* harmony import */ var _shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");


const createRecord =
  (type, target, addedNodes, removedNodes, attributeName, oldValue) =>
 ({type, target, addedNodes, removedNodes, attributeName, oldValue});

const queueAttribute = (
  observer, target, attributeName, attributeFilter, attributeOldValue, oldValue
) => {
  if ((!attributeFilter || attributeFilter.includes(attributeName))) {
    const {callback, records, scheduled} = observer;
    records.push(createRecord(
      'attributes', target,
      [], [],
      attributeName, attributeOldValue ? oldValue : void 0
    ));
    if (!scheduled) {
      observer.scheduled = true;
      Promise.resolve().then(() => {
        observer.scheduled = false;
        callback(records.splice(0), observer);
      });
    }
  }
};

const attributeChangedCallback = (element, attributeName, oldValue) => {
  const {ownerDocument} = element;
  const {active, observers} = ownerDocument[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.MUTATION_OBSERVER];
  if (active) {
    for (const observer of observers) {
      for (const [
        target,
        {
          childList,
          subtree,
          attributes,
          attributeFilter,
          attributeOldValue
        }
      ] of observer.nodes) {
        if (childList) {
          if (
            (subtree && (target === ownerDocument || target.contains(element))) ||
            (!subtree && target.children.includes(element))
          ) {
            queueAttribute(
              observer, element,
              attributeName, attributeFilter, attributeOldValue, oldValue
            );
            break;
          }
        }
        else if (
          attributes &&
          target === element
        ) {
          queueAttribute(
            observer, element,
            attributeName, attributeFilter, attributeOldValue, oldValue
          );
          break;
        }
      }
    }
  }
};

const moCallback = (element, parentNode) => {
  const {ownerDocument} = element;
  const {active, observers} = ownerDocument[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.MUTATION_OBSERVER];
  if (active) {
    for (const observer of observers) {
      for (const [target, {subtree, childList, characterData}] of observer.nodes) {
        if (childList) {
          if (
            (parentNode && (target === parentNode || (subtree && target.contains(parentNode)))) ||
            (!parentNode && ((subtree && (target === ownerDocument || target.contains(element))) ||
                            (!subtree && target[characterData ? 'childNodes' : 'children'].includes(element))))
          ) {
            const {callback, records, scheduled} = observer;
            records.push(createRecord(
              'childList', target,
              parentNode ? [] : [element], parentNode ? [element] : []
            ));
            if (!scheduled) {
              observer.scheduled = true;
              Promise.resolve().then(() => {
                observer.scheduled = false;
                callback(records.splice(0), observer);
              });
            }
            break;
          }
        }
      }
    }
  }
};

class MutationObserverClass {
  constructor(ownerDocument) {
    const observers = new Set;
    this.observers = observers;
    this.active = false;

    /**
     * @implements globalThis.MutationObserver
     */
    this.class = class MutationObserver {

      constructor(callback) {
        /**
         * @private
         */
        this.callback = callback;

        /**
         * @private
         */
        this.nodes = new Map;

        /**
         * @private
         */
        this.records = [];

        /**
         * @private
         */
        this.scheduled = false;
      }

      disconnect() {
        this.records.splice(0);
        this.nodes.clear();
        observers.delete(this);
        ownerDocument[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.MUTATION_OBSERVER].active = !!observers.size;
      }

      /**
       * @param {Element} target
       * @param {MutationObserverInit} options
       */
      observe(target, options = {
        subtree: false,
        childList: false,
        attributes: false,
        attributeFilter: null,
        attributeOldValue: false,
        characterData: false,
        // TODO: not implemented yet
        // characterDataOldValue: false
      }) {
        if (('attributeOldValue' in options) || ('attributeFilter' in options))
          options.attributes = true;
        // if ('characterDataOldValue' in options)
        //   options.characterData = true;
        options.childList = !!options.childList;
        options.subtree = !!options.subtree;
        this.nodes.set(target, options);
        observers.add(this);
        ownerDocument[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.MUTATION_OBSERVER].active = true;
      }

      /**
       * @returns {MutationRecord[]}
       */
      takeRecords() { return this.records.splice(0); }
    }
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/interface/named-node-map.js":
/*!***************************************************************!*\
  !*** ./node_modules/linkedom/esm/interface/named-node-map.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NamedNodeMap": function() { return /* binding */ NamedNodeMap; }
/* harmony export */ });
/**
 * @implements globalThis.NamedNodeMap
 */
class NamedNodeMap extends Array {
  constructor(ownerElement) {
    super();
    this.ownerElement = ownerElement;
  }

  getNamedItem(name) {
    return this.ownerElement.getAttributeNode(name);
  }

  setNamedItem(attr) {
    this.ownerElement.setAttributeNode(attr);
    this.unshift(attr);
  }

  removeNamedItem(name) {
    const item = this.getNamedItem(name);
    this.ownerElement.removeAttribute(name);
    this.splice(this.indexOf(item), 1);
  }

  item(index) {
    return index < this.length ? this[index] : null;
  }

  /* c8 ignore start */
  getNamedItemNS(_, name) {
    return this.getNamedItem(name);
  }

  setNamedItemNS(_, attr) {
    return this.setNamedItem(attr);
  }

  removeNamedItemNS(_, name) {
    return this.removeNamedItem(name);
  }
  /* c8 ignore stop */
}


/***/ }),

/***/ "./node_modules/linkedom/esm/interface/node-filter.js":
/*!************************************************************!*\
  !*** ./node_modules/linkedom/esm/interface/node-filter.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NodeFilter": function() { return /* binding */ NodeFilter; }
/* harmony export */ });
/* harmony import */ var _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/constants.js */ "./node_modules/linkedom/esm/shared/constants.js");


class NodeFilter {
  static get SHOW_ALL() { return _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.SHOW_ALL; }
  static get SHOW_ELEMENT() { return _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.SHOW_ELEMENT; }
  static get SHOW_COMMENT() { return _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.SHOW_COMMENT; }
  static get SHOW_TEXT() { return _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.SHOW_TEXT; }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/interface/node-list.js":
/*!**********************************************************!*\
  !*** ./node_modules/linkedom/esm/interface/node-list.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NodeList": function() { return /* binding */ NodeList; }
/* harmony export */ });
// https://dom.spec.whatwg.org/#interface-nodelist

/**
 * @implements globalThis.NodeList
 */
class NodeList extends Array {
  item(i) { return i < this.length ? this[i] : null; }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/interface/node.js":
/*!*****************************************************!*\
  !*** ./node_modules/linkedom/esm/interface/node.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Node": function() { return /* binding */ Node; }
/* harmony export */ });
/* harmony import */ var _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/constants.js */ "./node_modules/linkedom/esm/shared/constants.js");
/* harmony import */ var _shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _event_target_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./event-target.js */ "./node_modules/linkedom/esm/interface/event-target.js");
/* harmony import */ var _node_list_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node-list.js */ "./node_modules/linkedom/esm/interface/node-list.js");
// https://dom.spec.whatwg.org/#node









const getParentNodeCount = ({parentNode}) => {
  let count = 0;
  while (parentNode) {
    count++;
    parentNode = parentNode.parentNode;
  }
  return count;
};

/**
 * @implements globalThis.Node
 */
class Node extends _event_target_js__WEBPACK_IMPORTED_MODULE_2__.EventTarget {

  static get ELEMENT_NODE() { return _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE; }
  static get ATTRIBUTE_NODE() { return _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ATTRIBUTE_NODE; }
  static get TEXT_NODE() { return _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.TEXT_NODE; }
  static get COMMENT_NODE() { return _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.COMMENT_NODE; }
  static get DOCUMENT_NODE() { return _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_NODE; }
  static get DOCUMENT_FRAGMENT_NODE() { return _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_FRAGMENT_NODE; }
  static get DOCUMENT_TYPE_NODE() { return _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_TYPE_NODE; }

  constructor(ownerDocument, localName, nodeType) {
    super();
    this.ownerDocument = ownerDocument;
    this.localName = localName;
    this.nodeType = nodeType;
    this.parentNode = null;
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT] = null;
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PREV] = null;
  }

  get ELEMENT_NODE() { return _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE; }
  get ATTRIBUTE_NODE() { return _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ATTRIBUTE_NODE; }
  get TEXT_NODE() { return _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.TEXT_NODE; }
  get COMMENT_NODE() { return _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.COMMENT_NODE; }
  get DOCUMENT_NODE() { return _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_NODE; }
  get DOCUMENT_FRAGMENT_NODE() { return _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_FRAGMENT_NODE; }
  get DOCUMENT_TYPE_NODE() { return _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_TYPE_NODE; }

  get baseURI() {
    const ownerDocument = this.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_NODE ?
                            this : this.ownerDocument;
    if (ownerDocument) {
      const base = ownerDocument.querySelector('base');
      if (base)
        return base.getAttribute('href');

      const {location} = ownerDocument.defaultView;
      if (location)
        return location.href;
    }

    return null;
  }

  /* c8 ignore start */
  // mixin: node
  get isConnected() { return false; }
  get nodeName() { return this.localName; }
  get parentElement() { return null; }
  get previousSibling() { return null; }
  get previousElementSibling() { return null; }
  get nextSibling() { return null; }
  get nextElementSibling() { return null; }
  get childNodes() { return new _node_list_js__WEBPACK_IMPORTED_MODULE_3__.NodeList; }
  get firstChild() { return null; }
  get lastChild() { return null; }

  // default values
  get nodeValue() { return null; }
  set nodeValue(value) {}
  get textContent() { return null; }
  set textContent(value) {}
  normalize() {}
  cloneNode() { return null; }
  contains() { return false; }
  /**
   * Inserts a node before a reference node as a child of this parent node.
   * @param {Node} newNode The node to be inserted.
   * @param {Node} referenceNode The node before which newNode is inserted. If this is null, then newNode is inserted at the end of node's child nodes.
   * @returns The added child
   */
  // eslint-disable-next-line no-unused-vars
  insertBefore(newNode, referenceNode) { return newNode }
  /**
   * Adds a node to the end of the list of children of this node.
   * @param {Node} child The node to append to the given parent node.
   * @returns The appended child.
   */
  appendChild(child) { return child }
  /**
   * Replaces a child node within this node
   * @param {Node} newChild The new node to replace oldChild.
   * @param {Node} oldChild The child to be replaced.
   * @returns The replaced Node. This is the same node as oldChild.
   */
  replaceChild(newChild, oldChild) { return oldChild }
  /**
   * Removes a child node from the DOM.
   * @param {Node} child A Node that is the child node to be removed from the DOM.
   * @returns The removed node.
   */
  removeChild(child) { return child }
  toString() { return ''; }
  /* c8 ignore stop */

  hasChildNodes() { return !!this.lastChild; }
  isSameNode(node) { return this === node; }

  // TODO: attributes?
  compareDocumentPosition(target) {
    let result = 0;
    if (this !== target) {
      let self = getParentNodeCount(this);
      let other = getParentNodeCount(target);
      if (self < other) {
        result += _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_POSITION_FOLLOWING;
        if (this.contains(target))
          result += _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_POSITION_CONTAINED_BY;
      }
      else if (other < self) {
        result += _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_POSITION_PRECEDING;
        if (target.contains(this))
          result += _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_POSITION_CONTAINS;
      }
      else if (self && other) {
        const {childNodes} = this.parentNode;
        if (childNodes.indexOf(this) < childNodes.indexOf(target))
          result += _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_POSITION_FOLLOWING;
        else
          result += _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_POSITION_PRECEDING;
      }
      if (!self || !other) {
        result += _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC;
        result += _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_POSITION_DISCONNECTED;
      }
    }
    return result;
  }

  isEqualNode(node) {
    if (this === node)
      return true;
    if (this.nodeType === node.nodeType) {
      switch (this.nodeType) {
        case _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_NODE:
        case _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_FRAGMENT_NODE: {
          const aNodes = this.childNodes;
          const bNodes = node.childNodes;
          return aNodes.length === bNodes.length && aNodes.every((node, i) => node.isEqualNode(bNodes[i]));
        }
      }
      return this.toString() === node.toString();
    }
    return false;
  }

  /**
   * @protected
   */
  _getParent() {
    return this.parentNode;
  }

  getRootNode() {
    let root = this;
    while (root.parentNode)
      root = root.parentNode;
    return root.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_NODE ? root.documentElement : root;
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/interface/range.js":
/*!******************************************************!*\
  !*** ./node_modules/linkedom/esm/interface/range.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Range": function() { return /* binding */ Range; }
/* harmony export */ });
/* harmony import */ var _shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.js */ "./node_modules/linkedom/esm/shared/utils.js");
// https://dom.spec.whatwg.org/#concept-live-range





const deleteContents = ({[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.START]: start, [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.END]: end}, fragment = null) => {
  (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__.setAdjacent)(start[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.PREV], end[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.NEXT]);
  do {
    const after = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__.getEnd)(start);
    const next = after === end ? after : after[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.NEXT];
    if (fragment)
      fragment.insertBefore(start, fragment[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.END]);
    else
      start.remove();
    start = next;
  } while (start !== end);
};

/**
 * @implements globalThis.Range
 */
class Range {
  constructor() {
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.START] = null;
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.END] = null;
    this.commonAncestorContainer = null;
  }

  /* TODO: this is more complicated than it looks
  setStart(node, offset) {
    this[START] = node.childNodes[offset];
  }

  setEnd(node, offset) {
    this[END] = getEnd(node.childNodes[offset]);
  }
  //*/

  insertNode(newNode) {
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.END].parentNode.insertBefore(newNode, this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.START]);
  }

  selectNode(node) {
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.START] = node;
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.END] = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__.getEnd)(node);
  }

  surroundContents(parentNode) {
    parentNode.replaceChildren(this.extractContents());
  }

  setStartBefore(node) {
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.START] = node;
  }

  setStartAfter(node) {
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.START] = node.nextSibling;
  }

  setEndBefore(node) {
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.END] = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__.getEnd)(node.previousSibling);
  }

  setEndAfter(node) {
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.END] = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__.getEnd)(node);
  }

  cloneContents() {
    let {[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.START]: start, [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.END]: end} = this;
    const fragment = start.ownerDocument.createDocumentFragment();
    while (start !== end) {
      fragment.insertBefore(start.cloneNode(true), fragment[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.END]);
      start = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__.getEnd)(start);
      if (start !== end)
        start = start[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.NEXT];
    }
    return fragment;
  }

  deleteContents() {
    deleteContents(this);
  }

  extractContents() {
    const fragment = this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.START].ownerDocument.createDocumentFragment();
    deleteContents(this, fragment);
    return fragment;
  }

  createContextualFragment(html) {
    const template = this.commonAncestorContainer.createElement('template');
    template.innerHTML = html;
    this.selectNode(template.content);
    return template.content;
  }

  cloneRange() {
    const range = new Range;
    range[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.START] = this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.START];
    range[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.END] = this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.END];
    return range;
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/interface/shadow-root.js":
/*!************************************************************!*\
  !*** ./node_modules/linkedom/esm/interface/shadow-root.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShadowRoot": function() { return /* binding */ ShadowRoot; }
/* harmony export */ });
/* harmony import */ var _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/constants.js */ "./node_modules/linkedom/esm/shared/constants.js");
/* harmony import */ var _mixin_inner_html_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mixin/inner-html.js */ "./node_modules/linkedom/esm/mixin/inner-html.js");
/* harmony import */ var _mixin_non_element_parent_node_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mixin/non-element-parent-node.js */ "./node_modules/linkedom/esm/mixin/non-element-parent-node.js");




/**
 * @implements globalThis.ShadowRoot
 */
class ShadowRoot extends _mixin_non_element_parent_node_js__WEBPACK_IMPORTED_MODULE_2__.NonElementParentNode {
  constructor(host) {
    super(host.ownerDocument, '#shadow-root', _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_FRAGMENT_NODE);
    this.host = host;
  }

  get innerHTML() {
    return (0,_mixin_inner_html_js__WEBPACK_IMPORTED_MODULE_1__.getInnerHtml)(this);
  }
  set innerHTML(html) {
    (0,_mixin_inner_html_js__WEBPACK_IMPORTED_MODULE_1__.setInnerHtml)(this, html);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/interface/text.js":
/*!*****************************************************!*\
  !*** ./node_modules/linkedom/esm/interface/text.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Text": function() { return /* binding */ Text; }
/* harmony export */ });
/* harmony import */ var _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/constants.js */ "./node_modules/linkedom/esm/shared/constants.js");
/* harmony import */ var _shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _shared_text_escaper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/text-escaper.js */ "./node_modules/linkedom/esm/shared/text-escaper.js");
/* harmony import */ var _character_data_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./character-data.js */ "./node_modules/linkedom/esm/interface/character-data.js");






/**
 * @implements globalThis.Text
 */
class Text extends _character_data_js__WEBPACK_IMPORTED_MODULE_3__.CharacterData {
  constructor(ownerDocument, data = '') {
    super(ownerDocument, '#text', _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.TEXT_NODE, data);
  }

  get wholeText() {
    const text = [];
    let {previousSibling, nextSibling} = this;
    while (previousSibling) {
      if (previousSibling.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.TEXT_NODE)
        text.unshift(previousSibling[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.VALUE]);
      else
        break;
      previousSibling = previousSibling.previousSibling;
    }
    text.push(this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.VALUE]);
    while (nextSibling) {
      if (nextSibling.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.TEXT_NODE)
        text.push(nextSibling[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.VALUE]);
      else
        break;
      nextSibling = nextSibling.nextSibling;
    }
    return text.join('');
  }

  cloneNode() {
    const {ownerDocument, [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.VALUE]: data} = this;
    return new Text(ownerDocument, data);
  }

  toString() { return (0,_shared_text_escaper_js__WEBPACK_IMPORTED_MODULE_2__.escape)(this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.VALUE]); }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/interface/tree-walker.js":
/*!************************************************************!*\
  !*** ./node_modules/linkedom/esm/interface/tree-walker.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TreeWalker": function() { return /* binding */ TreeWalker; }
/* harmony export */ });
/* harmony import */ var _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/constants.js */ "./node_modules/linkedom/esm/shared/constants.js");
/* harmony import */ var _shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");




const isOK = ({nodeType}, mask) => {
  switch (nodeType) {
    case _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE:
      return mask & _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.SHOW_ELEMENT;
    case _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.TEXT_NODE:
      return mask & _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.SHOW_TEXT;
    case _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.COMMENT_NODE:
      return mask & _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.SHOW_COMMENT;
  }
  return 0;
};

/**
 * @implements globalThis.TreeWalker
 */
class TreeWalker {
  constructor(root, whatToShow = _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.SHOW_ALL) {
    this.root = root;
    this.currentNode = root;
    this.whatToShow = whatToShow;
    let {[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT]: next, [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.END]: end} = root;
    if (root.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_NODE) {
      const {documentElement} = root;
      next = documentElement;
      end = documentElement[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.END];
    }
    const nodes = [];
    while (next !== end) {
      if (isOK(next, whatToShow))
        nodes.push(next);
      next = next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT];
    }
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PRIVATE] = {i: 0, nodes};
  }

  nextNode() {
    const $ = this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PRIVATE];
    this.currentNode = $.i < $.nodes.length ? $.nodes[$.i++] : null;
    return this.currentNode;
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/mixin/child-node.js":
/*!*******************************************************!*\
  !*** ./node_modules/linkedom/esm/mixin/child-node.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "after": function() { return /* binding */ after; },
/* harmony export */   "before": function() { return /* binding */ before; },
/* harmony export */   "remove": function() { return /* binding */ remove; },
/* harmony export */   "replaceWith": function() { return /* binding */ replaceWith; }
/* harmony export */ });
/* harmony import */ var _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/constants.js */ "./node_modules/linkedom/esm/shared/constants.js");
/* harmony import */ var _shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/utils.js */ "./node_modules/linkedom/esm/shared/utils.js");
/* harmony import */ var _interface_mutation_observer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../interface/mutation-observer.js */ "./node_modules/linkedom/esm/interface/mutation-observer.js");
/* harmony import */ var _interface_custom_element_registry_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../interface/custom-element-registry.js */ "./node_modules/linkedom/esm/interface/custom-element-registry.js");
// https://dom.spec.whatwg.org/#childnode
// CharacterData, DocumentType, Element









const asFragment = (ownerDocument, nodes) => {
  const fragment = ownerDocument.createDocumentFragment();
  fragment.append(...nodes);
  return fragment;
};

const before = (node, nodes) => {
  const {ownerDocument, parentNode} = node;
  if (parentNode)
    parentNode.insertBefore(
      asFragment(ownerDocument, nodes),
      node
    );
};

const after = (node, nodes) => {
  const {ownerDocument, parentNode} = node;
  if (parentNode)
    parentNode.insertBefore(
      asFragment(ownerDocument, nodes),
      (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.getEnd)(node)[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT]
    );
};

const replaceWith = (node, nodes) => {
  const {ownerDocument, parentNode} = node;
  if (parentNode) {
    parentNode.insertBefore(
      asFragment(ownerDocument, nodes),
      node
    );
    node.remove();
  }
};

const remove = (prev, current, next) => {
  const {parentNode, nodeType} = current;
  if (prev || next) {
    (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.setAdjacent)(prev, next);
    current[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PREV] = null;
    (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.getEnd)(current)[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT] = null;
  }
  if (parentNode) {
    current.parentNode = null;
    (0,_interface_mutation_observer_js__WEBPACK_IMPORTED_MODULE_3__.moCallback)(current, parentNode);
    if (nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE)
      (0,_interface_custom_element_registry_js__WEBPACK_IMPORTED_MODULE_4__.disconnectedCallback)(current);
  }
};


/***/ }),

/***/ "./node_modules/linkedom/esm/mixin/inner-html.js":
/*!*******************************************************!*\
  !*** ./node_modules/linkedom/esm/mixin/inner-html.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getInnerHtml": function() { return /* binding */ getInnerHtml; },
/* harmony export */   "setInnerHtml": function() { return /* binding */ setInnerHtml; }
/* harmony export */ });
/* harmony import */ var _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/constants.js */ "./node_modules/linkedom/esm/shared/constants.js");
/* harmony import */ var _shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _shared_parse_from_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/parse-from-string.js */ "./node_modules/linkedom/esm/shared/parse-from-string.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/utils.js */ "./node_modules/linkedom/esm/shared/utils.js");






/**
 * @param {Node} node
 * @returns {String}
 */
const getInnerHtml = node => node.childNodes.join('');

/**
 * @param {Node} node
 * @param {String} html
 */
const setInnerHtml = (node, html) => {
  const {ownerDocument} = node;
  const {constructor} = ownerDocument;
  const document = new constructor;
  document[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.CUSTOM_ELEMENTS] = ownerDocument[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.CUSTOM_ELEMENTS];
  const {childNodes} = (0,_shared_parse_from_string_js__WEBPACK_IMPORTED_MODULE_2__.parseFromString)(document, (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_3__.ignoreCase)(node), html);

  node.replaceChildren(...childNodes.map(setOwnerDocument, ownerDocument));
};

function setOwnerDocument(node) {
  node.ownerDocument = this;
  switch (node.nodeType) {
    case _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE:
    case _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_FRAGMENT_NODE:
      node.childNodes.forEach(setOwnerDocument, this);
      break;
  }
  return node;
}


/***/ }),

/***/ "./node_modules/linkedom/esm/mixin/non-document-type-child-node.js":
/*!*************************************************************************!*\
  !*** ./node_modules/linkedom/esm/mixin/non-document-type-child-node.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "nextElementSibling": function() { return /* binding */ nextElementSibling; },
/* harmony export */   "previousElementSibling": function() { return /* binding */ previousElementSibling; }
/* harmony export */ });
/* harmony import */ var _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/constants.js */ "./node_modules/linkedom/esm/shared/constants.js");
/* harmony import */ var _shared_node_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/node.js */ "./node_modules/linkedom/esm/shared/node.js");
// https://dom.spec.whatwg.org/#nondocumenttypechildnode
// CharacterData, Element





const nextElementSibling = node => {
  let next = (0,_shared_node_js__WEBPACK_IMPORTED_MODULE_1__.nextSibling)(node);
  while (next && next.nodeType !== _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE)
    next = (0,_shared_node_js__WEBPACK_IMPORTED_MODULE_1__.nextSibling)(next);
  return next;
};

const previousElementSibling = node => {
  let prev = (0,_shared_node_js__WEBPACK_IMPORTED_MODULE_1__.previousSibling)(node);
  while (prev && prev.nodeType !== _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE)
    prev = (0,_shared_node_js__WEBPACK_IMPORTED_MODULE_1__.previousSibling)(prev);
  return prev;
};


/***/ }),

/***/ "./node_modules/linkedom/esm/mixin/non-element-parent-node.js":
/*!********************************************************************!*\
  !*** ./node_modules/linkedom/esm/mixin/non-element-parent-node.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NonElementParentNode": function() { return /* binding */ NonElementParentNode; }
/* harmony export */ });
/* harmony import */ var _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/constants.js */ "./node_modules/linkedom/esm/shared/constants.js");
/* harmony import */ var _shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _shared_jsdon_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/jsdon.js */ "./node_modules/linkedom/esm/shared/jsdon.js");
/* harmony import */ var _parent_node_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./parent-node.js */ "./node_modules/linkedom/esm/mixin/parent-node.js");
// https://dom.spec.whatwg.org/#interface-nonelementparentnode
// Document, DocumentFragment







class NonElementParentNode extends _parent_node_js__WEBPACK_IMPORTED_MODULE_3__.ParentNode {
  getElementById(id) {
    let {[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT]: next, [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.END]: end} = this;
    while (next !== end) {
      if (next.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE && next.id === id)
        return next;
      next = next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT];
    }
    return null;
  }

  cloneNode(deep) {
    const {ownerDocument, constructor} = this;
    const nonEPN = new constructor(ownerDocument);
    if (deep) {
      const {[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.END]: end} = nonEPN;
      for (const node of this.childNodes)
        nonEPN.insertBefore(node.cloneNode(deep), end);
    }
    return nonEPN; 
  }

  toString() {
    const {childNodes, localName} = this;
    return `<${localName}>${childNodes.join('')}</${localName}>`;
  }

  toJSON() {
    const json = [];
    (0,_shared_jsdon_js__WEBPACK_IMPORTED_MODULE_2__.nonElementAsJSON)(this, json);
    return json;
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/mixin/parent-node.js":
/*!********************************************************!*\
  !*** ./node_modules/linkedom/esm/mixin/parent-node.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ParentNode": function() { return /* binding */ ParentNode; }
/* harmony export */ });
/* harmony import */ var _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/constants.js */ "./node_modules/linkedom/esm/shared/constants.js");
/* harmony import */ var _shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _shared_matches_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/matches.js */ "./node_modules/linkedom/esm/shared/matches.js");
/* harmony import */ var _shared_node_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/node.js */ "./node_modules/linkedom/esm/shared/node.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/utils.js */ "./node_modules/linkedom/esm/shared/utils.js");
/* harmony import */ var _interface_node_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../interface/node.js */ "./node_modules/linkedom/esm/interface/node.js");
/* harmony import */ var _interface_text_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../interface/text.js */ "./node_modules/linkedom/esm/interface/text.js");
/* harmony import */ var _interface_node_list_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../interface/node-list.js */ "./node_modules/linkedom/esm/interface/node-list.js");
/* harmony import */ var _interface_mutation_observer_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../interface/mutation-observer.js */ "./node_modules/linkedom/esm/interface/mutation-observer.js");
/* harmony import */ var _interface_custom_element_registry_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../interface/custom-element-registry.js */ "./node_modules/linkedom/esm/interface/custom-element-registry.js");
/* harmony import */ var _non_document_type_child_node_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./non-document-type-child-node.js */ "./node_modules/linkedom/esm/mixin/non-document-type-child-node.js");
// https://dom.spec.whatwg.org/#interface-parentnode
// Document, DocumentFragment, Element


















const isNode = node => node instanceof _interface_node_js__WEBPACK_IMPORTED_MODULE_5__.Node;

const insert = (parentNode, child, nodes) => {
  const {ownerDocument} = parentNode;
  for (const node of nodes)
    parentNode.insertBefore(
      isNode(node) ? node : new _interface_text_js__WEBPACK_IMPORTED_MODULE_6__.Text(ownerDocument, node),
      child
    );
};

/** @typedef { import('../interface/element.js').Element & {
    [typeof NEXT]: NodeStruct,
    [typeof PREV]: NodeStruct,
    [typeof START]: NodeStruct,
    nodeType: typeof ATTRIBUTE_NODE | typeof DOCUMENT_FRAGMENT_NODE | typeof ELEMENT_NODE | typeof TEXT_NODE | typeof NODE_END | typeof COMMENT_NODE,
    ownerDocument: Document,
    parentNode: ParentNode,
}} NodeStruct */

class ParentNode extends _interface_node_js__WEBPACK_IMPORTED_MODULE_5__.Node {
  constructor(ownerDocument, localName, nodeType) {
    super(ownerDocument, localName, nodeType);
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PRIVATE] = null;
    /** @type {NodeStruct} */
    this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT] = this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.END] = {
      [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT]: null,
      [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PREV]: this,
      [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.START]: this,
      nodeType: _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.NODE_END,
      ownerDocument: this.ownerDocument,
      parentNode: null
    };
  }

  get childNodes() {
    const childNodes = new _interface_node_list_js__WEBPACK_IMPORTED_MODULE_7__.NodeList;
    let {firstChild} = this;
    while (firstChild) {
      childNodes.push(firstChild);
      firstChild = (0,_shared_node_js__WEBPACK_IMPORTED_MODULE_3__.nextSibling)(firstChild);
    }
    return childNodes;
  }

  get children() {
    const children = new _interface_node_list_js__WEBPACK_IMPORTED_MODULE_7__.NodeList;
    let {firstElementChild} = this;
    while (firstElementChild) {
      children.push(firstElementChild);
      firstElementChild = (0,_non_document_type_child_node_js__WEBPACK_IMPORTED_MODULE_10__.nextElementSibling)(firstElementChild);
    }
    return children;
  }

  /**
   * @returns {NodeStruct | null}
   */
  get firstChild() {
    let {[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT]: next, [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.END]: end} = this;
    while (next.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ATTRIBUTE_NODE)
      next = next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT];
    return next === end ? null : next;
  }

  /**
   * @returns {NodeStruct | null}
   */
  get firstElementChild() {
    let {firstChild} = this;
    while (firstChild) {
      if (firstChild.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE)
        return firstChild;
      firstChild = (0,_shared_node_js__WEBPACK_IMPORTED_MODULE_3__.nextSibling)(firstChild);
    }
    return null;
  }

  get lastChild() {
    const prev = this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.END][_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PREV];
    switch (prev.nodeType) {
      case _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.NODE_END:
        return prev[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.START];
      case _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ATTRIBUTE_NODE:
        return null;
    }
    return prev === this ? null : prev;
  }

  get lastElementChild() {
    let {lastChild} = this;
    while (lastChild) {
      if (lastChild.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE)
        return lastChild;
      lastChild = (0,_shared_node_js__WEBPACK_IMPORTED_MODULE_3__.previousSibling)(lastChild);
    }
    return null;
  }

  get childElementCount() {
    return this.children.length;
  }

  prepend(...nodes) {
    insert(this, this.firstChild, nodes);
  }

  append(...nodes) {
    insert(this, this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.END], nodes);
  }

  replaceChildren(...nodes) {
    let {[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT]: next, [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.END]: end} = this;
    while (next !== end && next.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ATTRIBUTE_NODE)
      next = next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT];
    while (next !== end) {
      const after = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_4__.getEnd)(next)[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT];
      next.remove();
      next = after;
    }
    if (nodes.length)
      insert(this, end, nodes);
  }

  getElementsByClassName(className) {
    const elements = new _interface_node_list_js__WEBPACK_IMPORTED_MODULE_7__.NodeList;
    let {[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT]: next, [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.END]: end} = this;
    while (next !== end) {
      if (
        next.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE &&
        next.hasAttribute('class') &&
        next.classList.has(className)
      )
        elements.push(next);
      next = next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT];
    }
    return elements;
  }

  getElementsByTagName(tagName) {
    const elements = new _interface_node_list_js__WEBPACK_IMPORTED_MODULE_7__.NodeList;
    let {[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT]: next, [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.END]: end} = this;
    while (next !== end) {
      if (next.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE && (
        next.localName === tagName ||
        (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_4__.localCase)(next) === tagName
      ))
        elements.push(next);
      next = next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT];
    }
    return elements;
  }

  querySelector(selectors) {
    const matches = (0,_shared_matches_js__WEBPACK_IMPORTED_MODULE_2__.prepareMatch)(this, selectors);
    let {[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT]: next, [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.END]: end} = this;
    while (next !== end) {
      if (next.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE && matches(next))
        return next;
      next = next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT];
    }
    return null;
  }

  querySelectorAll(selectors) {
    const matches = (0,_shared_matches_js__WEBPACK_IMPORTED_MODULE_2__.prepareMatch)(this, selectors);
    const elements = new _interface_node_list_js__WEBPACK_IMPORTED_MODULE_7__.NodeList;
    let {[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT]: next, [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.END]: end} = this;
    while (next !== end) {
      if (next.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE && matches(next))
        elements.push(next);
      next = next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT];
    }
    return elements;
  }

  appendChild(node) {
    return this.insertBefore(node, this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.END]);
  }

  contains(node) {
    let parentNode = node;
    while (parentNode && parentNode !== this)
      parentNode = parentNode.parentNode;
    return parentNode === this;
  }

  insertBefore(node, before = null) {
    if (node === before)
      return node;
    if (node === this)
      throw new Error('unable to append a node to itself');
    const next = before || this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.END];
    switch (node.nodeType) {
      case _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE:
        node.remove();
        node.parentNode = this;
        (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_4__.knownBoundaries)(next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PREV], node, next);
        (0,_interface_mutation_observer_js__WEBPACK_IMPORTED_MODULE_8__.moCallback)(node, null);
        (0,_interface_custom_element_registry_js__WEBPACK_IMPORTED_MODULE_9__.connectedCallback)(node);
        break;
      case _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_FRAGMENT_NODE: {
        let {[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PRIVATE]: parentNode, firstChild, lastChild} = node;
        if (firstChild) {
          (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_4__.knownSegment)(next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PREV], firstChild, lastChild, next);
          (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_4__.knownAdjacent)(node, node[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.END]);
          if (parentNode)
            parentNode.replaceChildren();
          do {
            firstChild.parentNode = this;
            (0,_interface_mutation_observer_js__WEBPACK_IMPORTED_MODULE_8__.moCallback)(firstChild, null);
            if (firstChild.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE)
              (0,_interface_custom_element_registry_js__WEBPACK_IMPORTED_MODULE_9__.connectedCallback)(firstChild);
          } while (
            firstChild !== lastChild &&
            (firstChild = (0,_shared_node_js__WEBPACK_IMPORTED_MODULE_3__.nextSibling)(firstChild))
          );
        }
        break;
      }
      case _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.TEXT_NODE:
      case _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.COMMENT_NODE:
        node.remove();
      /* eslint no-fallthrough:0 */
      // this covers DOCUMENT_TYPE_NODE too
      default:
        node.parentNode = this;
        (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_4__.knownSiblings)(next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PREV], node, next);
        (0,_interface_mutation_observer_js__WEBPACK_IMPORTED_MODULE_8__.moCallback)(node, null);
        break;
    }
    return node;
  }

  normalize() {
    let {[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT]: next, [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.END]: end} = this;
    while (next !== end) {
      const {[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT]: $next, [_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PREV]: $prev, nodeType} = next;
      if (nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.TEXT_NODE) {
        if (!next[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.VALUE])
          next.remove();
        else if ($prev && $prev.nodeType === _shared_constants_js__WEBPACK_IMPORTED_MODULE_0__.TEXT_NODE) {
          $prev.textContent += next.textContent;
          next.remove();
        }
      }
      next = $next;
    }
  }

  removeChild(node) {
    if (node.parentNode !== this)
      throw new Error('node is not a child');
    node.remove();
    return node;
  }

  replaceChild(node, replaced) {
    const next = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_4__.getEnd)(replaced)[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT];
    replaced.remove();
    this.insertBefore(node, next);
    return replaced;
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/shared/attributes.js":
/*!********************************************************!*\
  !*** ./node_modules/linkedom/esm/shared/attributes.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "booleanAttribute": function() { return /* binding */ booleanAttribute; },
/* harmony export */   "emptyAttributes": function() { return /* binding */ emptyAttributes; },
/* harmony export */   "numericAttribute": function() { return /* binding */ numericAttribute; },
/* harmony export */   "removeAttribute": function() { return /* binding */ removeAttribute; },
/* harmony export */   "setAttribute": function() { return /* binding */ setAttribute; },
/* harmony export */   "stringAttribute": function() { return /* binding */ stringAttribute; }
/* harmony export */ });
/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./node_modules/linkedom/esm/shared/utils.js");
/* harmony import */ var _interface_custom_element_registry_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../interface/custom-element-registry.js */ "./node_modules/linkedom/esm/interface/custom-element-registry.js");
/* harmony import */ var _interface_mutation_observer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../interface/mutation-observer.js */ "./node_modules/linkedom/esm/interface/mutation-observer.js");







const emptyAttributes = new Set([
  'allowfullscreen',
  'allowpaymentrequest',
  'async',
  'autofocus',
  'autoplay',
  'checked',
  'class',
  'contenteditable',
  'controls',
  'default',
  'defer',
  'disabled',
  'draggable',
  'formnovalidate',
  'hidden',
  'id',
  'ismap',
  'itemscope',
  'loop',
  'multiple',
  'muted',
  'nomodule',
  'novalidate',
  'open',
  'playsinline',
  'readonly',
  'required',
  'reversed',
  'selected',
  'style',
  'truespeed'
]);

const setAttribute = (element, attribute) => {
  const {[_symbols_js__WEBPACK_IMPORTED_MODULE_0__.VALUE]: value, name} = attribute;
  attribute.ownerElement = element;
  (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.knownSiblings)(element, attribute, element[_symbols_js__WEBPACK_IMPORTED_MODULE_0__.NEXT]);
  if (name === 'class')
    element.className = value;
  (0,_interface_mutation_observer_js__WEBPACK_IMPORTED_MODULE_3__.attributeChangedCallback)(element, name, null);
  (0,_interface_custom_element_registry_js__WEBPACK_IMPORTED_MODULE_2__.attributeChangedCallback)(element, name, null, value);
};

const removeAttribute = (element, attribute) => {
  const {[_symbols_js__WEBPACK_IMPORTED_MODULE_0__.VALUE]: value, name} = attribute;
  (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.knownAdjacent)(attribute[_symbols_js__WEBPACK_IMPORTED_MODULE_0__.PREV], attribute[_symbols_js__WEBPACK_IMPORTED_MODULE_0__.NEXT]);
  attribute.ownerElement = attribute[_symbols_js__WEBPACK_IMPORTED_MODULE_0__.PREV] = attribute[_symbols_js__WEBPACK_IMPORTED_MODULE_0__.NEXT] = null;
  if (name === 'class')
    element[_symbols_js__WEBPACK_IMPORTED_MODULE_0__.CLASS_LIST] = null;
  (0,_interface_mutation_observer_js__WEBPACK_IMPORTED_MODULE_3__.attributeChangedCallback)(element, name, value);
  (0,_interface_custom_element_registry_js__WEBPACK_IMPORTED_MODULE_2__.attributeChangedCallback)(element, name, value, null);
};

const booleanAttribute = {
  get(element, name) {
    return element.hasAttribute(name);
  },
  set(element, name, value) {
    if (value)
      element.setAttribute(name, '');
    else
      element.removeAttribute(name);
  }
};

const numericAttribute = {
  get(element, name) {
    return parseFloat(element.getAttribute(name) || 0);
  },
  set(element, name, value) {
    element.setAttribute(name, value);
  }
};

const stringAttribute = {
  get(element, name) {
    return element.getAttribute(name) || '';
  },
  set(element, name, value) {
    element.setAttribute(name, value);
  }
};

/* oddly enough, this apparently is not a thing
export const nullableAttribute = {
  get(element, name) {
    return element.getAttribute(name);
  },
  set(element, name, value) {
    if (value === null)
      element.removeAttribute(name);
    else
      element.setAttribute(name, value);
  }
};
*/


/***/ }),

/***/ "./node_modules/linkedom/esm/shared/constants.js":
/*!*******************************************************!*\
  !*** ./node_modules/linkedom/esm/shared/constants.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ATTRIBUTE_NODE": function() { return /* binding */ ATTRIBUTE_NODE; },
/* harmony export */   "BLOCK_ELEMENTS": function() { return /* binding */ BLOCK_ELEMENTS; },
/* harmony export */   "COMMENT_NODE": function() { return /* binding */ COMMENT_NODE; },
/* harmony export */   "DOCUMENT_FRAGMENT_NODE": function() { return /* binding */ DOCUMENT_FRAGMENT_NODE; },
/* harmony export */   "DOCUMENT_NODE": function() { return /* binding */ DOCUMENT_NODE; },
/* harmony export */   "DOCUMENT_POSITION_CONTAINED_BY": function() { return /* binding */ DOCUMENT_POSITION_CONTAINED_BY; },
/* harmony export */   "DOCUMENT_POSITION_CONTAINS": function() { return /* binding */ DOCUMENT_POSITION_CONTAINS; },
/* harmony export */   "DOCUMENT_POSITION_DISCONNECTED": function() { return /* binding */ DOCUMENT_POSITION_DISCONNECTED; },
/* harmony export */   "DOCUMENT_POSITION_FOLLOWING": function() { return /* binding */ DOCUMENT_POSITION_FOLLOWING; },
/* harmony export */   "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function() { return /* binding */ DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC; },
/* harmony export */   "DOCUMENT_POSITION_PRECEDING": function() { return /* binding */ DOCUMENT_POSITION_PRECEDING; },
/* harmony export */   "DOCUMENT_TYPE_NODE": function() { return /* binding */ DOCUMENT_TYPE_NODE; },
/* harmony export */   "ELEMENT_NODE": function() { return /* binding */ ELEMENT_NODE; },
/* harmony export */   "NODE_END": function() { return /* binding */ NODE_END; },
/* harmony export */   "SHOW_ALL": function() { return /* binding */ SHOW_ALL; },
/* harmony export */   "SHOW_COMMENT": function() { return /* binding */ SHOW_COMMENT; },
/* harmony export */   "SHOW_ELEMENT": function() { return /* binding */ SHOW_ELEMENT; },
/* harmony export */   "SHOW_TEXT": function() { return /* binding */ SHOW_TEXT; },
/* harmony export */   "SVG_NAMESPACE": function() { return /* binding */ SVG_NAMESPACE; },
/* harmony export */   "TEXT_NODE": function() { return /* binding */ TEXT_NODE; }
/* harmony export */ });
// Internal
const NODE_END = -1;

// Node
const ELEMENT_NODE = 1;
const ATTRIBUTE_NODE = 2;
const TEXT_NODE = 3;
const COMMENT_NODE = 8;
const DOCUMENT_NODE = 9;
const DOCUMENT_TYPE_NODE = 10;
const DOCUMENT_FRAGMENT_NODE = 11;

// Elements
const BLOCK_ELEMENTS = new Set(['ARTICLE', 'ASIDE', 'BLOCKQUOTE', 'BODY', 'BR', 'BUTTON', 'CANVAS', 'CAPTION', 'COL', 'COLGROUP', 'DD', 'DIV', 'DL', 'DT', 'EMBED', 'FIELDSET', 'FIGCAPTION', 'FIGURE', 'FOOTER', 'FORM', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'LI', 'UL', 'OL', 'P']);

// TreeWalker
const SHOW_ALL = -1;
const SHOW_ELEMENT = 1;
const SHOW_TEXT = 4;
const SHOW_COMMENT = 128;

// Document position
const DOCUMENT_POSITION_DISCONNECTED = 0x01;
const DOCUMENT_POSITION_PRECEDING = 0x02;
const DOCUMENT_POSITION_FOLLOWING = 0x04;
const DOCUMENT_POSITION_CONTAINS = 0x08;
const DOCUMENT_POSITION_CONTAINED_BY = 0x10;
const DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;

// SVG
const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';


/***/ }),

/***/ "./node_modules/linkedom/esm/shared/facades.js":
/*!*****************************************************!*\
  !*** ./node_modules/linkedom/esm/shared/facades.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Attr": function() { return /* binding */ Attr; },
/* harmony export */   "CharacterData": function() { return /* binding */ CharacterData; },
/* harmony export */   "Comment": function() { return /* binding */ Comment; },
/* harmony export */   "DocumentFragment": function() { return /* binding */ DocumentFragment; },
/* harmony export */   "DocumentType": function() { return /* binding */ DocumentType; },
/* harmony export */   "Element": function() { return /* binding */ Element; },
/* harmony export */   "Facades": function() { return /* binding */ Facades; },
/* harmony export */   "Node": function() { return /* binding */ Node; },
/* harmony export */   "SVGElement": function() { return /* binding */ SVGElement; },
/* harmony export */   "ShadowRoot": function() { return /* binding */ ShadowRoot; },
/* harmony export */   "Text": function() { return /* binding */ Text; },
/* harmony export */   "illegalConstructor": function() { return /* binding */ illegalConstructor; }
/* harmony export */ });
/* harmony import */ var _interface_attr_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../interface/attr.js */ "./node_modules/linkedom/esm/interface/attr.js");
/* harmony import */ var _interface_character_data_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../interface/character-data.js */ "./node_modules/linkedom/esm/interface/character-data.js");
/* harmony import */ var _interface_comment_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../interface/comment.js */ "./node_modules/linkedom/esm/interface/comment.js");
/* harmony import */ var _interface_document_fragment_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../interface/document-fragment.js */ "./node_modules/linkedom/esm/interface/document-fragment.js");
/* harmony import */ var _interface_document_type_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../interface/document-type.js */ "./node_modules/linkedom/esm/interface/document-type.js");
/* harmony import */ var _interface_element_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../interface/element.js */ "./node_modules/linkedom/esm/interface/element.js");
/* harmony import */ var _interface_node_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../interface/node.js */ "./node_modules/linkedom/esm/interface/node.js");
/* harmony import */ var _interface_shadow_root_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../interface/shadow-root.js */ "./node_modules/linkedom/esm/interface/shadow-root.js");
/* harmony import */ var _interface_text_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../interface/text.js */ "./node_modules/linkedom/esm/interface/text.js");
/* harmony import */ var _svg_element_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../svg/element.js */ "./node_modules/linkedom/esm/svg/element.js");
/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./object.js */ "./node_modules/linkedom/esm/shared/object.js");













/* c8 ignore start */
const illegalConstructor = () => {
  throw new TypeError('Illegal constructor');
};

function Attr() { illegalConstructor(); }
(0,_object_js__WEBPACK_IMPORTED_MODULE_10__.setPrototypeOf)(Attr, _interface_attr_js__WEBPACK_IMPORTED_MODULE_0__.Attr);
Attr.prototype = _interface_attr_js__WEBPACK_IMPORTED_MODULE_0__.Attr.prototype;

function CharacterData() { illegalConstructor(); }
(0,_object_js__WEBPACK_IMPORTED_MODULE_10__.setPrototypeOf)(CharacterData, _interface_character_data_js__WEBPACK_IMPORTED_MODULE_1__.CharacterData);
CharacterData.prototype = _interface_character_data_js__WEBPACK_IMPORTED_MODULE_1__.CharacterData.prototype;

function Comment() { illegalConstructor(); }
(0,_object_js__WEBPACK_IMPORTED_MODULE_10__.setPrototypeOf)(Comment, _interface_comment_js__WEBPACK_IMPORTED_MODULE_2__.Comment);
Comment.prototype = _interface_comment_js__WEBPACK_IMPORTED_MODULE_2__.Comment.prototype;

function DocumentFragment() { illegalConstructor(); }
(0,_object_js__WEBPACK_IMPORTED_MODULE_10__.setPrototypeOf)(DocumentFragment, _interface_document_fragment_js__WEBPACK_IMPORTED_MODULE_3__.DocumentFragment);
DocumentFragment.prototype = _interface_document_fragment_js__WEBPACK_IMPORTED_MODULE_3__.DocumentFragment.prototype;

function DocumentType() { illegalConstructor(); }
(0,_object_js__WEBPACK_IMPORTED_MODULE_10__.setPrototypeOf)(DocumentType, _interface_document_type_js__WEBPACK_IMPORTED_MODULE_4__.DocumentType);
DocumentType.prototype = _interface_document_type_js__WEBPACK_IMPORTED_MODULE_4__.DocumentType.prototype;

function Element() { illegalConstructor(); }
(0,_object_js__WEBPACK_IMPORTED_MODULE_10__.setPrototypeOf)(Element, _interface_element_js__WEBPACK_IMPORTED_MODULE_5__.Element);
Element.prototype = _interface_element_js__WEBPACK_IMPORTED_MODULE_5__.Element.prototype;

function Node() { illegalConstructor(); }
(0,_object_js__WEBPACK_IMPORTED_MODULE_10__.setPrototypeOf)(Node, _interface_node_js__WEBPACK_IMPORTED_MODULE_6__.Node);
Node.prototype = _interface_node_js__WEBPACK_IMPORTED_MODULE_6__.Node.prototype;

function ShadowRoot() { illegalConstructor(); }
(0,_object_js__WEBPACK_IMPORTED_MODULE_10__.setPrototypeOf)(ShadowRoot, _interface_shadow_root_js__WEBPACK_IMPORTED_MODULE_7__.ShadowRoot);
ShadowRoot.prototype = _interface_shadow_root_js__WEBPACK_IMPORTED_MODULE_7__.ShadowRoot.prototype;

function Text() { illegalConstructor(); }
(0,_object_js__WEBPACK_IMPORTED_MODULE_10__.setPrototypeOf)(Text, _interface_text_js__WEBPACK_IMPORTED_MODULE_8__.Text);
Text.prototype = _interface_text_js__WEBPACK_IMPORTED_MODULE_8__.Text.prototype;

function SVGElement() { illegalConstructor(); }
(0,_object_js__WEBPACK_IMPORTED_MODULE_10__.setPrototypeOf)(SVGElement, _svg_element_js__WEBPACK_IMPORTED_MODULE_9__.SVGElement);
SVGElement.prototype = _svg_element_js__WEBPACK_IMPORTED_MODULE_9__.SVGElement.prototype;
/* c8 ignore stop */

const Facades = {
  Attr,
  CharacterData,
  Comment,
  DocumentFragment,
  DocumentType,
  Element,
  Node,
  ShadowRoot,
  Text,
  SVGElement
};


/***/ }),

/***/ "./node_modules/linkedom/esm/shared/html-classes.js":
/*!**********************************************************!*\
  !*** ./node_modules/linkedom/esm/shared/html-classes.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTMLAnchorElement": function() { return /* reexport safe */ _html_anchor_element_js__WEBPACK_IMPORTED_MODULE_60__.HTMLAnchorElement; },
/* harmony export */   "HTMLAreaElement": function() { return /* reexport safe */ _html_area_element_js__WEBPACK_IMPORTED_MODULE_57__.HTMLAreaElement; },
/* harmony export */   "HTMLAudioElement": function() { return /* reexport safe */ _html_audio_element_js__WEBPACK_IMPORTED_MODULE_24__.HTMLAudioElement; },
/* harmony export */   "HTMLBRElement": function() { return /* reexport safe */ _html_br_element_js__WEBPACK_IMPORTED_MODULE_41__.HTMLBRElement; },
/* harmony export */   "HTMLBaseElement": function() { return /* reexport safe */ _html_base_element_js__WEBPACK_IMPORTED_MODULE_19__.HTMLBaseElement; },
/* harmony export */   "HTMLBodyElement": function() { return /* reexport safe */ _html_body_element_js__WEBPACK_IMPORTED_MODULE_8__.HTMLBodyElement; },
/* harmony export */   "HTMLButtonElement": function() { return /* reexport safe */ _html_button_element_js__WEBPACK_IMPORTED_MODULE_42__.HTMLButtonElement; },
/* harmony export */   "HTMLCanvasElement": function() { return /* reexport safe */ _html_canvas_element_js__WEBPACK_IMPORTED_MODULE_28__.HTMLCanvasElement; },
/* harmony export */   "HTMLClasses": function() { return /* binding */ HTMLClasses; },
/* harmony export */   "HTMLDListElement": function() { return /* reexport safe */ _html_d_list_element_js__WEBPACK_IMPORTED_MODULE_45__.HTMLDListElement; },
/* harmony export */   "HTMLDataElement": function() { return /* reexport safe */ _html_data_element_js__WEBPACK_IMPORTED_MODULE_38__.HTMLDataElement; },
/* harmony export */   "HTMLDataListElement": function() { return /* reexport safe */ _html_data_list_element_js__WEBPACK_IMPORTED_MODULE_20__.HTMLDataListElement; },
/* harmony export */   "HTMLDetailsElement": function() { return /* reexport safe */ _html_details_element_js__WEBPACK_IMPORTED_MODULE_64__.HTMLDetailsElement; },
/* harmony export */   "HTMLDirectoryElement": function() { return /* reexport safe */ _html_directory_element_js__WEBPACK_IMPORTED_MODULE_26__.HTMLDirectoryElement; },
/* harmony export */   "HTMLDivElement": function() { return /* reexport safe */ _html_div_element_js__WEBPACK_IMPORTED_MODULE_48__.HTMLDivElement; },
/* harmony export */   "HTMLElement": function() { return /* reexport safe */ _html_element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement; },
/* harmony export */   "HTMLEmbedElement": function() { return /* reexport safe */ _html_embed_element_js__WEBPACK_IMPORTED_MODULE_12__.HTMLEmbedElement; },
/* harmony export */   "HTMLFieldSetElement": function() { return /* reexport safe */ _html_field_set_element_js__WEBPACK_IMPORTED_MODULE_11__.HTMLFieldSetElement; },
/* harmony export */   "HTMLFontElement": function() { return /* reexport safe */ _html_font_element_js__WEBPACK_IMPORTED_MODULE_47__.HTMLFontElement; },
/* harmony export */   "HTMLFormElement": function() { return /* reexport safe */ _html_form_element_js__WEBPACK_IMPORTED_MODULE_51__.HTMLFormElement; },
/* harmony export */   "HTMLFrameElement": function() { return /* reexport safe */ _html_frame_element_js__WEBPACK_IMPORTED_MODULE_4__.HTMLFrameElement; },
/* harmony export */   "HTMLFrameSetElement": function() { return /* reexport safe */ _html_frame_set_element_js__WEBPACK_IMPORTED_MODULE_17__.HTMLFrameSetElement; },
/* harmony export */   "HTMLHRElement": function() { return /* reexport safe */ _html_hr_element_js__WEBPACK_IMPORTED_MODULE_13__.HTMLHRElement; },
/* harmony export */   "HTMLHeadElement": function() { return /* reexport safe */ _html_head_element_js__WEBPACK_IMPORTED_MODULE_7__.HTMLHeadElement; },
/* harmony export */   "HTMLHeadingElement": function() { return /* reexport safe */ _html_heading_element_js__WEBPACK_IMPORTED_MODULE_25__.HTMLHeadingElement; },
/* harmony export */   "HTMLHtmlElement": function() { return /* reexport safe */ _html_html_element_js__WEBPACK_IMPORTED_MODULE_2__.HTMLHtmlElement; },
/* harmony export */   "HTMLIFrameElement": function() { return /* reexport safe */ _html_i_frame_element_js__WEBPACK_IMPORTED_MODULE_5__.HTMLIFrameElement; },
/* harmony export */   "HTMLImageElement": function() { return /* reexport safe */ _html_image_element_js__WEBPACK_IMPORTED_MODULE_52__.HTMLImageElement; },
/* harmony export */   "HTMLInputElement": function() { return /* reexport safe */ _html_input_element_js__WEBPACK_IMPORTED_MODULE_21__.HTMLInputElement; },
/* harmony export */   "HTMLLIElement": function() { return /* reexport safe */ _html_li_element_js__WEBPACK_IMPORTED_MODULE_18__.HTMLLIElement; },
/* harmony export */   "HTMLLabelElement": function() { return /* reexport safe */ _html_label_element_js__WEBPACK_IMPORTED_MODULE_61__.HTMLLabelElement; },
/* harmony export */   "HTMLLegendElement": function() { return /* reexport safe */ _html_legend_element_js__WEBPACK_IMPORTED_MODULE_29__.HTMLLegendElement; },
/* harmony export */   "HTMLLinkElement": function() { return /* reexport safe */ _html_link_element_js__WEBPACK_IMPORTED_MODULE_49__.HTMLLinkElement; },
/* harmony export */   "HTMLMapElement": function() { return /* reexport safe */ _html_map_element_js__WEBPACK_IMPORTED_MODULE_43__.HTMLMapElement; },
/* harmony export */   "HTMLMarqueeElement": function() { return /* reexport safe */ _html_marquee_element_js__WEBPACK_IMPORTED_MODULE_67__.HTMLMarqueeElement; },
/* harmony export */   "HTMLMediaElement": function() { return /* reexport safe */ _html_media_element_js__WEBPACK_IMPORTED_MODULE_23__.HTMLMediaElement; },
/* harmony export */   "HTMLMenuElement": function() { return /* reexport safe */ _html_menu_element_js__WEBPACK_IMPORTED_MODULE_39__.HTMLMenuElement; },
/* harmony export */   "HTMLMetaElement": function() { return /* reexport safe */ _html_meta_element_js__WEBPACK_IMPORTED_MODULE_55__.HTMLMetaElement; },
/* harmony export */   "HTMLMeterElement": function() { return /* reexport safe */ _html_meter_element_js__WEBPACK_IMPORTED_MODULE_32__.HTMLMeterElement; },
/* harmony export */   "HTMLModElement": function() { return /* reexport safe */ _html_mod_element_js__WEBPACK_IMPORTED_MODULE_63__.HTMLModElement; },
/* harmony export */   "HTMLOListElement": function() { return /* reexport safe */ _html_o_list_element_js__WEBPACK_IMPORTED_MODULE_58__.HTMLOListElement; },
/* harmony export */   "HTMLObjectElement": function() { return /* reexport safe */ _html_object_element_js__WEBPACK_IMPORTED_MODULE_6__.HTMLObjectElement; },
/* harmony export */   "HTMLOptGroupElement": function() { return /* reexport safe */ _html_opt_group_element_js__WEBPACK_IMPORTED_MODULE_44__.HTMLOptGroupElement; },
/* harmony export */   "HTMLOptionElement": function() { return /* reexport safe */ _html_option_element_js__WEBPACK_IMPORTED_MODULE_30__.HTMLOptionElement; },
/* harmony export */   "HTMLOutputElement": function() { return /* reexport safe */ _html_output_element_js__WEBPACK_IMPORTED_MODULE_36__.HTMLOutputElement; },
/* harmony export */   "HTMLParagraphElement": function() { return /* reexport safe */ _html_paragraph_element_js__WEBPACK_IMPORTED_MODULE_15__.HTMLParagraphElement; },
/* harmony export */   "HTMLParamElement": function() { return /* reexport safe */ _html_param_element_js__WEBPACK_IMPORTED_MODULE_22__.HTMLParamElement; },
/* harmony export */   "HTMLPictureElement": function() { return /* reexport safe */ _html_picture_element_js__WEBPACK_IMPORTED_MODULE_56__.HTMLPictureElement; },
/* harmony export */   "HTMLPreElement": function() { return /* reexport safe */ _html_pre_element_js__WEBPACK_IMPORTED_MODULE_53__.HTMLPreElement; },
/* harmony export */   "HTMLProgressElement": function() { return /* reexport safe */ _html_progress_element_js__WEBPACK_IMPORTED_MODULE_14__.HTMLProgressElement; },
/* harmony export */   "HTMLQuoteElement": function() { return /* reexport safe */ _html_quote_element_js__WEBPACK_IMPORTED_MODULE_27__.HTMLQuoteElement; },
/* harmony export */   "HTMLScriptElement": function() { return /* reexport safe */ _html_script_element_js__WEBPACK_IMPORTED_MODULE_3__.HTMLScriptElement; },
/* harmony export */   "HTMLSelectElement": function() { return /* reexport safe */ _html_select_element_js__WEBPACK_IMPORTED_MODULE_40__.HTMLSelectElement; },
/* harmony export */   "HTMLSlotElement": function() { return /* reexport safe */ _html_slot_element_js__WEBPACK_IMPORTED_MODULE_50__.HTMLSlotElement; },
/* harmony export */   "HTMLSourceElement": function() { return /* reexport safe */ _html_source_element_js__WEBPACK_IMPORTED_MODULE_65__.HTMLSourceElement; },
/* harmony export */   "HTMLSpanElement": function() { return /* reexport safe */ _html_span_element_js__WEBPACK_IMPORTED_MODULE_31__.HTMLSpanElement; },
/* harmony export */   "HTMLStyleElement": function() { return /* reexport safe */ _html_style_element_js__WEBPACK_IMPORTED_MODULE_9__.HTMLStyleElement; },
/* harmony export */   "HTMLTableCaptionElement": function() { return /* reexport safe */ _html_table_caption_element_js__WEBPACK_IMPORTED_MODULE_59__.HTMLTableCaptionElement; },
/* harmony export */   "HTMLTableCellElement": function() { return /* reexport safe */ _html_table_cell_element_js__WEBPACK_IMPORTED_MODULE_34__.HTMLTableCellElement; },
/* harmony export */   "HTMLTableElement": function() { return /* reexport safe */ _html_table_element_js__WEBPACK_IMPORTED_MODULE_16__.HTMLTableElement; },
/* harmony export */   "HTMLTableRowElement": function() { return /* reexport safe */ _html_table_row_element_js__WEBPACK_IMPORTED_MODULE_37__.HTMLTableRowElement; },
/* harmony export */   "HTMLTemplateElement": function() { return /* reexport safe */ _html_template_element_js__WEBPACK_IMPORTED_MODULE_1__.HTMLTemplateElement; },
/* harmony export */   "HTMLTextAreaElement": function() { return /* reexport safe */ _html_text_area_element_js__WEBPACK_IMPORTED_MODULE_46__.HTMLTextAreaElement; },
/* harmony export */   "HTMLTimeElement": function() { return /* reexport safe */ _html_time_element_js__WEBPACK_IMPORTED_MODULE_10__.HTMLTimeElement; },
/* harmony export */   "HTMLTitleElement": function() { return /* reexport safe */ _html_title_element_js__WEBPACK_IMPORTED_MODULE_35__.HTMLTitleElement; },
/* harmony export */   "HTMLTrackElement": function() { return /* reexport safe */ _html_track_element_js__WEBPACK_IMPORTED_MODULE_66__.HTMLTrackElement; },
/* harmony export */   "HTMLUListElement": function() { return /* reexport safe */ _html_u_list_element_js__WEBPACK_IMPORTED_MODULE_54__.HTMLUListElement; },
/* harmony export */   "HTMLUnknownElement": function() { return /* reexport safe */ _html_unknown_element_js__WEBPACK_IMPORTED_MODULE_62__.HTMLUnknownElement; },
/* harmony export */   "HTMLVideoElement": function() { return /* reexport safe */ _html_video_element_js__WEBPACK_IMPORTED_MODULE_33__.HTMLVideoElement; }
/* harmony export */ });
/* harmony import */ var _html_element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../html/element.js */ "./node_modules/linkedom/esm/html/element.js");
/* harmony import */ var _html_template_element_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../html/template-element.js */ "./node_modules/linkedom/esm/html/template-element.js");
/* harmony import */ var _html_html_element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../html/html-element.js */ "./node_modules/linkedom/esm/html/html-element.js");
/* harmony import */ var _html_script_element_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../html/script-element.js */ "./node_modules/linkedom/esm/html/script-element.js");
/* harmony import */ var _html_frame_element_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../html/frame-element.js */ "./node_modules/linkedom/esm/html/frame-element.js");
/* harmony import */ var _html_i_frame_element_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../html/i-frame-element.js */ "./node_modules/linkedom/esm/html/i-frame-element.js");
/* harmony import */ var _html_object_element_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../html/object-element.js */ "./node_modules/linkedom/esm/html/object-element.js");
/* harmony import */ var _html_head_element_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../html/head-element.js */ "./node_modules/linkedom/esm/html/head-element.js");
/* harmony import */ var _html_body_element_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../html/body-element.js */ "./node_modules/linkedom/esm/html/body-element.js");
/* harmony import */ var _html_style_element_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../html/style-element.js */ "./node_modules/linkedom/esm/html/style-element.js");
/* harmony import */ var _html_time_element_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../html/time-element.js */ "./node_modules/linkedom/esm/html/time-element.js");
/* harmony import */ var _html_field_set_element_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../html/field-set-element.js */ "./node_modules/linkedom/esm/html/field-set-element.js");
/* harmony import */ var _html_embed_element_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../html/embed-element.js */ "./node_modules/linkedom/esm/html/embed-element.js");
/* harmony import */ var _html_hr_element_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../html/hr-element.js */ "./node_modules/linkedom/esm/html/hr-element.js");
/* harmony import */ var _html_progress_element_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../html/progress-element.js */ "./node_modules/linkedom/esm/html/progress-element.js");
/* harmony import */ var _html_paragraph_element_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../html/paragraph-element.js */ "./node_modules/linkedom/esm/html/paragraph-element.js");
/* harmony import */ var _html_table_element_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../html/table-element.js */ "./node_modules/linkedom/esm/html/table-element.js");
/* harmony import */ var _html_frame_set_element_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../html/frame-set-element.js */ "./node_modules/linkedom/esm/html/frame-set-element.js");
/* harmony import */ var _html_li_element_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../html/li-element.js */ "./node_modules/linkedom/esm/html/li-element.js");
/* harmony import */ var _html_base_element_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../html/base-element.js */ "./node_modules/linkedom/esm/html/base-element.js");
/* harmony import */ var _html_data_list_element_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../html/data-list-element.js */ "./node_modules/linkedom/esm/html/data-list-element.js");
/* harmony import */ var _html_input_element_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../html/input-element.js */ "./node_modules/linkedom/esm/html/input-element.js");
/* harmony import */ var _html_param_element_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../html/param-element.js */ "./node_modules/linkedom/esm/html/param-element.js");
/* harmony import */ var _html_media_element_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../html/media-element.js */ "./node_modules/linkedom/esm/html/media-element.js");
/* harmony import */ var _html_audio_element_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../html/audio-element.js */ "./node_modules/linkedom/esm/html/audio-element.js");
/* harmony import */ var _html_heading_element_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../html/heading-element.js */ "./node_modules/linkedom/esm/html/heading-element.js");
/* harmony import */ var _html_directory_element_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../html/directory-element.js */ "./node_modules/linkedom/esm/html/directory-element.js");
/* harmony import */ var _html_quote_element_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../html/quote-element.js */ "./node_modules/linkedom/esm/html/quote-element.js");
/* harmony import */ var _html_canvas_element_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../html/canvas-element.js */ "./node_modules/linkedom/esm/html/canvas-element.js");
/* harmony import */ var _html_legend_element_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../html/legend-element.js */ "./node_modules/linkedom/esm/html/legend-element.js");
/* harmony import */ var _html_option_element_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../html/option-element.js */ "./node_modules/linkedom/esm/html/option-element.js");
/* harmony import */ var _html_span_element_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../html/span-element.js */ "./node_modules/linkedom/esm/html/span-element.js");
/* harmony import */ var _html_meter_element_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../html/meter-element.js */ "./node_modules/linkedom/esm/html/meter-element.js");
/* harmony import */ var _html_video_element_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../html/video-element.js */ "./node_modules/linkedom/esm/html/video-element.js");
/* harmony import */ var _html_table_cell_element_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../html/table-cell-element.js */ "./node_modules/linkedom/esm/html/table-cell-element.js");
/* harmony import */ var _html_title_element_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../html/title-element.js */ "./node_modules/linkedom/esm/html/title-element.js");
/* harmony import */ var _html_output_element_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../html/output-element.js */ "./node_modules/linkedom/esm/html/output-element.js");
/* harmony import */ var _html_table_row_element_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../html/table-row-element.js */ "./node_modules/linkedom/esm/html/table-row-element.js");
/* harmony import */ var _html_data_element_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ../html/data-element.js */ "./node_modules/linkedom/esm/html/data-element.js");
/* harmony import */ var _html_menu_element_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ../html/menu-element.js */ "./node_modules/linkedom/esm/html/menu-element.js");
/* harmony import */ var _html_select_element_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ../html/select-element.js */ "./node_modules/linkedom/esm/html/select-element.js");
/* harmony import */ var _html_br_element_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ../html/br-element.js */ "./node_modules/linkedom/esm/html/br-element.js");
/* harmony import */ var _html_button_element_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ../html/button-element.js */ "./node_modules/linkedom/esm/html/button-element.js");
/* harmony import */ var _html_map_element_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ../html/map-element.js */ "./node_modules/linkedom/esm/html/map-element.js");
/* harmony import */ var _html_opt_group_element_js__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ../html/opt-group-element.js */ "./node_modules/linkedom/esm/html/opt-group-element.js");
/* harmony import */ var _html_d_list_element_js__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ../html/d-list-element.js */ "./node_modules/linkedom/esm/html/d-list-element.js");
/* harmony import */ var _html_text_area_element_js__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ../html/text-area-element.js */ "./node_modules/linkedom/esm/html/text-area-element.js");
/* harmony import */ var _html_font_element_js__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ../html/font-element.js */ "./node_modules/linkedom/esm/html/font-element.js");
/* harmony import */ var _html_div_element_js__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ../html/div-element.js */ "./node_modules/linkedom/esm/html/div-element.js");
/* harmony import */ var _html_link_element_js__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ../html/link-element.js */ "./node_modules/linkedom/esm/html/link-element.js");
/* harmony import */ var _html_slot_element_js__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ../html/slot-element.js */ "./node_modules/linkedom/esm/html/slot-element.js");
/* harmony import */ var _html_form_element_js__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ../html/form-element.js */ "./node_modules/linkedom/esm/html/form-element.js");
/* harmony import */ var _html_image_element_js__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ../html/image-element.js */ "./node_modules/linkedom/esm/html/image-element.js");
/* harmony import */ var _html_pre_element_js__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ../html/pre-element.js */ "./node_modules/linkedom/esm/html/pre-element.js");
/* harmony import */ var _html_u_list_element_js__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ../html/u-list-element.js */ "./node_modules/linkedom/esm/html/u-list-element.js");
/* harmony import */ var _html_meta_element_js__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ../html/meta-element.js */ "./node_modules/linkedom/esm/html/meta-element.js");
/* harmony import */ var _html_picture_element_js__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ../html/picture-element.js */ "./node_modules/linkedom/esm/html/picture-element.js");
/* harmony import */ var _html_area_element_js__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ../html/area-element.js */ "./node_modules/linkedom/esm/html/area-element.js");
/* harmony import */ var _html_o_list_element_js__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ../html/o-list-element.js */ "./node_modules/linkedom/esm/html/o-list-element.js");
/* harmony import */ var _html_table_caption_element_js__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ../html/table-caption-element.js */ "./node_modules/linkedom/esm/html/table-caption-element.js");
/* harmony import */ var _html_anchor_element_js__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ../html/anchor-element.js */ "./node_modules/linkedom/esm/html/anchor-element.js");
/* harmony import */ var _html_label_element_js__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ../html/label-element.js */ "./node_modules/linkedom/esm/html/label-element.js");
/* harmony import */ var _html_unknown_element_js__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ../html/unknown-element.js */ "./node_modules/linkedom/esm/html/unknown-element.js");
/* harmony import */ var _html_mod_element_js__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ../html/mod-element.js */ "./node_modules/linkedom/esm/html/mod-element.js");
/* harmony import */ var _html_details_element_js__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ../html/details-element.js */ "./node_modules/linkedom/esm/html/details-element.js");
/* harmony import */ var _html_source_element_js__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ../html/source-element.js */ "./node_modules/linkedom/esm/html/source-element.js");
/* harmony import */ var _html_track_element_js__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ../html/track-element.js */ "./node_modules/linkedom/esm/html/track-element.js");
/* harmony import */ var _html_marquee_element_js__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ../html/marquee-element.js */ "./node_modules/linkedom/esm/html/marquee-element.js");







































































const HTMLClasses = {
  HTMLElement: _html_element_js__WEBPACK_IMPORTED_MODULE_0__.HTMLElement,
  HTMLTemplateElement: _html_template_element_js__WEBPACK_IMPORTED_MODULE_1__.HTMLTemplateElement,
  HTMLHtmlElement: _html_html_element_js__WEBPACK_IMPORTED_MODULE_2__.HTMLHtmlElement,
  HTMLScriptElement: _html_script_element_js__WEBPACK_IMPORTED_MODULE_3__.HTMLScriptElement,
  HTMLFrameElement: _html_frame_element_js__WEBPACK_IMPORTED_MODULE_4__.HTMLFrameElement,
  HTMLIFrameElement: _html_i_frame_element_js__WEBPACK_IMPORTED_MODULE_5__.HTMLIFrameElement,
  HTMLObjectElement: _html_object_element_js__WEBPACK_IMPORTED_MODULE_6__.HTMLObjectElement,
  HTMLHeadElement: _html_head_element_js__WEBPACK_IMPORTED_MODULE_7__.HTMLHeadElement,
  HTMLBodyElement: _html_body_element_js__WEBPACK_IMPORTED_MODULE_8__.HTMLBodyElement,
  HTMLStyleElement: _html_style_element_js__WEBPACK_IMPORTED_MODULE_9__.HTMLStyleElement,
  HTMLTimeElement: _html_time_element_js__WEBPACK_IMPORTED_MODULE_10__.HTMLTimeElement,
  HTMLFieldSetElement: _html_field_set_element_js__WEBPACK_IMPORTED_MODULE_11__.HTMLFieldSetElement,
  HTMLEmbedElement: _html_embed_element_js__WEBPACK_IMPORTED_MODULE_12__.HTMLEmbedElement,
  HTMLHRElement: _html_hr_element_js__WEBPACK_IMPORTED_MODULE_13__.HTMLHRElement,
  HTMLProgressElement: _html_progress_element_js__WEBPACK_IMPORTED_MODULE_14__.HTMLProgressElement,
  HTMLParagraphElement: _html_paragraph_element_js__WEBPACK_IMPORTED_MODULE_15__.HTMLParagraphElement,
  HTMLTableElement: _html_table_element_js__WEBPACK_IMPORTED_MODULE_16__.HTMLTableElement,
  HTMLFrameSetElement: _html_frame_set_element_js__WEBPACK_IMPORTED_MODULE_17__.HTMLFrameSetElement,
  HTMLLIElement: _html_li_element_js__WEBPACK_IMPORTED_MODULE_18__.HTMLLIElement,
  HTMLBaseElement: _html_base_element_js__WEBPACK_IMPORTED_MODULE_19__.HTMLBaseElement,
  HTMLDataListElement: _html_data_list_element_js__WEBPACK_IMPORTED_MODULE_20__.HTMLDataListElement,
  HTMLInputElement: _html_input_element_js__WEBPACK_IMPORTED_MODULE_21__.HTMLInputElement,
  HTMLParamElement: _html_param_element_js__WEBPACK_IMPORTED_MODULE_22__.HTMLParamElement,
  HTMLMediaElement: _html_media_element_js__WEBPACK_IMPORTED_MODULE_23__.HTMLMediaElement,
  HTMLAudioElement: _html_audio_element_js__WEBPACK_IMPORTED_MODULE_24__.HTMLAudioElement,
  HTMLHeadingElement: _html_heading_element_js__WEBPACK_IMPORTED_MODULE_25__.HTMLHeadingElement,
  HTMLDirectoryElement: _html_directory_element_js__WEBPACK_IMPORTED_MODULE_26__.HTMLDirectoryElement,
  HTMLQuoteElement: _html_quote_element_js__WEBPACK_IMPORTED_MODULE_27__.HTMLQuoteElement,
  HTMLCanvasElement: _html_canvas_element_js__WEBPACK_IMPORTED_MODULE_28__.HTMLCanvasElement,
  HTMLLegendElement: _html_legend_element_js__WEBPACK_IMPORTED_MODULE_29__.HTMLLegendElement,
  HTMLOptionElement: _html_option_element_js__WEBPACK_IMPORTED_MODULE_30__.HTMLOptionElement,
  HTMLSpanElement: _html_span_element_js__WEBPACK_IMPORTED_MODULE_31__.HTMLSpanElement,
  HTMLMeterElement: _html_meter_element_js__WEBPACK_IMPORTED_MODULE_32__.HTMLMeterElement,
  HTMLVideoElement: _html_video_element_js__WEBPACK_IMPORTED_MODULE_33__.HTMLVideoElement,
  HTMLTableCellElement: _html_table_cell_element_js__WEBPACK_IMPORTED_MODULE_34__.HTMLTableCellElement,
  HTMLTitleElement: _html_title_element_js__WEBPACK_IMPORTED_MODULE_35__.HTMLTitleElement,
  HTMLOutputElement: _html_output_element_js__WEBPACK_IMPORTED_MODULE_36__.HTMLOutputElement,
  HTMLTableRowElement: _html_table_row_element_js__WEBPACK_IMPORTED_MODULE_37__.HTMLTableRowElement,
  HTMLDataElement: _html_data_element_js__WEBPACK_IMPORTED_MODULE_38__.HTMLDataElement,
  HTMLMenuElement: _html_menu_element_js__WEBPACK_IMPORTED_MODULE_39__.HTMLMenuElement,
  HTMLSelectElement: _html_select_element_js__WEBPACK_IMPORTED_MODULE_40__.HTMLSelectElement,
  HTMLBRElement: _html_br_element_js__WEBPACK_IMPORTED_MODULE_41__.HTMLBRElement,
  HTMLButtonElement: _html_button_element_js__WEBPACK_IMPORTED_MODULE_42__.HTMLButtonElement,
  HTMLMapElement: _html_map_element_js__WEBPACK_IMPORTED_MODULE_43__.HTMLMapElement,
  HTMLOptGroupElement: _html_opt_group_element_js__WEBPACK_IMPORTED_MODULE_44__.HTMLOptGroupElement,
  HTMLDListElement: _html_d_list_element_js__WEBPACK_IMPORTED_MODULE_45__.HTMLDListElement,
  HTMLTextAreaElement: _html_text_area_element_js__WEBPACK_IMPORTED_MODULE_46__.HTMLTextAreaElement,
  HTMLFontElement: _html_font_element_js__WEBPACK_IMPORTED_MODULE_47__.HTMLFontElement,
  HTMLDivElement: _html_div_element_js__WEBPACK_IMPORTED_MODULE_48__.HTMLDivElement,
  HTMLLinkElement: _html_link_element_js__WEBPACK_IMPORTED_MODULE_49__.HTMLLinkElement,
  HTMLSlotElement: _html_slot_element_js__WEBPACK_IMPORTED_MODULE_50__.HTMLSlotElement,
  HTMLFormElement: _html_form_element_js__WEBPACK_IMPORTED_MODULE_51__.HTMLFormElement,
  HTMLImageElement: _html_image_element_js__WEBPACK_IMPORTED_MODULE_52__.HTMLImageElement,
  HTMLPreElement: _html_pre_element_js__WEBPACK_IMPORTED_MODULE_53__.HTMLPreElement,
  HTMLUListElement: _html_u_list_element_js__WEBPACK_IMPORTED_MODULE_54__.HTMLUListElement,
  HTMLMetaElement: _html_meta_element_js__WEBPACK_IMPORTED_MODULE_55__.HTMLMetaElement,
  HTMLPictureElement: _html_picture_element_js__WEBPACK_IMPORTED_MODULE_56__.HTMLPictureElement,
  HTMLAreaElement: _html_area_element_js__WEBPACK_IMPORTED_MODULE_57__.HTMLAreaElement,
  HTMLOListElement: _html_o_list_element_js__WEBPACK_IMPORTED_MODULE_58__.HTMLOListElement,
  HTMLTableCaptionElement: _html_table_caption_element_js__WEBPACK_IMPORTED_MODULE_59__.HTMLTableCaptionElement,
  HTMLAnchorElement: _html_anchor_element_js__WEBPACK_IMPORTED_MODULE_60__.HTMLAnchorElement,
  HTMLLabelElement: _html_label_element_js__WEBPACK_IMPORTED_MODULE_61__.HTMLLabelElement,
  HTMLUnknownElement: _html_unknown_element_js__WEBPACK_IMPORTED_MODULE_62__.HTMLUnknownElement,
  HTMLModElement: _html_mod_element_js__WEBPACK_IMPORTED_MODULE_63__.HTMLModElement,
  HTMLDetailsElement: _html_details_element_js__WEBPACK_IMPORTED_MODULE_64__.HTMLDetailsElement,
  HTMLSourceElement: _html_source_element_js__WEBPACK_IMPORTED_MODULE_65__.HTMLSourceElement,
  HTMLTrackElement: _html_track_element_js__WEBPACK_IMPORTED_MODULE_66__.HTMLTrackElement,
  HTMLMarqueeElement: _html_marquee_element_js__WEBPACK_IMPORTED_MODULE_67__.HTMLMarqueeElement
};


/***/ }),

/***/ "./node_modules/linkedom/esm/shared/jsdon.js":
/*!***************************************************!*\
  !*** ./node_modules/linkedom/esm/shared/jsdon.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "attrAsJSON": function() { return /* binding */ attrAsJSON; },
/* harmony export */   "characterDataAsJSON": function() { return /* binding */ characterDataAsJSON; },
/* harmony export */   "documentTypeAsJSON": function() { return /* binding */ documentTypeAsJSON; },
/* harmony export */   "elementAsJSON": function() { return /* binding */ elementAsJSON; },
/* harmony export */   "nonElementAsJSON": function() { return /* binding */ nonElementAsJSON; }
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ "./node_modules/linkedom/esm/shared/constants.js");
/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "./node_modules/linkedom/esm/shared/utils.js");






const loopSegment = ({[_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT]: next, [_symbols_js__WEBPACK_IMPORTED_MODULE_1__.END]: end}, json) => {
  while (next !== end) {
    switch (next.nodeType) {
      case _constants_js__WEBPACK_IMPORTED_MODULE_0__.ATTRIBUTE_NODE:
        attrAsJSON(next, json);
        break;
      case _constants_js__WEBPACK_IMPORTED_MODULE_0__.TEXT_NODE:
      case _constants_js__WEBPACK_IMPORTED_MODULE_0__.COMMENT_NODE:
        characterDataAsJSON(next, json);
        break;
      case _constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE:
        elementAsJSON(next, json);
        next = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.getEnd)(next);
        break;
      case _constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_TYPE_NODE:
        documentTypeAsJSON(next, json);
        break;
    }
    next = next[_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT];
  }
  const last = json.length - 1;
  const value = json[last];
  if (typeof value === 'number' && value < 0)
    json[last] += _constants_js__WEBPACK_IMPORTED_MODULE_0__.NODE_END;
  else
    json.push(_constants_js__WEBPACK_IMPORTED_MODULE_0__.NODE_END);
};

const attrAsJSON = (attr, json) => {
  json.push(_constants_js__WEBPACK_IMPORTED_MODULE_0__.ATTRIBUTE_NODE, attr.name);
  const value = attr[_symbols_js__WEBPACK_IMPORTED_MODULE_1__.VALUE].trim();
  if (value)
    json.push(value);
};

const characterDataAsJSON = (node, json) => {
  const value = node[_symbols_js__WEBPACK_IMPORTED_MODULE_1__.VALUE];
  if (value.trim())
    json.push(node.nodeType, value);
};

const nonElementAsJSON = (node, json) => {
  json.push(node.nodeType);
  loopSegment(node, json);
};

const documentTypeAsJSON = ({name, publicId, systemId}, json) => {
  json.push(_constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_TYPE_NODE, name);
  if (publicId)
    json.push(publicId);
  if (systemId)
    json.push(systemId);
};

const elementAsJSON = (element, json) => {
  json.push(_constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE, element.localName);
  loopSegment(element, json);
};


/***/ }),

/***/ "./node_modules/linkedom/esm/shared/matches.js":
/*!*****************************************************!*\
  !*** ./node_modules/linkedom/esm/shared/matches.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "matches": function() { return /* binding */ matches; },
/* harmony export */   "prepareMatch": function() { return /* binding */ prepareMatch; }
/* harmony export */ });
/* harmony import */ var css_select__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! css-select */ "./node_modules/linkedom/node_modules/css-select/lib/esm/index.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ "./node_modules/linkedom/esm/shared/constants.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "./node_modules/linkedom/esm/shared/utils.js");





const {isArray} = Array;

/* c8 ignore start */
const isTag = ({nodeType}) => nodeType === _constants_js__WEBPACK_IMPORTED_MODULE_1__.ELEMENT_NODE;

const existsOne = (test, elements) => elements.some(
  element => isTag(element) && (
    test(element) ||
    existsOne(test, getChildren(element))
  )
);

const getAttributeValue = (element, name) => name === 'class' ?
                            element.classList.value : element.getAttribute(name);

const getChildren = ({childNodes}) => childNodes;

const getName = (element) => {
  const {localName} = element;
  return (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.ignoreCase)(element) ? localName.toLowerCase() : localName;
};

const getParent = ({parentNode}) => parentNode;

const getSiblings = element => {
  const {parentNode} = element;
  return parentNode ? getChildren(parentNode) : element;
};

const getText = node => {
  if (isArray(node))
    return node.map(getText).join('');
  if (isTag(node))
    return getText(getChildren(node));
  if (node.nodeType === _constants_js__WEBPACK_IMPORTED_MODULE_1__.TEXT_NODE)
    return node.data;
  return '';
};

const hasAttrib = (element, name) => element.hasAttribute(name);

const removeSubsets = nodes => {
  let {length} = nodes;
  while (length--) {
    const node = nodes[length];
    if (length && -1 < nodes.lastIndexOf(node, length - 1)) {
      nodes.splice(length, 1);
      continue;
    }
    for (let {parentNode} = node; parentNode; parentNode = parentNode.parentNode) {
      if (nodes.includes(parentNode)) {
        nodes.splice(length, 1);
        break;
      }
    }
  }
  return nodes;
};

const findAll = (test, nodes) => {
  const matches = [];
  for (const node of nodes) {
    if (isTag(node)) {
      if (test(node))
        matches.push(node);
      matches.push(...findAll(test, getChildren(node)));
    }
  }
  return matches;
};

const findOne = (test, nodes) => {
  for (let node of nodes)
    if (test(node) || (node = findOne(test, getChildren(node))))
      return node;
  return null;
};
/* c8 ignore stop */

const adapter = {
  isTag,
  existsOne,
  getAttributeValue,
  getChildren,
  getName,
  getParent,
  getSiblings,
  getText,
  hasAttrib,
  removeSubsets,
  findAll,
  findOne
};

const prepareMatch = (element, selectors) => css_select__WEBPACK_IMPORTED_MODULE_0__.compile(
  selectors,
  {
    context: selectors.includes(':scope') ? element : void 0,
    xmlMode: !(0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.ignoreCase)(element),
    adapter
  }
);

const matches = (element, selectors) => css_select__WEBPACK_IMPORTED_MODULE_0__.is(
  element,
  selectors,
  {
    strict: true,
    context: selectors.includes(':scope') ? element : void 0,
    xmlMode: !(0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.ignoreCase)(element),
    adapter
  }
);


/***/ }),

/***/ "./node_modules/linkedom/esm/shared/mime.js":
/*!**************************************************!*\
  !*** ./node_modules/linkedom/esm/shared/mime.js ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Mime": function() { return /* binding */ Mime; }
/* harmony export */ });
// TODO: ensure all these are text only
// /^(?:plaintext|script|style|textarea|title|xmp)$/i

const voidElements = {test: () => true};
const Mime = {
  'text/html': {
    docType: '<!DOCTYPE html>',
    ignoreCase: true,
    voidElements: /^(?:area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)$/i
  },
  'image/svg+xml': {
    docType: '<?xml version="1.0" encoding="utf-8"?>',
    ignoreCase: false,
    voidElements
  },
  'text/xml': {
    docType: '<?xml version="1.0" encoding="utf-8"?>',
    ignoreCase: false,
    voidElements
  },
  'application/xml': {
    docType: '<?xml version="1.0" encoding="utf-8"?>',
    ignoreCase: false,
    voidElements
  },
  'application/xhtml+xml': {
    docType: '<?xml version="1.0" encoding="utf-8"?>',
    ignoreCase: false,
    voidElements
  }
};


/***/ }),

/***/ "./node_modules/linkedom/esm/shared/node.js":
/*!**************************************************!*\
  !*** ./node_modules/linkedom/esm/shared/node.js ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isConnected": function() { return /* binding */ isConnected; },
/* harmony export */   "nextSibling": function() { return /* binding */ nextSibling; },
/* harmony export */   "parentElement": function() { return /* binding */ parentElement; },
/* harmony export */   "previousSibling": function() { return /* binding */ previousSibling; }
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ "./node_modules/linkedom/esm/shared/constants.js");
/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "./node_modules/linkedom/esm/shared/utils.js");





const isConnected = ({ownerDocument, parentNode}) => {
  while (parentNode) {
    if (parentNode === ownerDocument)
      return true;
    parentNode = parentNode.parentNode || parentNode.host;
  }
  return false;
};

const parentElement = ({parentNode}) => {
  if (parentNode) {
    switch (parentNode.nodeType) {
      case _constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_NODE:
      case _constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_FRAGMENT_NODE:
        return null;
    }
  }
  return parentNode;
};

const previousSibling = ({[_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PREV]: prev}) => {
  switch (prev ? prev.nodeType : 0) {
    case _constants_js__WEBPACK_IMPORTED_MODULE_0__.NODE_END:
      return prev[_symbols_js__WEBPACK_IMPORTED_MODULE_1__.START];
    case _constants_js__WEBPACK_IMPORTED_MODULE_0__.TEXT_NODE:
    case _constants_js__WEBPACK_IMPORTED_MODULE_0__.COMMENT_NODE:
      return prev;
  }
  return null;
};

const nextSibling = node => {
  const next = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.getEnd)(node)[_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT];
  return next && (next.nodeType === _constants_js__WEBPACK_IMPORTED_MODULE_0__.NODE_END ? null : next);
};


/***/ }),

/***/ "./node_modules/linkedom/esm/shared/object.js":
/*!****************************************************!*\
  !*** ./node_modules/linkedom/esm/shared/object.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assign": function() { return /* binding */ assign; },
/* harmony export */   "create": function() { return /* binding */ create; },
/* harmony export */   "defineProperties": function() { return /* binding */ defineProperties; },
/* harmony export */   "entries": function() { return /* binding */ entries; },
/* harmony export */   "getOwnPropertyDescriptors": function() { return /* binding */ getOwnPropertyDescriptors; },
/* harmony export */   "keys": function() { return /* binding */ keys; },
/* harmony export */   "setPrototypeOf": function() { return /* binding */ setPrototypeOf; }
/* harmony export */ });
const {
  assign,
  create,
  defineProperties,
  entries,
  getOwnPropertyDescriptors,
  keys,
  setPrototypeOf
} = Object;




/***/ }),

/***/ "./node_modules/linkedom/esm/shared/parse-from-string.js":
/*!***************************************************************!*\
  !*** ./node_modules/linkedom/esm/shared/parse-from-string.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isNotParsing": function() { return /* binding */ isNotParsing; },
/* harmony export */   "parseFromString": function() { return /* binding */ parseFromString; }
/* harmony export */ });
/* harmony import */ var htmlparser2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! htmlparser2 */ "./node_modules/linkedom/node_modules/htmlparser2/lib/esm/index.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ "./node_modules/linkedom/esm/shared/constants.js");
/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./object.js */ "./node_modules/linkedom/esm/shared/object.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils.js */ "./node_modules/linkedom/esm/shared/utils.js");
/* harmony import */ var _interface_custom_element_registry_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../interface/custom-element-registry.js */ "./node_modules/linkedom/esm/interface/custom-element-registry.js");









const {Parser} = htmlparser2__WEBPACK_IMPORTED_MODULE_0__;

// import {Mime} from './mime.js';
// const VOID_SOURCE = Mime['text/html'].voidElements.source.slice(4, -2);
// const VOID_ELEMENTS = new RegExp(`<(${VOID_SOURCE})([^>]*?)>`, 'gi');
// const VOID_SANITIZER = (_, $1, $2) => `<${$1}${$2}${/\/$/.test($2) ? '' : ' /'}>`;
// const voidSanitizer = html => html.replace(VOID_ELEMENTS, VOID_SANITIZER);

let notParsing = true;

const append = (self, node, active) => {
  const end = self[_symbols_js__WEBPACK_IMPORTED_MODULE_2__.END];
  node.parentNode = self;
  (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.knownBoundaries)(end[_symbols_js__WEBPACK_IMPORTED_MODULE_2__.PREV], node, end);
  if (active && node.nodeType === _constants_js__WEBPACK_IMPORTED_MODULE_1__.ELEMENT_NODE)
    (0,_interface_custom_element_registry_js__WEBPACK_IMPORTED_MODULE_5__.connectedCallback)(node);
  return node;
};

const attribute = (element, end, attribute, value, active) => {
  attribute[_symbols_js__WEBPACK_IMPORTED_MODULE_2__.VALUE] = value;
  attribute.ownerElement = element;
  (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.knownSiblings)(end[_symbols_js__WEBPACK_IMPORTED_MODULE_2__.PREV], attribute, end);
  if (attribute.name === 'class')
    element.className = value;
  if (active)
    (0,_interface_custom_element_registry_js__WEBPACK_IMPORTED_MODULE_5__.attributeChangedCallback)(element, attribute.name, null, value);
};

const isNotParsing = () => notParsing;

const parseFromString = (document, isHTML, markupLanguage) => {
  const {active, registry} = document[_symbols_js__WEBPACK_IMPORTED_MODULE_2__.CUSTOM_ELEMENTS];

  let node = document;
  let ownerSVGElement = null;

  notParsing = false;

  const content = new Parser({
    // <!DOCTYPE ...>
    onprocessinginstruction(name, data) {
      if (name.toLowerCase() === '!doctype')
        document.doctype = data.slice(name.length).trim();
    },

    // <tagName>
    onopentag(name, attributes) {
      let create = true;
      if (isHTML) {
        if (ownerSVGElement) {
          node = append(node, document.createElementNS(_constants_js__WEBPACK_IMPORTED_MODULE_1__.SVG_NAMESPACE, name), active);
          node.ownerSVGElement = ownerSVGElement;
          create = false;
        }
        else if (name === 'svg' || name === 'SVG') {
          ownerSVGElement = document.createElementNS(_constants_js__WEBPACK_IMPORTED_MODULE_1__.SVG_NAMESPACE, name);
          node = append(node, ownerSVGElement, active);
          create = false;
        }
        else if (active) {
          const ce = name.includes('-') ? name : (attributes.is || '');
          if (ce && registry.has(ce)) {
            const {Class} = registry.get(ce);
            node = append(node, new Class, active);
            delete attributes.is;
            create = false;
          }
        }
      }

      if (create)
        node = append(node, document.createElement(name), false);

      let end = node[_symbols_js__WEBPACK_IMPORTED_MODULE_2__.END];
      for (const name of (0,_object_js__WEBPACK_IMPORTED_MODULE_3__.keys)(attributes))
        attribute(node, end, document.createAttribute(name), attributes[name], active);
    },

    // #text, #comment
    oncomment(data) { append(node, document.createComment(data), active); },
    ontext(text) { append(node, document.createTextNode(text), active); },

    // </tagName>
    onclosetag() {
      if (isHTML && node === ownerSVGElement)
        ownerSVGElement = null;
      node = node.parentNode;
    }
  }, {
    lowerCaseAttributeNames: false,
    decodeEntities: true,
    xmlMode: !isHTML
  });

  content.write(markupLanguage);
  content.end();

  notParsing = true;

  return document;
};


/***/ }),

/***/ "./node_modules/linkedom/esm/shared/parse-json.js":
/*!********************************************************!*\
  !*** ./node_modules/linkedom/esm/shared/parse-json.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseJSON": function() { return /* binding */ parseJSON; },
/* harmony export */   "toJSON": function() { return /* binding */ toJSON; }
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ "./node_modules/linkedom/esm/shared/constants.js");
/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _register_html_class_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./register-html-class.js */ "./node_modules/linkedom/esm/shared/register-html-class.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ "./node_modules/linkedom/esm/shared/utils.js");
/* harmony import */ var _interface_attr_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../interface/attr.js */ "./node_modules/linkedom/esm/interface/attr.js");
/* harmony import */ var _interface_comment_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../interface/comment.js */ "./node_modules/linkedom/esm/interface/comment.js");
/* harmony import */ var _interface_document_type_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../interface/document-type.js */ "./node_modules/linkedom/esm/interface/document-type.js");
/* harmony import */ var _interface_text_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../interface/text.js */ "./node_modules/linkedom/esm/interface/text.js");
/* harmony import */ var _html_document_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../html/document.js */ "./node_modules/linkedom/esm/html/document.js");
/* harmony import */ var _html_element_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../html/element.js */ "./node_modules/linkedom/esm/html/element.js");
/* harmony import */ var _svg_element_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../svg/element.js */ "./node_modules/linkedom/esm/svg/element.js");
















const {parse} = JSON;

const append = (parentNode, node, end) => {
  node.parentNode = parentNode;
  (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.knownSiblings)(end[_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PREV], node, end);
};

const createHTMLElement = (ownerDocument, localName) => {
  if (_register_html_class_js__WEBPACK_IMPORTED_MODULE_2__.htmlClasses.has(localName)) {
    const Class = _register_html_class_js__WEBPACK_IMPORTED_MODULE_2__.htmlClasses.get(localName);
    return new Class(ownerDocument, localName);
  }
  return new _html_element_js__WEBPACK_IMPORTED_MODULE_9__.HTMLElement(ownerDocument, localName);
};

/**
 * @typedef {number|string} jsdonValue - either a node type or its content
 */

/**
 * Given a stringified, or arrayfied DOM element, returns an HTMLDocument
 * that represent the content of such string, or array.
 * @param {string|jsdonValue[]} value
 * @returns {HTMLDocument}
 */
const parseJSON = value => {
  const array = typeof value === 'string' ? parse(value) : value;
  const {length} = array;
  const document = new _html_document_js__WEBPACK_IMPORTED_MODULE_8__.HTMLDocument;
  let parentNode = document, end = parentNode[_symbols_js__WEBPACK_IMPORTED_MODULE_1__.END], svg = false, i = 0;
  while (i < length) {
    let nodeType = array[i++];
    switch (nodeType) {
      case _constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE: {
        const localName = array[i++];
        const isSVG = svg || localName === 'svg' || localName === 'SVG';
        const element = isSVG ?
                          new _svg_element_js__WEBPACK_IMPORTED_MODULE_10__.SVGElement(document, localName, parentNode.ownerSVGElement || null) :
                          createHTMLElement(document, localName);
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.knownBoundaries)(end[_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PREV], element, end);
        element.parentNode = parentNode;
        parentNode = element;
        end = parentNode[_symbols_js__WEBPACK_IMPORTED_MODULE_1__.END];
        svg = isSVG;
        break;
      }
      case _constants_js__WEBPACK_IMPORTED_MODULE_0__.ATTRIBUTE_NODE: {
        const name = array[i++];
        const value = typeof array[i] === 'string' ? array[i++] : '';
        const attr = new _interface_attr_js__WEBPACK_IMPORTED_MODULE_4__.Attr(document, name, value);
        attr.ownerElement = parentNode;
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.knownSiblings)(end[_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PREV], attr, end);
        break;
      }
      case _constants_js__WEBPACK_IMPORTED_MODULE_0__.TEXT_NODE:
        append(parentNode, new _interface_text_js__WEBPACK_IMPORTED_MODULE_7__.Text(document, array[i++]), end);
        break;
      case _constants_js__WEBPACK_IMPORTED_MODULE_0__.COMMENT_NODE:
        append(parentNode, new _interface_comment_js__WEBPACK_IMPORTED_MODULE_5__.Comment(document, array[i++]), end);
        break;
      case _constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_TYPE_NODE: {
        const args = [document];
        while (typeof array[i] === 'string')
          args.push(array[i++]);
        if (args.length === 3 && /\.dtd$/i.test(args[2]))
          args.splice(2, 0, '');
        append(parentNode, new _interface_document_type_js__WEBPACK_IMPORTED_MODULE_6__.DocumentType(...args), end);
        break;
      }
      case _constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_FRAGMENT_NODE:
        parentNode = document.createDocumentFragment();
        end = parentNode[_symbols_js__WEBPACK_IMPORTED_MODULE_1__.END];
      /* eslint no-fallthrough:0 */
      case _constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_NODE:
        break;
      default:
        do {
          nodeType -= _constants_js__WEBPACK_IMPORTED_MODULE_0__.NODE_END;
          if (svg && !parentNode.ownerSVGElement)
            svg = false;
          parentNode = parentNode.parentNode || parentNode;
        } while (nodeType < 0);
        end = parentNode[_symbols_js__WEBPACK_IMPORTED_MODULE_1__.END];
        break;
    }
  }
  switch (i && array[0]) {
    case _constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE:
      return document.firstElementChild;
    case _constants_js__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT_FRAGMENT_NODE:
      return parentNode;
  }
  return document;
};

/**
 * 
 * @param {Document|Element} node the Document or Element to serialize
 * @returns {jsdonValue[]} the linear jsdon serialized array
 */
const toJSON = node => node.toJSON();


/***/ }),

/***/ "./node_modules/linkedom/esm/shared/register-html-class.js":
/*!*****************************************************************!*\
  !*** ./node_modules/linkedom/esm/shared/register-html-class.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "htmlClasses": function() { return /* binding */ htmlClasses; },
/* harmony export */   "registerHTMLClass": function() { return /* binding */ registerHTMLClass; }
/* harmony export */ });
const htmlClasses = new Map;

const registerHTMLClass = (names, Class) => {
  for (const name of [].concat(names)) {
    htmlClasses.set(name, Class);
    htmlClasses.set(name.toUpperCase(), Class);
  }
};


/***/ }),

/***/ "./node_modules/linkedom/esm/shared/shadow-roots.js":
/*!**********************************************************!*\
  !*** ./node_modules/linkedom/esm/shared/shadow-roots.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shadowRoots": function() { return /* binding */ shadowRoots; }
/* harmony export */ });
const shadowRoots = new WeakMap;


/***/ }),

/***/ "./node_modules/linkedom/esm/shared/symbols.js":
/*!*****************************************************!*\
  !*** ./node_modules/linkedom/esm/shared/symbols.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CHANGED": function() { return /* binding */ CHANGED; },
/* harmony export */   "CLASS_LIST": function() { return /* binding */ CLASS_LIST; },
/* harmony export */   "CONTENT": function() { return /* binding */ CONTENT; },
/* harmony export */   "CUSTOM_ELEMENTS": function() { return /* binding */ CUSTOM_ELEMENTS; },
/* harmony export */   "DATASET": function() { return /* binding */ DATASET; },
/* harmony export */   "DOCTYPE": function() { return /* binding */ DOCTYPE; },
/* harmony export */   "DOM_PARSER": function() { return /* binding */ DOM_PARSER; },
/* harmony export */   "END": function() { return /* binding */ END; },
/* harmony export */   "EVENT_TARGET": function() { return /* binding */ EVENT_TARGET; },
/* harmony export */   "GLOBALS": function() { return /* binding */ GLOBALS; },
/* harmony export */   "IMAGE": function() { return /* binding */ IMAGE; },
/* harmony export */   "MIME": function() { return /* binding */ MIME; },
/* harmony export */   "MUTATION_OBSERVER": function() { return /* binding */ MUTATION_OBSERVER; },
/* harmony export */   "NEXT": function() { return /* binding */ NEXT; },
/* harmony export */   "OWNER_ELEMENT": function() { return /* binding */ OWNER_ELEMENT; },
/* harmony export */   "PREV": function() { return /* binding */ PREV; },
/* harmony export */   "PRIVATE": function() { return /* binding */ PRIVATE; },
/* harmony export */   "SHEET": function() { return /* binding */ SHEET; },
/* harmony export */   "START": function() { return /* binding */ START; },
/* harmony export */   "STYLE": function() { return /* binding */ STYLE; },
/* harmony export */   "UPGRADE": function() { return /* binding */ UPGRADE; },
/* harmony export */   "VALUE": function() { return /* binding */ VALUE; }
/* harmony export */ });
// used in Attr to signal changes
const CHANGED = Symbol('changed');

// used in Element to setup once classList
const CLASS_LIST = Symbol('classList');

// used in Document to attach once customElements
const CUSTOM_ELEMENTS = Symbol('CustomElements');

// used in HTMLTemplateElement
const CONTENT = Symbol('content');

// used in Element for data attributes
const DATASET = Symbol('dataset');

// used in Document to attach the DocType
const DOCTYPE = Symbol('doctype');

// used in parser and Document to attach once a DOMParser
const DOM_PARSER = Symbol('DOMParser');

// used to reference an end node
const END = Symbol('end');

// used in Document to make the globalThis an event target
const EVENT_TARGET = Symbol('EventTarget');

// used to augment a created document defaultView
const GLOBALS = Symbol('globals');

// used in both Canvas and Document to provide images
const IMAGE = Symbol('image');

// used to define Document mime type
const MIME = Symbol('mime');

// used in Document to attach once MutationObserver
const MUTATION_OBSERVER = Symbol('MutationObserver');

// used to define next node reference
const NEXT = Symbol('next');

// used to define Attr owner elements
const OWNER_ELEMENT = Symbol('ownerElement');

// used to define previous node reference
const PREV = Symbol('prev');

// used to define various "private" properties
const PRIVATE = Symbol('private');

// used to define the CSSStyleSheet.sheet
const SHEET = Symbol('sheet');

// used to define start node reference
const START = Symbol('start');

// used to define special CSS style attribute
const STYLE = Symbol('style');

// used to upgrade Custom Elements
const UPGRADE = Symbol('upgrade');

// used to define generic values
const VALUE = Symbol('value');


/***/ }),

/***/ "./node_modules/linkedom/esm/shared/text-escaper.js":
/*!**********************************************************!*\
  !*** ./node_modules/linkedom/esm/shared/text-escaper.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "escape": function() { return /* binding */ escape; }
/* harmony export */ });
const {replace} = '';

// escape
const ca = /[<>&\xA0]/g;

const esca = {
  '\xA0': '&nbsp;',
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;'
};

const pe = m => esca[m];

/**
 * Safely escape HTML entities such as `&`, `<`, `>` only.
 * @param {string} es the input to safely escape
 * @returns {string} the escaped input, and it **throws** an error if
 *  the input type is unexpected, except for boolean and numbers,
 *  converted as string.
 */
const escape = es => replace.call(es, ca, pe);


/***/ }),

/***/ "./node_modules/linkedom/esm/shared/utils.js":
/*!***************************************************!*\
  !*** ./node_modules/linkedom/esm/shared/utils.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "String": function() { return /* binding */ $String; },
/* harmony export */   "getEnd": function() { return /* binding */ getEnd; },
/* harmony export */   "ignoreCase": function() { return /* binding */ ignoreCase; },
/* harmony export */   "knownAdjacent": function() { return /* binding */ knownAdjacent; },
/* harmony export */   "knownBoundaries": function() { return /* binding */ knownBoundaries; },
/* harmony export */   "knownSegment": function() { return /* binding */ knownSegment; },
/* harmony export */   "knownSiblings": function() { return /* binding */ knownSiblings; },
/* harmony export */   "localCase": function() { return /* binding */ localCase; },
/* harmony export */   "setAdjacent": function() { return /* binding */ setAdjacent; }
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ "./node_modules/linkedom/esm/shared/constants.js");
/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");



const $String = String;


const getEnd = node => node.nodeType === _constants_js__WEBPACK_IMPORTED_MODULE_0__.ELEMENT_NODE ? node[_symbols_js__WEBPACK_IMPORTED_MODULE_1__.END] : node;

const ignoreCase = ({ownerDocument}) => ownerDocument[_symbols_js__WEBPACK_IMPORTED_MODULE_1__.MIME].ignoreCase;

const knownAdjacent = (prev, next) => {
  prev[_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT] = next;
  next[_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PREV] = prev;
};

const knownBoundaries = (prev, current, next) => {
  knownAdjacent(prev, current);
  knownAdjacent(getEnd(current), next);
};

const knownSegment = (prev, start, end, next) => {
  knownAdjacent(prev, start);
  knownAdjacent(getEnd(end), next);
};

const knownSiblings = (prev, current, next) => {
  knownAdjacent(prev, current);
  knownAdjacent(current, next);
};

const localCase = ({localName, ownerDocument}) => {
  return ownerDocument[_symbols_js__WEBPACK_IMPORTED_MODULE_1__.MIME].ignoreCase ? localName.toUpperCase() : localName;
};

const setAdjacent = (prev, next) => {
  if (prev)
    prev[_symbols_js__WEBPACK_IMPORTED_MODULE_1__.NEXT] = next;
  if (next)
    next[_symbols_js__WEBPACK_IMPORTED_MODULE_1__.PREV] = prev;
};


/***/ }),

/***/ "./node_modules/linkedom/esm/svg/document.js":
/*!***************************************************!*\
  !*** ./node_modules/linkedom/esm/svg/document.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SVGDocument": function() { return /* binding */ SVGDocument; }
/* harmony export */ });
/* harmony import */ var _shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _interface_document_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../interface/document.js */ "./node_modules/linkedom/esm/interface/document.js");



/**
 * @implements globalThis.Document
 */
class SVGDocument extends _interface_document_js__WEBPACK_IMPORTED_MODULE_1__.Document {
  constructor() { super('image/svg+xml'); }
  toString() {
    return this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.MIME].docType + super.toString();
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/svg/element.js":
/*!**************************************************!*\
  !*** ./node_modules/linkedom/esm/svg/element.js ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SVGElement": function() { return /* binding */ SVGElement; }
/* harmony export */ });
/* harmony import */ var _interface_element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../interface/element.js */ "./node_modules/linkedom/esm/interface/element.js");


const classNames = new WeakMap;

const handler = {
  get(target, name) {
    return target[name];
  },
  set(target, name, value) {
    target[name] = value;
    return true;
  }
};

/**
 * @implements globalThis.SVGElement
 */
class SVGElement extends _interface_element_js__WEBPACK_IMPORTED_MODULE_0__.Element {
  constructor(ownerDocument, localName, ownerSVGElement = null) {
    super(ownerDocument, localName);
    this.ownerSVGElement = ownerSVGElement;
  }

  get className() {
    if (!classNames.has(this))
      classNames.set(this, new Proxy({baseVal: '', animVal: ''}, handler));
    return classNames.get(this);
  }

  /* c8 ignore start */
  set className(value) {
    const {classList} = this;
    classList.clear();
    classList.add(...value.split(/\s+/));
  }
  /* c8 ignore stop */

  get namespaceURI() {
    return 'http://www.w3.org/2000/svg';
  }

  getAttribute(name) {
    return name === 'class' ?
      [...this.classList].join(' ') :
      super.getAttribute(name);
  }

  setAttribute(name, value) {
    if (name === 'class')
      this.className = value;
    else if (name === 'style') {
      const {className} = this;
      className.baseVal = className.animVal = value;
    }
    super.setAttribute(name, value);
  }
}


/***/ }),

/***/ "./node_modules/linkedom/esm/xml/document.js":
/*!***************************************************!*\
  !*** ./node_modules/linkedom/esm/xml/document.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "XMLDocument": function() { return /* binding */ XMLDocument; }
/* harmony export */ });
/* harmony import */ var _shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/symbols.js */ "./node_modules/linkedom/esm/shared/symbols.js");
/* harmony import */ var _interface_document_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../interface/document.js */ "./node_modules/linkedom/esm/interface/document.js");



/**
 * @implements globalThis.XMLDocument
 */
class XMLDocument extends _interface_document_js__WEBPACK_IMPORTED_MODULE_1__.Document {
  constructor() { super('text/xml'); }
  toString() {
    return this[_shared_symbols_js__WEBPACK_IMPORTED_MODULE_0__.MIME].docType + super.toString();
  }
}


/***/ }),

/***/ "./node_modules/linkedom/node_modules/css-select/lib/esm/attributes.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/css-select/lib/esm/attributes.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "attributeRules": function() { return /* binding */ attributeRules; }
/* harmony export */ });
/* harmony import */ var boolbase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! boolbase */ "./node_modules/boolbase/index.js");

/**
 * All reserved characters in a regex, used for escaping.
 *
 * Taken from XRegExp, (c) 2007-2020 Steven Levithan under the MIT license
 * https://github.com/slevithan/xregexp/blob/95eeebeb8fac8754d54eafe2b4743661ac1cf028/src/xregexp.js#L794
 */
const reChars = /[-[\]{}()*+?.,\\^$|#\s]/g;
function escapeRegex(value) {
    return value.replace(reChars, "\\$&");
}
/**
 * Attributes that are case-insensitive in HTML.
 *
 * @private
 * @see https://html.spec.whatwg.org/multipage/semantics-other.html#case-sensitivity-of-selectors
 */
const caseInsensitiveAttributes = new Set([
    "accept",
    "accept-charset",
    "align",
    "alink",
    "axis",
    "bgcolor",
    "charset",
    "checked",
    "clear",
    "codetype",
    "color",
    "compact",
    "declare",
    "defer",
    "dir",
    "direction",
    "disabled",
    "enctype",
    "face",
    "frame",
    "hreflang",
    "http-equiv",
    "lang",
    "language",
    "link",
    "media",
    "method",
    "multiple",
    "nohref",
    "noresize",
    "noshade",
    "nowrap",
    "readonly",
    "rel",
    "rev",
    "rules",
    "scope",
    "scrolling",
    "selected",
    "shape",
    "target",
    "text",
    "type",
    "valign",
    "valuetype",
    "vlink",
]);
function shouldIgnoreCase(selector, options) {
    return typeof selector.ignoreCase === "boolean"
        ? selector.ignoreCase
        : selector.ignoreCase === "quirks"
            ? !!options.quirksMode
            : !options.xmlMode && caseInsensitiveAttributes.has(selector.name);
}
/**
 * Attribute selectors
 */
const attributeRules = {
    equals(next, data, options) {
        const { adapter } = options;
        const { name } = data;
        let { value } = data;
        if (shouldIgnoreCase(data, options)) {
            value = value.toLowerCase();
            return (elem) => {
                const attr = adapter.getAttributeValue(elem, name);
                return (attr != null &&
                    attr.length === value.length &&
                    attr.toLowerCase() === value &&
                    next(elem));
            };
        }
        return (elem) => adapter.getAttributeValue(elem, name) === value && next(elem);
    },
    hyphen(next, data, options) {
        const { adapter } = options;
        const { name } = data;
        let { value } = data;
        const len = value.length;
        if (shouldIgnoreCase(data, options)) {
            value = value.toLowerCase();
            return function hyphenIC(elem) {
                const attr = adapter.getAttributeValue(elem, name);
                return (attr != null &&
                    (attr.length === len || attr.charAt(len) === "-") &&
                    attr.substr(0, len).toLowerCase() === value &&
                    next(elem));
            };
        }
        return function hyphen(elem) {
            const attr = adapter.getAttributeValue(elem, name);
            return (attr != null &&
                (attr.length === len || attr.charAt(len) === "-") &&
                attr.substr(0, len) === value &&
                next(elem));
        };
    },
    element(next, data, options) {
        const { adapter } = options;
        const { name, value } = data;
        if (/\s/.test(value)) {
            return boolbase__WEBPACK_IMPORTED_MODULE_0__.falseFunc;
        }
        const regex = new RegExp(`(?:^|\\s)${escapeRegex(value)}(?:$|\\s)`, shouldIgnoreCase(data, options) ? "i" : "");
        return function element(elem) {
            const attr = adapter.getAttributeValue(elem, name);
            return (attr != null &&
                attr.length >= value.length &&
                regex.test(attr) &&
                next(elem));
        };
    },
    exists(next, { name }, { adapter }) {
        return (elem) => adapter.hasAttrib(elem, name) && next(elem);
    },
    start(next, data, options) {
        const { adapter } = options;
        const { name } = data;
        let { value } = data;
        const len = value.length;
        if (len === 0) {
            return boolbase__WEBPACK_IMPORTED_MODULE_0__.falseFunc;
        }
        if (shouldIgnoreCase(data, options)) {
            value = value.toLowerCase();
            return (elem) => {
                const attr = adapter.getAttributeValue(elem, name);
                return (attr != null &&
                    attr.length >= len &&
                    attr.substr(0, len).toLowerCase() === value &&
                    next(elem));
            };
        }
        return (elem) => {
            var _a;
            return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.startsWith(value)) &&
                next(elem);
        };
    },
    end(next, data, options) {
        const { adapter } = options;
        const { name } = data;
        let { value } = data;
        const len = -value.length;
        if (len === 0) {
            return boolbase__WEBPACK_IMPORTED_MODULE_0__.falseFunc;
        }
        if (shouldIgnoreCase(data, options)) {
            value = value.toLowerCase();
            return (elem) => {
                var _a;
                return ((_a = adapter
                    .getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.substr(len).toLowerCase()) === value && next(elem);
            };
        }
        return (elem) => {
            var _a;
            return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.endsWith(value)) &&
                next(elem);
        };
    },
    any(next, data, options) {
        const { adapter } = options;
        const { name, value } = data;
        if (value === "") {
            return boolbase__WEBPACK_IMPORTED_MODULE_0__.falseFunc;
        }
        if (shouldIgnoreCase(data, options)) {
            const regex = new RegExp(escapeRegex(value), "i");
            return function anyIC(elem) {
                const attr = adapter.getAttributeValue(elem, name);
                return (attr != null &&
                    attr.length >= value.length &&
                    regex.test(attr) &&
                    next(elem));
            };
        }
        return (elem) => {
            var _a;
            return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.includes(value)) &&
                next(elem);
        };
    },
    not(next, data, options) {
        const { adapter } = options;
        const { name } = data;
        let { value } = data;
        if (value === "") {
            return (elem) => !!adapter.getAttributeValue(elem, name) && next(elem);
        }
        else if (shouldIgnoreCase(data, options)) {
            value = value.toLowerCase();
            return (elem) => {
                const attr = adapter.getAttributeValue(elem, name);
                return ((attr == null ||
                    attr.length !== value.length ||
                    attr.toLowerCase() !== value) &&
                    next(elem));
            };
        }
        return (elem) => adapter.getAttributeValue(elem, name) !== value && next(elem);
    },
};
//# sourceMappingURL=attributes.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/css-select/lib/esm/compile.js":
/*!**************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/css-select/lib/esm/compile.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "compile": function() { return /* binding */ compile; },
/* harmony export */   "compileToken": function() { return /* binding */ compileToken; },
/* harmony export */   "compileUnsafe": function() { return /* binding */ compileUnsafe; }
/* harmony export */ });
/* harmony import */ var css_what__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! css-what */ "./node_modules/linkedom/node_modules/css-what/lib/es/parse.js");
/* harmony import */ var css_what__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! css-what */ "./node_modules/linkedom/node_modules/css-what/lib/es/types.js");
/* harmony import */ var boolbase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! boolbase */ "./node_modules/boolbase/index.js");
/* harmony import */ var _sort_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sort.js */ "./node_modules/linkedom/node_modules/css-select/lib/esm/sort.js");
/* harmony import */ var _general_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./general.js */ "./node_modules/linkedom/node_modules/css-select/lib/esm/general.js");
/* harmony import */ var _pseudo_selectors_subselects_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pseudo-selectors/subselects.js */ "./node_modules/linkedom/node_modules/css-select/lib/esm/pseudo-selectors/subselects.js");





/**
 * Compiles a selector to an executable function.
 *
 * @param selector Selector to compile.
 * @param options Compilation options.
 * @param context Optional context for the selector.
 */
function compile(selector, options, context) {
    const next = compileUnsafe(selector, options, context);
    return (0,_pseudo_selectors_subselects_js__WEBPACK_IMPORTED_MODULE_3__.ensureIsTag)(next, options.adapter);
}
function compileUnsafe(selector, options, context) {
    const token = typeof selector === "string" ? (0,css_what__WEBPACK_IMPORTED_MODULE_4__.parse)(selector) : selector;
    return compileToken(token, options, context);
}
function includesScopePseudo(t) {
    return (t.type === css_what__WEBPACK_IMPORTED_MODULE_5__.SelectorType.Pseudo &&
        (t.name === "scope" ||
            (Array.isArray(t.data) &&
                t.data.some((data) => data.some(includesScopePseudo)))));
}
const DESCENDANT_TOKEN = { type: css_what__WEBPACK_IMPORTED_MODULE_5__.SelectorType.Descendant };
const FLEXIBLE_DESCENDANT_TOKEN = {
    type: "_flexibleDescendant",
};
const SCOPE_TOKEN = {
    type: css_what__WEBPACK_IMPORTED_MODULE_5__.SelectorType.Pseudo,
    name: "scope",
    data: null,
};
/*
 * CSS 4 Spec (Draft): 3.4.1. Absolutizing a Relative Selector
 * http://www.w3.org/TR/selectors4/#absolutizing
 */
function absolutize(token, { adapter }, context) {
    // TODO Use better check if the context is a document
    const hasContext = !!(context === null || context === void 0 ? void 0 : context.every((e) => {
        const parent = adapter.isTag(e) && adapter.getParent(e);
        return e === _pseudo_selectors_subselects_js__WEBPACK_IMPORTED_MODULE_3__.PLACEHOLDER_ELEMENT || (parent && adapter.isTag(parent));
    }));
    for (const t of token) {
        if (t.length > 0 &&
            (0,_sort_js__WEBPACK_IMPORTED_MODULE_1__.isTraversal)(t[0]) &&
            t[0].type !== css_what__WEBPACK_IMPORTED_MODULE_5__.SelectorType.Descendant) {
            // Don't continue in else branch
        }
        else if (hasContext && !t.some(includesScopePseudo)) {
            t.unshift(DESCENDANT_TOKEN);
        }
        else {
            continue;
        }
        t.unshift(SCOPE_TOKEN);
    }
}
function compileToken(token, options, context) {
    var _a;
    token.forEach(_sort_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
    context = (_a = options.context) !== null && _a !== void 0 ? _a : context;
    const isArrayContext = Array.isArray(context);
    const finalContext = context && (Array.isArray(context) ? context : [context]);
    // Check if the selector is relative
    if (options.relativeSelector !== false) {
        absolutize(token, options, finalContext);
    }
    else if (token.some((t) => t.length > 0 && (0,_sort_js__WEBPACK_IMPORTED_MODULE_1__.isTraversal)(t[0]))) {
        throw new Error("Relative selectors are not allowed when the `relativeSelector` option is disabled");
    }
    let shouldTestNextSiblings = false;
    const query = token
        .map((rules) => {
        if (rules.length >= 2) {
            const [first, second] = rules;
            if (first.type !== css_what__WEBPACK_IMPORTED_MODULE_5__.SelectorType.Pseudo ||
                first.name !== "scope") {
                // Ignore
            }
            else if (isArrayContext &&
                second.type === css_what__WEBPACK_IMPORTED_MODULE_5__.SelectorType.Descendant) {
                rules[1] = FLEXIBLE_DESCENDANT_TOKEN;
            }
            else if (second.type === css_what__WEBPACK_IMPORTED_MODULE_5__.SelectorType.Adjacent ||
                second.type === css_what__WEBPACK_IMPORTED_MODULE_5__.SelectorType.Sibling) {
                shouldTestNextSiblings = true;
            }
        }
        return compileRules(rules, options, finalContext);
    })
        .reduce(reduceRules, boolbase__WEBPACK_IMPORTED_MODULE_0__.falseFunc);
    query.shouldTestNextSiblings = shouldTestNextSiblings;
    return query;
}
function compileRules(rules, options, context) {
    var _a;
    return rules.reduce((previous, rule) => previous === boolbase__WEBPACK_IMPORTED_MODULE_0__.falseFunc
        ? boolbase__WEBPACK_IMPORTED_MODULE_0__.falseFunc
        : (0,_general_js__WEBPACK_IMPORTED_MODULE_2__.compileGeneralSelector)(previous, rule, options, context, compileToken), (_a = options.rootFunc) !== null && _a !== void 0 ? _a : boolbase__WEBPACK_IMPORTED_MODULE_0__.trueFunc);
}
function reduceRules(a, b) {
    if (b === boolbase__WEBPACK_IMPORTED_MODULE_0__.falseFunc || a === boolbase__WEBPACK_IMPORTED_MODULE_0__.trueFunc) {
        return a;
    }
    if (a === boolbase__WEBPACK_IMPORTED_MODULE_0__.falseFunc || b === boolbase__WEBPACK_IMPORTED_MODULE_0__.trueFunc) {
        return b;
    }
    return function combine(elem) {
        return a(elem) || b(elem);
    };
}
//# sourceMappingURL=compile.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/css-select/lib/esm/general.js":
/*!**************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/css-select/lib/esm/general.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "compileGeneralSelector": function() { return /* binding */ compileGeneralSelector; }
/* harmony export */ });
/* harmony import */ var _attributes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./attributes.js */ "./node_modules/linkedom/node_modules/css-select/lib/esm/attributes.js");
/* harmony import */ var _pseudo_selectors_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pseudo-selectors/index.js */ "./node_modules/linkedom/node_modules/css-select/lib/esm/pseudo-selectors/index.js");
/* harmony import */ var css_what__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! css-what */ "./node_modules/linkedom/node_modules/css-what/lib/es/types.js");



function getElementParent(node, adapter) {
    const parent = adapter.getParent(node);
    if (parent && adapter.isTag(parent)) {
        return parent;
    }
    return null;
}
/*
 * All available rules
 */
function compileGeneralSelector(next, selector, options, context, compileToken) {
    const { adapter, equals } = options;
    switch (selector.type) {
        case css_what__WEBPACK_IMPORTED_MODULE_2__.SelectorType.PseudoElement: {
            throw new Error("Pseudo-elements are not supported by css-select");
        }
        case css_what__WEBPACK_IMPORTED_MODULE_2__.SelectorType.ColumnCombinator: {
            throw new Error("Column combinators are not yet supported by css-select");
        }
        case css_what__WEBPACK_IMPORTED_MODULE_2__.SelectorType.Attribute: {
            if (selector.namespace != null) {
                throw new Error("Namespaced attributes are not yet supported by css-select");
            }
            if (!options.xmlMode || options.lowerCaseAttributeNames) {
                selector.name = selector.name.toLowerCase();
            }
            return _attributes_js__WEBPACK_IMPORTED_MODULE_0__.attributeRules[selector.action](next, selector, options);
        }
        case css_what__WEBPACK_IMPORTED_MODULE_2__.SelectorType.Pseudo: {
            return (0,_pseudo_selectors_index_js__WEBPACK_IMPORTED_MODULE_1__.compilePseudoSelector)(next, selector, options, context, compileToken);
        }
        // Tags
        case css_what__WEBPACK_IMPORTED_MODULE_2__.SelectorType.Tag: {
            if (selector.namespace != null) {
                throw new Error("Namespaced tag names are not yet supported by css-select");
            }
            let { name } = selector;
            if (!options.xmlMode || options.lowerCaseTags) {
                name = name.toLowerCase();
            }
            return function tag(elem) {
                return adapter.getName(elem) === name && next(elem);
            };
        }
        // Traversal
        case css_what__WEBPACK_IMPORTED_MODULE_2__.SelectorType.Descendant: {
            if (options.cacheResults === false ||
                typeof WeakSet === "undefined") {
                return function descendant(elem) {
                    let current = elem;
                    while ((current = getElementParent(current, adapter))) {
                        if (next(current)) {
                            return true;
                        }
                    }
                    return false;
                };
            }
            // @ts-expect-error `ElementNode` is not extending object
            const isFalseCache = new WeakSet();
            return function cachedDescendant(elem) {
                let current = elem;
                while ((current = getElementParent(current, adapter))) {
                    if (!isFalseCache.has(current)) {
                        if (adapter.isTag(current) && next(current)) {
                            return true;
                        }
                        isFalseCache.add(current);
                    }
                }
                return false;
            };
        }
        case "_flexibleDescendant": {
            // Include element itself, only used while querying an array
            return function flexibleDescendant(elem) {
                let current = elem;
                do {
                    if (next(current))
                        return true;
                } while ((current = getElementParent(current, adapter)));
                return false;
            };
        }
        case css_what__WEBPACK_IMPORTED_MODULE_2__.SelectorType.Parent: {
            return function parent(elem) {
                return adapter
                    .getChildren(elem)
                    .some((elem) => adapter.isTag(elem) && next(elem));
            };
        }
        case css_what__WEBPACK_IMPORTED_MODULE_2__.SelectorType.Child: {
            return function child(elem) {
                const parent = adapter.getParent(elem);
                return parent != null && adapter.isTag(parent) && next(parent);
            };
        }
        case css_what__WEBPACK_IMPORTED_MODULE_2__.SelectorType.Sibling: {
            return function sibling(elem) {
                const siblings = adapter.getSiblings(elem);
                for (let i = 0; i < siblings.length; i++) {
                    const currentSibling = siblings[i];
                    if (equals(elem, currentSibling))
                        break;
                    if (adapter.isTag(currentSibling) && next(currentSibling)) {
                        return true;
                    }
                }
                return false;
            };
        }
        case css_what__WEBPACK_IMPORTED_MODULE_2__.SelectorType.Adjacent: {
            if (adapter.prevElementSibling) {
                return function adjacent(elem) {
                    const previous = adapter.prevElementSibling(elem);
                    return previous != null && next(previous);
                };
            }
            return function adjacent(elem) {
                const siblings = adapter.getSiblings(elem);
                let lastElement;
                for (let i = 0; i < siblings.length; i++) {
                    const currentSibling = siblings[i];
                    if (equals(elem, currentSibling))
                        break;
                    if (adapter.isTag(currentSibling)) {
                        lastElement = currentSibling;
                    }
                }
                return !!lastElement && next(lastElement);
            };
        }
        case css_what__WEBPACK_IMPORTED_MODULE_2__.SelectorType.Universal: {
            if (selector.namespace != null && selector.namespace !== "*") {
                throw new Error("Namespaced universal selectors are not yet supported by css-select");
            }
            return next;
        }
    }
}
//# sourceMappingURL=general.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/css-select/lib/esm/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/css-select/lib/esm/index.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "_compileToken": function() { return /* binding */ _compileToken; },
/* harmony export */   "_compileUnsafe": function() { return /* binding */ _compileUnsafe; },
/* harmony export */   "aliases": function() { return /* reexport safe */ _pseudo_selectors_index_js__WEBPACK_IMPORTED_MODULE_4__.aliases; },
/* harmony export */   "compile": function() { return /* binding */ compile; },
/* harmony export */   "filters": function() { return /* reexport safe */ _pseudo_selectors_index_js__WEBPACK_IMPORTED_MODULE_4__.filters; },
/* harmony export */   "is": function() { return /* binding */ is; },
/* harmony export */   "prepareContext": function() { return /* binding */ prepareContext; },
/* harmony export */   "pseudos": function() { return /* reexport safe */ _pseudo_selectors_index_js__WEBPACK_IMPORTED_MODULE_4__.pseudos; },
/* harmony export */   "selectAll": function() { return /* binding */ selectAll; },
/* harmony export */   "selectOne": function() { return /* binding */ selectOne; }
/* harmony export */ });
/* harmony import */ var domutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! domutils */ "./node_modules/linkedom/node_modules/domutils/lib/esm/index.js");
/* harmony import */ var boolbase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! boolbase */ "./node_modules/boolbase/index.js");
/* harmony import */ var _compile_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./compile.js */ "./node_modules/linkedom/node_modules/css-select/lib/esm/compile.js");
/* harmony import */ var _pseudo_selectors_subselects_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pseudo-selectors/subselects.js */ "./node_modules/linkedom/node_modules/css-select/lib/esm/pseudo-selectors/subselects.js");
/* harmony import */ var _pseudo_selectors_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pseudo-selectors/index.js */ "./node_modules/linkedom/node_modules/css-select/lib/esm/pseudo-selectors/index.js");




const defaultEquals = (a, b) => a === b;
const defaultOptions = {
    adapter: domutils__WEBPACK_IMPORTED_MODULE_0__,
    equals: defaultEquals,
};
function convertOptionFormats(options) {
    var _a, _b, _c, _d;
    /*
     * We force one format of options to the other one.
     */
    // @ts-expect-error Default options may have incompatible `Node` / `ElementNode`.
    const opts = options !== null && options !== void 0 ? options : defaultOptions;
    // @ts-expect-error Same as above.
    (_a = opts.adapter) !== null && _a !== void 0 ? _a : (opts.adapter = domutils__WEBPACK_IMPORTED_MODULE_0__);
    // @ts-expect-error `equals` does not exist on `Options`
    (_b = opts.equals) !== null && _b !== void 0 ? _b : (opts.equals = (_d = (_c = opts.adapter) === null || _c === void 0 ? void 0 : _c.equals) !== null && _d !== void 0 ? _d : defaultEquals);
    return opts;
}
function wrapCompile(func) {
    return function addAdapter(selector, options, context) {
        const opts = convertOptionFormats(options);
        return func(selector, opts, context);
    };
}
/**
 * Compiles the query, returns a function.
 */
const compile = wrapCompile(_compile_js__WEBPACK_IMPORTED_MODULE_2__.compile);
const _compileUnsafe = wrapCompile(_compile_js__WEBPACK_IMPORTED_MODULE_2__.compileUnsafe);
const _compileToken = wrapCompile(_compile_js__WEBPACK_IMPORTED_MODULE_2__.compileToken);
function getSelectorFunc(searchFunc) {
    return function select(query, elements, options) {
        const opts = convertOptionFormats(options);
        if (typeof query !== "function") {
            query = (0,_compile_js__WEBPACK_IMPORTED_MODULE_2__.compileUnsafe)(query, opts, elements);
        }
        const filteredElements = prepareContext(elements, opts.adapter, query.shouldTestNextSiblings);
        return searchFunc(query, filteredElements, opts);
    };
}
function prepareContext(elems, adapter, shouldTestNextSiblings = false) {
    /*
     * Add siblings if the query requires them.
     * See https://github.com/fb55/css-select/pull/43#issuecomment-225414692
     */
    if (shouldTestNextSiblings) {
        elems = appendNextSiblings(elems, adapter);
    }
    return Array.isArray(elems)
        ? adapter.removeSubsets(elems)
        : adapter.getChildren(elems);
}
function appendNextSiblings(elem, adapter) {
    // Order matters because jQuery seems to check the children before the siblings
    const elems = Array.isArray(elem) ? elem.slice(0) : [elem];
    const elemsLength = elems.length;
    for (let i = 0; i < elemsLength; i++) {
        const nextSiblings = (0,_pseudo_selectors_subselects_js__WEBPACK_IMPORTED_MODULE_3__.getNextSiblings)(elems[i], adapter);
        elems.push(...nextSiblings);
    }
    return elems;
}
/**
 * @template Node The generic Node type for the DOM adapter being used.
 * @template ElementNode The Node type for elements for the DOM adapter being used.
 * @param elems Elements to query. If it is an element, its children will be queried..
 * @param query can be either a CSS selector string or a compiled query function.
 * @param [options] options for querying the document.
 * @see compile for supported selector queries.
 * @returns All matching elements.
 *
 */
const selectAll = getSelectorFunc((query, elems, options) => query === boolbase__WEBPACK_IMPORTED_MODULE_1__.falseFunc || !elems || elems.length === 0
    ? []
    : options.adapter.findAll(query, elems));
/**
 * @template Node The generic Node type for the DOM adapter being used.
 * @template ElementNode The Node type for elements for the DOM adapter being used.
 * @param elems Elements to query. If it is an element, its children will be queried..
 * @param query can be either a CSS selector string or a compiled query function.
 * @param [options] options for querying the document.
 * @see compile for supported selector queries.
 * @returns the first match, or null if there was no match.
 */
const selectOne = getSelectorFunc((query, elems, options) => query === boolbase__WEBPACK_IMPORTED_MODULE_1__.falseFunc || !elems || elems.length === 0
    ? null
    : options.adapter.findOne(query, elems));
/**
 * Tests whether or not an element is matched by query.
 *
 * @template Node The generic Node type for the DOM adapter being used.
 * @template ElementNode The Node type for elements for the DOM adapter being used.
 * @param elem The element to test if it matches the query.
 * @param query can be either a CSS selector string or a compiled query function.
 * @param [options] options for querying the document.
 * @see compile for supported selector queries.
 * @returns
 */
function is(elem, query, options) {
    const opts = convertOptionFormats(options);
    return (typeof query === "function" ? query : (0,_compile_js__WEBPACK_IMPORTED_MODULE_2__.compile)(query, opts))(elem);
}
/**
 * Alias for selectAll(query, elems, options).
 * @see [compile] for supported selector queries.
 */
/* harmony default export */ __webpack_exports__["default"] = (selectAll);
// Export filters, pseudos and aliases to allow users to supply their own.
/** @deprecated Use the `pseudos` option instead. */

//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/css-select/lib/esm/pseudo-selectors/aliases.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/css-select/lib/esm/pseudo-selectors/aliases.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "aliases": function() { return /* binding */ aliases; }
/* harmony export */ });
/**
 * Aliases are pseudos that are expressed as selectors.
 */
const aliases = {
    // Links
    "any-link": ":is(a, area, link)[href]",
    link: ":any-link:not(:visited)",
    // Forms
    // https://html.spec.whatwg.org/multipage/scripting.html#disabled-elements
    disabled: `:is(
        :is(button, input, select, textarea, optgroup, option)[disabled],
        optgroup[disabled] > option,
        fieldset[disabled]:not(fieldset[disabled] legend:first-of-type *)
    )`,
    enabled: ":not(:disabled)",
    checked: ":is(:is(input[type=radio], input[type=checkbox])[checked], option:selected)",
    required: ":is(input, select, textarea)[required]",
    optional: ":is(input, select, textarea):not([required])",
    // JQuery extensions
    // https://html.spec.whatwg.org/multipage/form-elements.html#concept-option-selectedness
    selected: "option:is([selected], select:not([multiple]):not(:has(> option[selected])) > :first-of-type)",
    checkbox: "[type=checkbox]",
    file: "[type=file]",
    password: "[type=password]",
    radio: "[type=radio]",
    reset: "[type=reset]",
    image: "[type=image]",
    submit: "[type=submit]",
    parent: ":not(:empty)",
    header: ":is(h1, h2, h3, h4, h5, h6)",
    button: ":is(button, input[type=button])",
    input: ":is(input, textarea, select, button)",
    text: "input:is(:not([type!='']), [type=text])",
};
//# sourceMappingURL=aliases.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/css-select/lib/esm/pseudo-selectors/filters.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/css-select/lib/esm/pseudo-selectors/filters.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "filters": function() { return /* binding */ filters; }
/* harmony export */ });
/* harmony import */ var nth_check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nth-check */ "./node_modules/linkedom/node_modules/nth-check/lib/esm/index.js");
/* harmony import */ var boolbase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! boolbase */ "./node_modules/boolbase/index.js");


function getChildFunc(next, adapter) {
    return (elem) => {
        const parent = adapter.getParent(elem);
        return parent != null && adapter.isTag(parent) && next(elem);
    };
}
const filters = {
    contains(next, text, { adapter }) {
        return function contains(elem) {
            return next(elem) && adapter.getText(elem).includes(text);
        };
    },
    icontains(next, text, { adapter }) {
        const itext = text.toLowerCase();
        return function icontains(elem) {
            return (next(elem) &&
                adapter.getText(elem).toLowerCase().includes(itext));
        };
    },
    // Location specific methods
    "nth-child"(next, rule, { adapter, equals }) {
        const func = (0,nth_check__WEBPACK_IMPORTED_MODULE_0__["default"])(rule);
        if (func === boolbase__WEBPACK_IMPORTED_MODULE_1__.falseFunc)
            return boolbase__WEBPACK_IMPORTED_MODULE_1__.falseFunc;
        if (func === boolbase__WEBPACK_IMPORTED_MODULE_1__.trueFunc)
            return getChildFunc(next, adapter);
        return function nthChild(elem) {
            const siblings = adapter.getSiblings(elem);
            let pos = 0;
            for (let i = 0; i < siblings.length; i++) {
                if (equals(elem, siblings[i]))
                    break;
                if (adapter.isTag(siblings[i])) {
                    pos++;
                }
            }
            return func(pos) && next(elem);
        };
    },
    "nth-last-child"(next, rule, { adapter, equals }) {
        const func = (0,nth_check__WEBPACK_IMPORTED_MODULE_0__["default"])(rule);
        if (func === boolbase__WEBPACK_IMPORTED_MODULE_1__.falseFunc)
            return boolbase__WEBPACK_IMPORTED_MODULE_1__.falseFunc;
        if (func === boolbase__WEBPACK_IMPORTED_MODULE_1__.trueFunc)
            return getChildFunc(next, adapter);
        return function nthLastChild(elem) {
            const siblings = adapter.getSiblings(elem);
            let pos = 0;
            for (let i = siblings.length - 1; i >= 0; i--) {
                if (equals(elem, siblings[i]))
                    break;
                if (adapter.isTag(siblings[i])) {
                    pos++;
                }
            }
            return func(pos) && next(elem);
        };
    },
    "nth-of-type"(next, rule, { adapter, equals }) {
        const func = (0,nth_check__WEBPACK_IMPORTED_MODULE_0__["default"])(rule);
        if (func === boolbase__WEBPACK_IMPORTED_MODULE_1__.falseFunc)
            return boolbase__WEBPACK_IMPORTED_MODULE_1__.falseFunc;
        if (func === boolbase__WEBPACK_IMPORTED_MODULE_1__.trueFunc)
            return getChildFunc(next, adapter);
        return function nthOfType(elem) {
            const siblings = adapter.getSiblings(elem);
            let pos = 0;
            for (let i = 0; i < siblings.length; i++) {
                const currentSibling = siblings[i];
                if (equals(elem, currentSibling))
                    break;
                if (adapter.isTag(currentSibling) &&
                    adapter.getName(currentSibling) === adapter.getName(elem)) {
                    pos++;
                }
            }
            return func(pos) && next(elem);
        };
    },
    "nth-last-of-type"(next, rule, { adapter, equals }) {
        const func = (0,nth_check__WEBPACK_IMPORTED_MODULE_0__["default"])(rule);
        if (func === boolbase__WEBPACK_IMPORTED_MODULE_1__.falseFunc)
            return boolbase__WEBPACK_IMPORTED_MODULE_1__.falseFunc;
        if (func === boolbase__WEBPACK_IMPORTED_MODULE_1__.trueFunc)
            return getChildFunc(next, adapter);
        return function nthLastOfType(elem) {
            const siblings = adapter.getSiblings(elem);
            let pos = 0;
            for (let i = siblings.length - 1; i >= 0; i--) {
                const currentSibling = siblings[i];
                if (equals(elem, currentSibling))
                    break;
                if (adapter.isTag(currentSibling) &&
                    adapter.getName(currentSibling) === adapter.getName(elem)) {
                    pos++;
                }
            }
            return func(pos) && next(elem);
        };
    },
    // TODO determine the actual root element
    root(next, _rule, { adapter }) {
        return (elem) => {
            const parent = adapter.getParent(elem);
            return (parent == null || !adapter.isTag(parent)) && next(elem);
        };
    },
    scope(next, rule, options, context) {
        const { equals } = options;
        if (!context || context.length === 0) {
            // Equivalent to :root
            return filters["root"](next, rule, options);
        }
        if (context.length === 1) {
            // NOTE: can't be unpacked, as :has uses this for side-effects
            return (elem) => equals(context[0], elem) && next(elem);
        }
        return (elem) => context.includes(elem) && next(elem);
    },
    hover: dynamicStatePseudo("isHovered"),
    visited: dynamicStatePseudo("isVisited"),
    active: dynamicStatePseudo("isActive"),
};
/**
 * Dynamic state pseudos. These depend on optional Adapter methods.
 *
 * @param name The name of the adapter method to call.
 * @returns Pseudo for the `filters` object.
 */
function dynamicStatePseudo(name) {
    return function dynamicPseudo(next, _rule, { adapter }) {
        const func = adapter[name];
        if (typeof func !== "function") {
            return boolbase__WEBPACK_IMPORTED_MODULE_1__.falseFunc;
        }
        return function active(elem) {
            return func(elem) && next(elem);
        };
    };
}
//# sourceMappingURL=filters.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/css-select/lib/esm/pseudo-selectors/index.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/css-select/lib/esm/pseudo-selectors/index.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "aliases": function() { return /* reexport safe */ _aliases_js__WEBPACK_IMPORTED_MODULE_2__.aliases; },
/* harmony export */   "compilePseudoSelector": function() { return /* binding */ compilePseudoSelector; },
/* harmony export */   "filters": function() { return /* reexport safe */ _filters_js__WEBPACK_IMPORTED_MODULE_0__.filters; },
/* harmony export */   "pseudos": function() { return /* reexport safe */ _pseudos_js__WEBPACK_IMPORTED_MODULE_1__.pseudos; }
/* harmony export */ });
/* harmony import */ var css_what__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! css-what */ "./node_modules/linkedom/node_modules/css-what/lib/es/parse.js");
/* harmony import */ var _filters_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filters.js */ "./node_modules/linkedom/node_modules/css-select/lib/esm/pseudo-selectors/filters.js");
/* harmony import */ var _pseudos_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pseudos.js */ "./node_modules/linkedom/node_modules/css-select/lib/esm/pseudo-selectors/pseudos.js");
/* harmony import */ var _aliases_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./aliases.js */ "./node_modules/linkedom/node_modules/css-select/lib/esm/pseudo-selectors/aliases.js");
/* harmony import */ var _subselects_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./subselects.js */ "./node_modules/linkedom/node_modules/css-select/lib/esm/pseudo-selectors/subselects.js");






function compilePseudoSelector(next, selector, options, context, compileToken) {
    var _a;
    const { name, data } = selector;
    if (Array.isArray(data)) {
        if (!(name in _subselects_js__WEBPACK_IMPORTED_MODULE_3__.subselects)) {
            throw new Error(`Unknown pseudo-class :${name}(${data})`);
        }
        return _subselects_js__WEBPACK_IMPORTED_MODULE_3__.subselects[name](next, data, options, context, compileToken);
    }
    const userPseudo = (_a = options.pseudos) === null || _a === void 0 ? void 0 : _a[name];
    const stringPseudo = typeof userPseudo === "string" ? userPseudo : _aliases_js__WEBPACK_IMPORTED_MODULE_2__.aliases[name];
    if (typeof stringPseudo === "string") {
        if (data != null) {
            throw new Error(`Pseudo ${name} doesn't have any arguments`);
        }
        // The alias has to be parsed here, to make sure options are respected.
        const alias = (0,css_what__WEBPACK_IMPORTED_MODULE_4__.parse)(stringPseudo);
        return _subselects_js__WEBPACK_IMPORTED_MODULE_3__.subselects.is(next, alias, options, context, compileToken);
    }
    if (typeof userPseudo === "function") {
        (0,_pseudos_js__WEBPACK_IMPORTED_MODULE_1__.verifyPseudoArgs)(userPseudo, name, data, 1);
        return (elem) => userPseudo(elem, data) && next(elem);
    }
    if (name in _filters_js__WEBPACK_IMPORTED_MODULE_0__.filters) {
        return _filters_js__WEBPACK_IMPORTED_MODULE_0__.filters[name](next, data, options, context);
    }
    if (name in _pseudos_js__WEBPACK_IMPORTED_MODULE_1__.pseudos) {
        const pseudo = _pseudos_js__WEBPACK_IMPORTED_MODULE_1__.pseudos[name];
        (0,_pseudos_js__WEBPACK_IMPORTED_MODULE_1__.verifyPseudoArgs)(pseudo, name, data, 2);
        return (elem) => pseudo(elem, options, data) && next(elem);
    }
    throw new Error(`Unknown pseudo-class :${name}`);
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/css-select/lib/esm/pseudo-selectors/pseudos.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/css-select/lib/esm/pseudo-selectors/pseudos.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pseudos": function() { return /* binding */ pseudos; },
/* harmony export */   "verifyPseudoArgs": function() { return /* binding */ verifyPseudoArgs; }
/* harmony export */ });
// While filters are precompiled, pseudos get called when they are needed
const pseudos = {
    empty(elem, { adapter }) {
        return !adapter.getChildren(elem).some((elem) => 
        // FIXME: `getText` call is potentially expensive.
        adapter.isTag(elem) || adapter.getText(elem) !== "");
    },
    "first-child"(elem, { adapter, equals }) {
        if (adapter.prevElementSibling) {
            return adapter.prevElementSibling(elem) == null;
        }
        const firstChild = adapter
            .getSiblings(elem)
            .find((elem) => adapter.isTag(elem));
        return firstChild != null && equals(elem, firstChild);
    },
    "last-child"(elem, { adapter, equals }) {
        const siblings = adapter.getSiblings(elem);
        for (let i = siblings.length - 1; i >= 0; i--) {
            if (equals(elem, siblings[i]))
                return true;
            if (adapter.isTag(siblings[i]))
                break;
        }
        return false;
    },
    "first-of-type"(elem, { adapter, equals }) {
        const siblings = adapter.getSiblings(elem);
        const elemName = adapter.getName(elem);
        for (let i = 0; i < siblings.length; i++) {
            const currentSibling = siblings[i];
            if (equals(elem, currentSibling))
                return true;
            if (adapter.isTag(currentSibling) &&
                adapter.getName(currentSibling) === elemName) {
                break;
            }
        }
        return false;
    },
    "last-of-type"(elem, { adapter, equals }) {
        const siblings = adapter.getSiblings(elem);
        const elemName = adapter.getName(elem);
        for (let i = siblings.length - 1; i >= 0; i--) {
            const currentSibling = siblings[i];
            if (equals(elem, currentSibling))
                return true;
            if (adapter.isTag(currentSibling) &&
                adapter.getName(currentSibling) === elemName) {
                break;
            }
        }
        return false;
    },
    "only-of-type"(elem, { adapter, equals }) {
        const elemName = adapter.getName(elem);
        return adapter
            .getSiblings(elem)
            .every((sibling) => equals(elem, sibling) ||
            !adapter.isTag(sibling) ||
            adapter.getName(sibling) !== elemName);
    },
    "only-child"(elem, { adapter, equals }) {
        return adapter
            .getSiblings(elem)
            .every((sibling) => equals(elem, sibling) || !adapter.isTag(sibling));
    },
};
function verifyPseudoArgs(func, name, subselect, argIndex) {
    if (subselect === null) {
        if (func.length > argIndex) {
            throw new Error(`Pseudo-class :${name} requires an argument`);
        }
    }
    else if (func.length === argIndex) {
        throw new Error(`Pseudo-class :${name} doesn't have any arguments`);
    }
}
//# sourceMappingURL=pseudos.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/css-select/lib/esm/pseudo-selectors/subselects.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/css-select/lib/esm/pseudo-selectors/subselects.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PLACEHOLDER_ELEMENT": function() { return /* binding */ PLACEHOLDER_ELEMENT; },
/* harmony export */   "ensureIsTag": function() { return /* binding */ ensureIsTag; },
/* harmony export */   "getNextSiblings": function() { return /* binding */ getNextSiblings; },
/* harmony export */   "subselects": function() { return /* binding */ subselects; }
/* harmony export */ });
/* harmony import */ var boolbase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! boolbase */ "./node_modules/boolbase/index.js");
/* harmony import */ var _sort_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sort.js */ "./node_modules/linkedom/node_modules/css-select/lib/esm/sort.js");


/** Used as a placeholder for :has. Will be replaced with the actual element. */
const PLACEHOLDER_ELEMENT = {};
function ensureIsTag(next, adapter) {
    if (next === boolbase__WEBPACK_IMPORTED_MODULE_0__.falseFunc)
        return boolbase__WEBPACK_IMPORTED_MODULE_0__.falseFunc;
    return (elem) => adapter.isTag(elem) && next(elem);
}
function getNextSiblings(elem, adapter) {
    const siblings = adapter.getSiblings(elem);
    if (siblings.length <= 1)
        return [];
    const elemIndex = siblings.indexOf(elem);
    if (elemIndex < 0 || elemIndex === siblings.length - 1)
        return [];
    return siblings.slice(elemIndex + 1).filter(adapter.isTag);
}
function copyOptions(options) {
    // Not copied: context, rootFunc
    return {
        xmlMode: !!options.xmlMode,
        lowerCaseAttributeNames: !!options.lowerCaseAttributeNames,
        lowerCaseTags: !!options.lowerCaseTags,
        quirksMode: !!options.quirksMode,
        cacheResults: !!options.cacheResults,
        pseudos: options.pseudos,
        adapter: options.adapter,
        equals: options.equals,
    };
}
const is = (next, token, options, context, compileToken) => {
    const func = compileToken(token, copyOptions(options), context);
    return func === boolbase__WEBPACK_IMPORTED_MODULE_0__.trueFunc
        ? next
        : func === boolbase__WEBPACK_IMPORTED_MODULE_0__.falseFunc
            ? boolbase__WEBPACK_IMPORTED_MODULE_0__.falseFunc
            : (elem) => func(elem) && next(elem);
};
/*
 * :not, :has, :is, :matches and :where have to compile selectors
 * doing this in src/pseudos.ts would lead to circular dependencies,
 * so we add them here
 */
const subselects = {
    is,
    /**
     * `:matches` and `:where` are aliases for `:is`.
     */
    matches: is,
    where: is,
    not(next, token, options, context, compileToken) {
        const func = compileToken(token, copyOptions(options), context);
        return func === boolbase__WEBPACK_IMPORTED_MODULE_0__.falseFunc
            ? next
            : func === boolbase__WEBPACK_IMPORTED_MODULE_0__.trueFunc
                ? boolbase__WEBPACK_IMPORTED_MODULE_0__.falseFunc
                : (elem) => !func(elem) && next(elem);
    },
    has(next, subselect, options, _context, compileToken) {
        const { adapter } = options;
        const opts = copyOptions(options);
        opts.relativeSelector = true;
        const context = subselect.some((s) => s.some(_sort_js__WEBPACK_IMPORTED_MODULE_1__.isTraversal))
            ? // Used as a placeholder. Will be replaced with the actual element.
                [PLACEHOLDER_ELEMENT]
            : undefined;
        const compiled = compileToken(subselect, opts, context);
        if (compiled === boolbase__WEBPACK_IMPORTED_MODULE_0__.falseFunc)
            return boolbase__WEBPACK_IMPORTED_MODULE_0__.falseFunc;
        const hasElement = ensureIsTag(compiled, adapter);
        // If `compiled` is `trueFunc`, we can skip this.
        if (context && compiled !== boolbase__WEBPACK_IMPORTED_MODULE_0__.trueFunc) {
            /*
             * `shouldTestNextSiblings` will only be true if the query starts with
             * a traversal (sibling or adjacent). That means we will always have a context.
             */
            const { shouldTestNextSiblings = false } = compiled;
            return (elem) => {
                if (!next(elem))
                    return false;
                context[0] = elem;
                const childs = adapter.getChildren(elem);
                const nextElements = shouldTestNextSiblings
                    ? [...childs, ...getNextSiblings(elem, adapter)]
                    : childs;
                return adapter.existsOne(hasElement, nextElements);
            };
        }
        return (elem) => next(elem) &&
            adapter.existsOne(hasElement, adapter.getChildren(elem));
    },
};
//# sourceMappingURL=subselects.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/css-select/lib/esm/sort.js":
/*!***********************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/css-select/lib/esm/sort.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ sortByProcedure; },
/* harmony export */   "isTraversal": function() { return /* binding */ isTraversal; }
/* harmony export */ });
/* harmony import */ var css_what__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! css-what */ "./node_modules/linkedom/node_modules/css-what/lib/es/types.js");

const procedure = new Map([
    [css_what__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Universal, 50],
    [css_what__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Tag, 30],
    [css_what__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Attribute, 1],
    [css_what__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Pseudo, 0],
]);
function isTraversal(token) {
    return !procedure.has(token.type);
}
const attributes = new Map([
    [css_what__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Exists, 10],
    [css_what__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Equals, 8],
    [css_what__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Not, 7],
    [css_what__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Start, 6],
    [css_what__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.End, 6],
    [css_what__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Any, 5],
]);
/**
 * Sort the parts of the passed selector,
 * as there is potential for optimization
 * (some types of selectors are faster than others)
 *
 * @param arr Selector to sort
 */
function sortByProcedure(arr) {
    const procs = arr.map(getProcedure);
    for (let i = 1; i < arr.length; i++) {
        const procNew = procs[i];
        if (procNew < 0)
            continue;
        for (let j = i - 1; j >= 0 && procNew < procs[j]; j--) {
            const token = arr[j + 1];
            arr[j + 1] = arr[j];
            arr[j] = token;
            procs[j + 1] = procs[j];
            procs[j] = procNew;
        }
    }
}
function getProcedure(token) {
    var _a, _b;
    let proc = (_a = procedure.get(token.type)) !== null && _a !== void 0 ? _a : -1;
    if (token.type === css_what__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Attribute) {
        proc = (_b = attributes.get(token.action)) !== null && _b !== void 0 ? _b : 4;
        if (token.action === css_what__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Equals && token.name === "id") {
            // Prefer ID selectors (eg. #ID)
            proc = 9;
        }
        if (token.ignoreCase) {
            /*
             * IgnoreCase adds some overhead, prefer "normal" token
             * this is a binary operation, to ensure it's still an int
             */
            proc >>= 1;
        }
    }
    else if (token.type === css_what__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Pseudo) {
        if (!token.data) {
            proc = 3;
        }
        else if (token.name === "has" || token.name === "contains") {
            proc = 0; // Expensive in any case
        }
        else if (Array.isArray(token.data)) {
            // Eg. :matches, :not
            proc = Math.min(...token.data.map((d) => Math.min(...d.map(getProcedure))));
            // If we have traversals, try to avoid executing this selector
            if (proc < 0) {
                proc = 0;
            }
        }
        else {
            proc = 2;
        }
    }
    return proc;
}
//# sourceMappingURL=sort.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/dom-serializer/lib/esm/foreignNames.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/dom-serializer/lib/esm/foreignNames.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "attributeNames": function() { return /* binding */ attributeNames; },
/* harmony export */   "elementNames": function() { return /* binding */ elementNames; }
/* harmony export */ });
const elementNames = new Map([
    "altGlyph",
    "altGlyphDef",
    "altGlyphItem",
    "animateColor",
    "animateMotion",
    "animateTransform",
    "clipPath",
    "feBlend",
    "feColorMatrix",
    "feComponentTransfer",
    "feComposite",
    "feConvolveMatrix",
    "feDiffuseLighting",
    "feDisplacementMap",
    "feDistantLight",
    "feDropShadow",
    "feFlood",
    "feFuncA",
    "feFuncB",
    "feFuncG",
    "feFuncR",
    "feGaussianBlur",
    "feImage",
    "feMerge",
    "feMergeNode",
    "feMorphology",
    "feOffset",
    "fePointLight",
    "feSpecularLighting",
    "feSpotLight",
    "feTile",
    "feTurbulence",
    "foreignObject",
    "glyphRef",
    "linearGradient",
    "radialGradient",
    "textPath",
].map((val) => [val.toLowerCase(), val]));
const attributeNames = new Map([
    "definitionURL",
    "attributeName",
    "attributeType",
    "baseFrequency",
    "baseProfile",
    "calcMode",
    "clipPathUnits",
    "diffuseConstant",
    "edgeMode",
    "filterUnits",
    "glyphRef",
    "gradientTransform",
    "gradientUnits",
    "kernelMatrix",
    "kernelUnitLength",
    "keyPoints",
    "keySplines",
    "keyTimes",
    "lengthAdjust",
    "limitingConeAngle",
    "markerHeight",
    "markerUnits",
    "markerWidth",
    "maskContentUnits",
    "maskUnits",
    "numOctaves",
    "pathLength",
    "patternContentUnits",
    "patternTransform",
    "patternUnits",
    "pointsAtX",
    "pointsAtY",
    "pointsAtZ",
    "preserveAlpha",
    "preserveAspectRatio",
    "primitiveUnits",
    "refX",
    "refY",
    "repeatCount",
    "repeatDur",
    "requiredExtensions",
    "requiredFeatures",
    "specularConstant",
    "specularExponent",
    "spreadMethod",
    "startOffset",
    "stdDeviation",
    "stitchTiles",
    "surfaceScale",
    "systemLanguage",
    "tableValues",
    "targetX",
    "targetY",
    "textLength",
    "viewBox",
    "viewTarget",
    "xChannelSelector",
    "yChannelSelector",
    "zoomAndPan",
].map((val) => [val.toLowerCase(), val]));


/***/ }),

/***/ "./node_modules/linkedom/node_modules/dom-serializer/lib/esm/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/dom-serializer/lib/esm/index.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": function() { return /* binding */ render; }
/* harmony export */ });
/* harmony import */ var domelementtype__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! domelementtype */ "./node_modules/linkedom/node_modules/domelementtype/lib/esm/index.js");
/* harmony import */ var entities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! entities */ "./node_modules/linkedom/node_modules/entities/lib/esm/index.js");
/* harmony import */ var _foreignNames_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foreignNames.js */ "./node_modules/linkedom/node_modules/dom-serializer/lib/esm/foreignNames.js");
/*
 * Module dependencies
 */


/**
 * Mixed-case SVG and MathML tags & attributes
 * recognized by the HTML parser.
 *
 * @see https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inforeign
 */

const unencodedElements = new Set([
    "style",
    "script",
    "xmp",
    "iframe",
    "noembed",
    "noframes",
    "plaintext",
    "noscript",
]);
function replaceQuotes(value) {
    return value.replace(/"/g, "&quot;");
}
/**
 * Format attributes
 */
function formatAttributes(attributes, opts) {
    var _a;
    if (!attributes)
        return;
    const encode = ((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) === false
        ? replaceQuotes
        : opts.xmlMode || opts.encodeEntities !== "utf8"
            ? entities__WEBPACK_IMPORTED_MODULE_1__.encodeXML
            : entities__WEBPACK_IMPORTED_MODULE_1__.escapeAttribute;
    return Object.keys(attributes)
        .map((key) => {
        var _a, _b;
        const value = (_a = attributes[key]) !== null && _a !== void 0 ? _a : "";
        if (opts.xmlMode === "foreign") {
            /* Fix up mixed-case attribute names */
            key = (_b = _foreignNames_js__WEBPACK_IMPORTED_MODULE_2__.attributeNames.get(key)) !== null && _b !== void 0 ? _b : key;
        }
        if (!opts.emptyAttrs && !opts.xmlMode && value === "") {
            return key;
        }
        return `${key}="${encode(value)}"`;
    })
        .join(" ");
}
/**
 * Self-enclosing tags
 */
const singleTag = new Set([
    "area",
    "base",
    "basefont",
    "br",
    "col",
    "command",
    "embed",
    "frame",
    "hr",
    "img",
    "input",
    "isindex",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr",
]);
/**
 * Renders a DOM node or an array of DOM nodes to a string.
 *
 * Can be thought of as the equivalent of the `outerHTML` of the passed node(s).
 *
 * @param node Node to be rendered.
 * @param options Changes serialization behavior
 */
function render(node, options = {}) {
    const nodes = "length" in node ? node : [node];
    let output = "";
    for (let i = 0; i < nodes.length; i++) {
        output += renderNode(nodes[i], options);
    }
    return output;
}
/* harmony default export */ __webpack_exports__["default"] = (render);
function renderNode(node, options) {
    switch (node.type) {
        case domelementtype__WEBPACK_IMPORTED_MODULE_0__.Root:
            return render(node.children, options);
        // @ts-expect-error We don't use `Doctype` yet
        case domelementtype__WEBPACK_IMPORTED_MODULE_0__.Doctype:
        case domelementtype__WEBPACK_IMPORTED_MODULE_0__.Directive:
            return renderDirective(node);
        case domelementtype__WEBPACK_IMPORTED_MODULE_0__.Comment:
            return renderComment(node);
        case domelementtype__WEBPACK_IMPORTED_MODULE_0__.CDATA:
            return renderCdata(node);
        case domelementtype__WEBPACK_IMPORTED_MODULE_0__.Script:
        case domelementtype__WEBPACK_IMPORTED_MODULE_0__.Style:
        case domelementtype__WEBPACK_IMPORTED_MODULE_0__.Tag:
            return renderTag(node, options);
        case domelementtype__WEBPACK_IMPORTED_MODULE_0__.Text:
            return renderText(node, options);
    }
}
const foreignModeIntegrationPoints = new Set([
    "mi",
    "mo",
    "mn",
    "ms",
    "mtext",
    "annotation-xml",
    "foreignObject",
    "desc",
    "title",
]);
const foreignElements = new Set(["svg", "math"]);
function renderTag(elem, opts) {
    var _a;
    // Handle SVG / MathML in HTML
    if (opts.xmlMode === "foreign") {
        /* Fix up mixed-case element names */
        elem.name = (_a = _foreignNames_js__WEBPACK_IMPORTED_MODULE_2__.elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name;
        /* Exit foreign mode at integration points */
        if (elem.parent &&
            foreignModeIntegrationPoints.has(elem.parent.name)) {
            opts = { ...opts, xmlMode: false };
        }
    }
    if (!opts.xmlMode && foreignElements.has(elem.name)) {
        opts = { ...opts, xmlMode: "foreign" };
    }
    let tag = `<${elem.name}`;
    const attribs = formatAttributes(elem.attribs, opts);
    if (attribs) {
        tag += ` ${attribs}`;
    }
    if (elem.children.length === 0 &&
        (opts.xmlMode
            ? // In XML mode or foreign mode, and user hasn't explicitly turned off self-closing tags
                opts.selfClosingTags !== false
            : // User explicitly asked for self-closing tags, even in HTML mode
                opts.selfClosingTags && singleTag.has(elem.name))) {
        if (!opts.xmlMode)
            tag += " ";
        tag += "/>";
    }
    else {
        tag += ">";
        if (elem.children.length > 0) {
            tag += render(elem.children, opts);
        }
        if (opts.xmlMode || !singleTag.has(elem.name)) {
            tag += `</${elem.name}>`;
        }
    }
    return tag;
}
function renderDirective(elem) {
    return `<${elem.data}>`;
}
function renderText(elem, opts) {
    var _a;
    let data = elem.data || "";
    // If entities weren't decoded, no need to encode them back
    if (((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) !== false &&
        !(!opts.xmlMode &&
            elem.parent &&
            unencodedElements.has(elem.parent.name))) {
        data =
            opts.xmlMode || opts.encodeEntities !== "utf8"
                ? (0,entities__WEBPACK_IMPORTED_MODULE_1__.encodeXML)(data)
                : (0,entities__WEBPACK_IMPORTED_MODULE_1__.escapeText)(data);
    }
    return data;
}
function renderCdata(elem) {
    return `<![CDATA[${elem.children[0].data}]]>`;
}
function renderComment(elem) {
    return `<!--${elem.data}-->`;
}


/***/ }),

/***/ "./node_modules/linkedom/node_modules/domelementtype/lib/esm/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/domelementtype/lib/esm/index.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CDATA": function() { return /* binding */ CDATA; },
/* harmony export */   "Comment": function() { return /* binding */ Comment; },
/* harmony export */   "Directive": function() { return /* binding */ Directive; },
/* harmony export */   "Doctype": function() { return /* binding */ Doctype; },
/* harmony export */   "ElementType": function() { return /* binding */ ElementType; },
/* harmony export */   "Root": function() { return /* binding */ Root; },
/* harmony export */   "Script": function() { return /* binding */ Script; },
/* harmony export */   "Style": function() { return /* binding */ Style; },
/* harmony export */   "Tag": function() { return /* binding */ Tag; },
/* harmony export */   "Text": function() { return /* binding */ Text; },
/* harmony export */   "isTag": function() { return /* binding */ isTag; }
/* harmony export */ });
/** Types of elements found in htmlparser2's DOM */
var ElementType;
(function (ElementType) {
    /** Type for the root element of a document */
    ElementType["Root"] = "root";
    /** Type for Text */
    ElementType["Text"] = "text";
    /** Type for <? ... ?> */
    ElementType["Directive"] = "directive";
    /** Type for <!-- ... --> */
    ElementType["Comment"] = "comment";
    /** Type for <script> tags */
    ElementType["Script"] = "script";
    /** Type for <style> tags */
    ElementType["Style"] = "style";
    /** Type for Any tag */
    ElementType["Tag"] = "tag";
    /** Type for <![CDATA[ ... ]]> */
    ElementType["CDATA"] = "cdata";
    /** Type for <!doctype ...> */
    ElementType["Doctype"] = "doctype";
})(ElementType || (ElementType = {}));
/**
 * Tests whether an element is a tag or not.
 *
 * @param elem Element to test
 */
function isTag(elem) {
    return (elem.type === ElementType.Tag ||
        elem.type === ElementType.Script ||
        elem.type === ElementType.Style);
}
// Exports for backwards compatibility
/** Type for the root element of a document */
const Root = ElementType.Root;
/** Type for Text */
const Text = ElementType.Text;
/** Type for <? ... ?> */
const Directive = ElementType.Directive;
/** Type for <!-- ... --> */
const Comment = ElementType.Comment;
/** Type for <script> tags */
const Script = ElementType.Script;
/** Type for <style> tags */
const Style = ElementType.Style;
/** Type for Any tag */
const Tag = ElementType.Tag;
/** Type for <![CDATA[ ... ]]> */
const CDATA = ElementType.CDATA;
/** Type for <!doctype ...> */
const Doctype = ElementType.Doctype;


/***/ }),

/***/ "./node_modules/linkedom/node_modules/domhandler/lib/esm/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/domhandler/lib/esm/index.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CDATA": function() { return /* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.CDATA; },
/* harmony export */   "Comment": function() { return /* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.Comment; },
/* harmony export */   "DataNode": function() { return /* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.DataNode; },
/* harmony export */   "Document": function() { return /* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.Document; },
/* harmony export */   "DomHandler": function() { return /* binding */ DomHandler; },
/* harmony export */   "Element": function() { return /* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.Element; },
/* harmony export */   "Node": function() { return /* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.Node; },
/* harmony export */   "NodeWithChildren": function() { return /* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.NodeWithChildren; },
/* harmony export */   "ProcessingInstruction": function() { return /* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.ProcessingInstruction; },
/* harmony export */   "Text": function() { return /* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.Text; },
/* harmony export */   "cloneNode": function() { return /* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.cloneNode; },
/* harmony export */   "hasChildren": function() { return /* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.hasChildren; },
/* harmony export */   "isCDATA": function() { return /* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.isCDATA; },
/* harmony export */   "isComment": function() { return /* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.isComment; },
/* harmony export */   "isDirective": function() { return /* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.isDirective; },
/* harmony export */   "isDocument": function() { return /* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.isDocument; },
/* harmony export */   "isTag": function() { return /* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.isTag; },
/* harmony export */   "isText": function() { return /* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.isText; }
/* harmony export */ });
/* harmony import */ var domelementtype__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! domelementtype */ "./node_modules/linkedom/node_modules/domelementtype/lib/esm/index.js");
/* harmony import */ var _node_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node.js */ "./node_modules/linkedom/node_modules/domhandler/lib/esm/node.js");



// Default options
const defaultOpts = {
    withStartIndices: false,
    withEndIndices: false,
    xmlMode: false,
};
class DomHandler {
    /**
     * @param callback Called once parsing has completed.
     * @param options Settings for the handler.
     * @param elementCB Callback whenever a tag is closed.
     */
    constructor(callback, options, elementCB) {
        /** The elements of the DOM */
        this.dom = [];
        /** The root element for the DOM */
        this.root = new _node_js__WEBPACK_IMPORTED_MODULE_1__.Document(this.dom);
        /** Indicated whether parsing has been completed. */
        this.done = false;
        /** Stack of open tags. */
        this.tagStack = [this.root];
        /** A data node that is still being written to. */
        this.lastNode = null;
        /** Reference to the parser instance. Used for location information. */
        this.parser = null;
        // Make it possible to skip arguments, for backwards-compatibility
        if (typeof options === "function") {
            elementCB = options;
            options = defaultOpts;
        }
        if (typeof callback === "object") {
            options = callback;
            callback = undefined;
        }
        this.callback = callback !== null && callback !== void 0 ? callback : null;
        this.options = options !== null && options !== void 0 ? options : defaultOpts;
        this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;
    }
    onparserinit(parser) {
        this.parser = parser;
    }
    // Resets the handler back to starting state
    onreset() {
        this.dom = [];
        this.root = new _node_js__WEBPACK_IMPORTED_MODULE_1__.Document(this.dom);
        this.done = false;
        this.tagStack = [this.root];
        this.lastNode = null;
        this.parser = null;
    }
    // Signals the handler that parsing is done
    onend() {
        if (this.done)
            return;
        this.done = true;
        this.parser = null;
        this.handleCallback(null);
    }
    onerror(error) {
        this.handleCallback(error);
    }
    onclosetag() {
        this.lastNode = null;
        const elem = this.tagStack.pop();
        if (this.options.withEndIndices) {
            elem.endIndex = this.parser.endIndex;
        }
        if (this.elementCB)
            this.elementCB(elem);
    }
    onopentag(name, attribs) {
        const type = this.options.xmlMode ? domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Tag : undefined;
        const element = new _node_js__WEBPACK_IMPORTED_MODULE_1__.Element(name, attribs, undefined, type);
        this.addNode(element);
        this.tagStack.push(element);
    }
    ontext(data) {
        const { lastNode } = this;
        if (lastNode && lastNode.type === domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Text) {
            lastNode.data += data;
            if (this.options.withEndIndices) {
                lastNode.endIndex = this.parser.endIndex;
            }
        }
        else {
            const node = new _node_js__WEBPACK_IMPORTED_MODULE_1__.Text(data);
            this.addNode(node);
            this.lastNode = node;
        }
    }
    oncomment(data) {
        if (this.lastNode && this.lastNode.type === domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Comment) {
            this.lastNode.data += data;
            return;
        }
        const node = new _node_js__WEBPACK_IMPORTED_MODULE_1__.Comment(data);
        this.addNode(node);
        this.lastNode = node;
    }
    oncommentend() {
        this.lastNode = null;
    }
    oncdatastart() {
        const text = new _node_js__WEBPACK_IMPORTED_MODULE_1__.Text("");
        const node = new _node_js__WEBPACK_IMPORTED_MODULE_1__.CDATA([text]);
        this.addNode(node);
        text.parent = node;
        this.lastNode = text;
    }
    oncdataend() {
        this.lastNode = null;
    }
    onprocessinginstruction(name, data) {
        const node = new _node_js__WEBPACK_IMPORTED_MODULE_1__.ProcessingInstruction(name, data);
        this.addNode(node);
    }
    handleCallback(error) {
        if (typeof this.callback === "function") {
            this.callback(error, this.dom);
        }
        else if (error) {
            throw error;
        }
    }
    addNode(node) {
        const parent = this.tagStack[this.tagStack.length - 1];
        const previousSibling = parent.children[parent.children.length - 1];
        if (this.options.withStartIndices) {
            node.startIndex = this.parser.startIndex;
        }
        if (this.options.withEndIndices) {
            node.endIndex = this.parser.endIndex;
        }
        parent.children.push(node);
        if (previousSibling) {
            node.prev = previousSibling;
            previousSibling.next = node;
        }
        node.parent = parent;
        this.lastNode = null;
    }
}
/* harmony default export */ __webpack_exports__["default"] = (DomHandler);


/***/ }),

/***/ "./node_modules/linkedom/node_modules/domhandler/lib/esm/node.js":
/*!***********************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/domhandler/lib/esm/node.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CDATA": function() { return /* binding */ CDATA; },
/* harmony export */   "Comment": function() { return /* binding */ Comment; },
/* harmony export */   "DataNode": function() { return /* binding */ DataNode; },
/* harmony export */   "Document": function() { return /* binding */ Document; },
/* harmony export */   "Element": function() { return /* binding */ Element; },
/* harmony export */   "Node": function() { return /* binding */ Node; },
/* harmony export */   "NodeWithChildren": function() { return /* binding */ NodeWithChildren; },
/* harmony export */   "ProcessingInstruction": function() { return /* binding */ ProcessingInstruction; },
/* harmony export */   "Text": function() { return /* binding */ Text; },
/* harmony export */   "cloneNode": function() { return /* binding */ cloneNode; },
/* harmony export */   "hasChildren": function() { return /* binding */ hasChildren; },
/* harmony export */   "isCDATA": function() { return /* binding */ isCDATA; },
/* harmony export */   "isComment": function() { return /* binding */ isComment; },
/* harmony export */   "isDirective": function() { return /* binding */ isDirective; },
/* harmony export */   "isDocument": function() { return /* binding */ isDocument; },
/* harmony export */   "isTag": function() { return /* binding */ isTag; },
/* harmony export */   "isText": function() { return /* binding */ isText; }
/* harmony export */ });
/* harmony import */ var domelementtype__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! domelementtype */ "./node_modules/linkedom/node_modules/domelementtype/lib/esm/index.js");

/**
 * This object will be used as the prototype for Nodes when creating a
 * DOM-Level-1-compliant structure.
 */
class Node {
    constructor() {
        /** Parent of the node */
        this.parent = null;
        /** Previous sibling */
        this.prev = null;
        /** Next sibling */
        this.next = null;
        /** The start index of the node. Requires `withStartIndices` on the handler to be `true. */
        this.startIndex = null;
        /** The end index of the node. Requires `withEndIndices` on the handler to be `true. */
        this.endIndex = null;
    }
    // Read-write aliases for properties
    /**
     * Same as {@link parent}.
     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
     */
    get parentNode() {
        return this.parent;
    }
    set parentNode(parent) {
        this.parent = parent;
    }
    /**
     * Same as {@link prev}.
     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
     */
    get previousSibling() {
        return this.prev;
    }
    set previousSibling(prev) {
        this.prev = prev;
    }
    /**
     * Same as {@link next}.
     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
     */
    get nextSibling() {
        return this.next;
    }
    set nextSibling(next) {
        this.next = next;
    }
    /**
     * Clone this node, and optionally its children.
     *
     * @param recursive Clone child nodes as well.
     * @returns A clone of the node.
     */
    cloneNode(recursive = false) {
        return cloneNode(this, recursive);
    }
}
/**
 * A node that contains some data.
 */
class DataNode extends Node {
    /**
     * @param data The content of the data node
     */
    constructor(data) {
        super();
        this.data = data;
    }
    /**
     * Same as {@link data}.
     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
     */
    get nodeValue() {
        return this.data;
    }
    set nodeValue(data) {
        this.data = data;
    }
}
/**
 * Text within the document.
 */
class Text extends DataNode {
    constructor() {
        super(...arguments);
        this.type = domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Text;
    }
    get nodeType() {
        return 3;
    }
}
/**
 * Comments within the document.
 */
class Comment extends DataNode {
    constructor() {
        super(...arguments);
        this.type = domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Comment;
    }
    get nodeType() {
        return 8;
    }
}
/**
 * Processing instructions, including doc types.
 */
class ProcessingInstruction extends DataNode {
    constructor(name, data) {
        super(data);
        this.name = name;
        this.type = domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Directive;
    }
    get nodeType() {
        return 1;
    }
}
/**
 * A `Node` that can have children.
 */
class NodeWithChildren extends Node {
    /**
     * @param children Children of the node. Only certain node types can have children.
     */
    constructor(children) {
        super();
        this.children = children;
    }
    // Aliases
    /** First child of the node. */
    get firstChild() {
        var _a;
        return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;
    }
    /** Last child of the node. */
    get lastChild() {
        return this.children.length > 0
            ? this.children[this.children.length - 1]
            : null;
    }
    /**
     * Same as {@link children}.
     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
     */
    get childNodes() {
        return this.children;
    }
    set childNodes(children) {
        this.children = children;
    }
}
class CDATA extends NodeWithChildren {
    constructor() {
        super(...arguments);
        this.type = domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.CDATA;
    }
    get nodeType() {
        return 4;
    }
}
/**
 * The root node of the document.
 */
class Document extends NodeWithChildren {
    constructor() {
        super(...arguments);
        this.type = domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Root;
    }
    get nodeType() {
        return 9;
    }
}
/**
 * An element within the DOM.
 */
class Element extends NodeWithChildren {
    /**
     * @param name Name of the tag, eg. `div`, `span`.
     * @param attribs Object mapping attribute names to attribute values.
     * @param children Children of the node.
     */
    constructor(name, attribs, children = [], type = name === "script"
        ? domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Script
        : name === "style"
            ? domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Style
            : domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Tag) {
        super(children);
        this.name = name;
        this.attribs = attribs;
        this.type = type;
    }
    get nodeType() {
        return 1;
    }
    // DOM Level 1 aliases
    /**
     * Same as {@link name}.
     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
     */
    get tagName() {
        return this.name;
    }
    set tagName(name) {
        this.name = name;
    }
    get attributes() {
        return Object.keys(this.attribs).map((name) => {
            var _a, _b;
            return ({
                name,
                value: this.attribs[name],
                namespace: (_a = this["x-attribsNamespace"]) === null || _a === void 0 ? void 0 : _a[name],
                prefix: (_b = this["x-attribsPrefix"]) === null || _b === void 0 ? void 0 : _b[name],
            });
        });
    }
}
/**
 * @param node Node to check.
 * @returns `true` if the node is a `Element`, `false` otherwise.
 */
function isTag(node) {
    return (0,domelementtype__WEBPACK_IMPORTED_MODULE_0__.isTag)(node);
}
/**
 * @param node Node to check.
 * @returns `true` if the node has the type `CDATA`, `false` otherwise.
 */
function isCDATA(node) {
    return node.type === domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.CDATA;
}
/**
 * @param node Node to check.
 * @returns `true` if the node has the type `Text`, `false` otherwise.
 */
function isText(node) {
    return node.type === domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Text;
}
/**
 * @param node Node to check.
 * @returns `true` if the node has the type `Comment`, `false` otherwise.
 */
function isComment(node) {
    return node.type === domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Comment;
}
/**
 * @param node Node to check.
 * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.
 */
function isDirective(node) {
    return node.type === domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Directive;
}
/**
 * @param node Node to check.
 * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.
 */
function isDocument(node) {
    return node.type === domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Root;
}
/**
 * @param node Node to check.
 * @returns `true` if the node has children, `false` otherwise.
 */
function hasChildren(node) {
    return Object.prototype.hasOwnProperty.call(node, "children");
}
/**
 * Clone a node, and optionally its children.
 *
 * @param recursive Clone child nodes as well.
 * @returns A clone of the node.
 */
function cloneNode(node, recursive = false) {
    let result;
    if (isText(node)) {
        result = new Text(node.data);
    }
    else if (isComment(node)) {
        result = new Comment(node.data);
    }
    else if (isTag(node)) {
        const children = recursive ? cloneChildren(node.children) : [];
        const clone = new Element(node.name, { ...node.attribs }, children);
        children.forEach((child) => (child.parent = clone));
        if (node.namespace != null) {
            clone.namespace = node.namespace;
        }
        if (node["x-attribsNamespace"]) {
            clone["x-attribsNamespace"] = { ...node["x-attribsNamespace"] };
        }
        if (node["x-attribsPrefix"]) {
            clone["x-attribsPrefix"] = { ...node["x-attribsPrefix"] };
        }
        result = clone;
    }
    else if (isCDATA(node)) {
        const children = recursive ? cloneChildren(node.children) : [];
        const clone = new CDATA(children);
        children.forEach((child) => (child.parent = clone));
        result = clone;
    }
    else if (isDocument(node)) {
        const children = recursive ? cloneChildren(node.children) : [];
        const clone = new Document(children);
        children.forEach((child) => (child.parent = clone));
        if (node["x-mode"]) {
            clone["x-mode"] = node["x-mode"];
        }
        result = clone;
    }
    else if (isDirective(node)) {
        const instruction = new ProcessingInstruction(node.name, node.data);
        if (node["x-name"] != null) {
            instruction["x-name"] = node["x-name"];
            instruction["x-publicId"] = node["x-publicId"];
            instruction["x-systemId"] = node["x-systemId"];
        }
        result = instruction;
    }
    else {
        throw new Error(`Not implemented yet: ${node.type}`);
    }
    result.startIndex = node.startIndex;
    result.endIndex = node.endIndex;
    if (node.sourceCodeLocation != null) {
        result.sourceCodeLocation = node.sourceCodeLocation;
    }
    return result;
}
function cloneChildren(childs) {
    const children = childs.map((child) => cloneNode(child, true));
    for (let i = 1; i < children.length; i++) {
        children[i].prev = children[i - 1];
        children[i - 1].next = children[i];
    }
    return children;
}


/***/ }),

/***/ "./node_modules/linkedom/node_modules/domutils/lib/esm/feeds.js":
/*!**********************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/domutils/lib/esm/feeds.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getFeed": function() { return /* binding */ getFeed; }
/* harmony export */ });
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/linkedom/node_modules/domutils/lib/esm/stringify.js");
/* harmony import */ var _legacy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./legacy.js */ "./node_modules/linkedom/node_modules/domutils/lib/esm/legacy.js");


/**
 * Get the feed object from the root of a DOM tree.
 *
 * @category Feeds
 * @param doc - The DOM to to extract the feed from.
 * @returns The feed.
 */
function getFeed(doc) {
    const feedRoot = getOneElement(isValidFeed, doc);
    return !feedRoot
        ? null
        : feedRoot.name === "feed"
            ? getAtomFeed(feedRoot)
            : getRssFeed(feedRoot);
}
/**
 * Parse an Atom feed.
 *
 * @param feedRoot The root of the feed.
 * @returns The parsed feed.
 */
function getAtomFeed(feedRoot) {
    var _a;
    const childs = feedRoot.children;
    const feed = {
        type: "atom",
        items: (0,_legacy_js__WEBPACK_IMPORTED_MODULE_1__.getElementsByTagName)("entry", childs).map((item) => {
            var _a;
            const { children } = item;
            const entry = { media: getMediaElements(children) };
            addConditionally(entry, "id", "id", children);
            addConditionally(entry, "title", "title", children);
            const href = (_a = getOneElement("link", children)) === null || _a === void 0 ? void 0 : _a.attribs["href"];
            if (href) {
                entry.link = href;
            }
            const description = fetch("summary", children) || fetch("content", children);
            if (description) {
                entry.description = description;
            }
            const pubDate = fetch("updated", children);
            if (pubDate) {
                entry.pubDate = new Date(pubDate);
            }
            return entry;
        }),
    };
    addConditionally(feed, "id", "id", childs);
    addConditionally(feed, "title", "title", childs);
    const href = (_a = getOneElement("link", childs)) === null || _a === void 0 ? void 0 : _a.attribs["href"];
    if (href) {
        feed.link = href;
    }
    addConditionally(feed, "description", "subtitle", childs);
    const updated = fetch("updated", childs);
    if (updated) {
        feed.updated = new Date(updated);
    }
    addConditionally(feed, "author", "email", childs, true);
    return feed;
}
/**
 * Parse a RSS feed.
 *
 * @param feedRoot The root of the feed.
 * @returns The parsed feed.
 */
function getRssFeed(feedRoot) {
    var _a, _b;
    const childs = (_b = (_a = getOneElement("channel", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];
    const feed = {
        type: feedRoot.name.substr(0, 3),
        id: "",
        items: (0,_legacy_js__WEBPACK_IMPORTED_MODULE_1__.getElementsByTagName)("item", feedRoot.children).map((item) => {
            const { children } = item;
            const entry = { media: getMediaElements(children) };
            addConditionally(entry, "id", "guid", children);
            addConditionally(entry, "title", "title", children);
            addConditionally(entry, "link", "link", children);
            addConditionally(entry, "description", "description", children);
            const pubDate = fetch("pubDate", children);
            if (pubDate)
                entry.pubDate = new Date(pubDate);
            return entry;
        }),
    };
    addConditionally(feed, "title", "title", childs);
    addConditionally(feed, "link", "link", childs);
    addConditionally(feed, "description", "description", childs);
    const updated = fetch("lastBuildDate", childs);
    if (updated) {
        feed.updated = new Date(updated);
    }
    addConditionally(feed, "author", "managingEditor", childs, true);
    return feed;
}
const MEDIA_KEYS_STRING = ["url", "type", "lang"];
const MEDIA_KEYS_INT = [
    "fileSize",
    "bitrate",
    "framerate",
    "samplingrate",
    "channels",
    "duration",
    "height",
    "width",
];
/**
 * Get all media elements of a feed item.
 *
 * @param where Nodes to search in.
 * @returns Media elements.
 */
function getMediaElements(where) {
    return (0,_legacy_js__WEBPACK_IMPORTED_MODULE_1__.getElementsByTagName)("media:content", where).map((elem) => {
        const { attribs } = elem;
        const media = {
            medium: attribs["medium"],
            isDefault: !!attribs["isDefault"],
        };
        for (const attrib of MEDIA_KEYS_STRING) {
            if (attribs[attrib]) {
                media[attrib] = attribs[attrib];
            }
        }
        for (const attrib of MEDIA_KEYS_INT) {
            if (attribs[attrib]) {
                media[attrib] = parseInt(attribs[attrib], 10);
            }
        }
        if (attribs["expression"]) {
            media.expression = attribs["expression"];
        }
        return media;
    });
}
/**
 * Get one element by tag name.
 *
 * @param tagName Tag name to look for
 * @param node Node to search in
 * @returns The element or null
 */
function getOneElement(tagName, node) {
    return (0,_legacy_js__WEBPACK_IMPORTED_MODULE_1__.getElementsByTagName)(tagName, node, true, 1)[0];
}
/**
 * Get the text content of an element with a certain tag name.
 *
 * @param tagName Tag name to look for.
 * @param where Node to search in.
 * @param recurse Whether to recurse into child nodes.
 * @returns The text content of the element.
 */
function fetch(tagName, where, recurse = false) {
    return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_0__.textContent)((0,_legacy_js__WEBPACK_IMPORTED_MODULE_1__.getElementsByTagName)(tagName, where, recurse, 1)).trim();
}
/**
 * Adds a property to an object if it has a value.
 *
 * @param obj Object to be extended
 * @param prop Property name
 * @param tagName Tag name that contains the conditionally added property
 * @param where Element to search for the property
 * @param recurse Whether to recurse into child nodes.
 */
function addConditionally(obj, prop, tagName, where, recurse = false) {
    const val = fetch(tagName, where, recurse);
    if (val)
        obj[prop] = val;
}
/**
 * Checks if an element is a feed root node.
 *
 * @param value The name of the element to check.
 * @returns Whether an element is a feed root node.
 */
function isValidFeed(value) {
    return value === "rss" || value === "feed" || value === "rdf:RDF";
}
//# sourceMappingURL=feeds.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/domutils/lib/esm/helpers.js":
/*!************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/domutils/lib/esm/helpers.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DocumentPosition": function() { return /* binding */ DocumentPosition; },
/* harmony export */   "compareDocumentPosition": function() { return /* binding */ compareDocumentPosition; },
/* harmony export */   "removeSubsets": function() { return /* binding */ removeSubsets; },
/* harmony export */   "uniqueSort": function() { return /* binding */ uniqueSort; }
/* harmony export */ });
/* harmony import */ var domhandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! domhandler */ "./node_modules/linkedom/node_modules/domhandler/lib/esm/index.js");

/**
 * Given an array of nodes, remove any member that is contained by another.
 *
 * @category Helpers
 * @param nodes Nodes to filter.
 * @returns Remaining nodes that aren't subtrees of each other.
 */
function removeSubsets(nodes) {
    let idx = nodes.length;
    /*
     * Check if each node (or one of its ancestors) is already contained in the
     * array.
     */
    while (--idx >= 0) {
        const node = nodes[idx];
        /*
         * Remove the node if it is not unique.
         * We are going through the array from the end, so we only
         * have to check nodes that preceed the node under consideration in the array.
         */
        if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {
            nodes.splice(idx, 1);
            continue;
        }
        for (let ancestor = node.parent; ancestor; ancestor = ancestor.parent) {
            if (nodes.includes(ancestor)) {
                nodes.splice(idx, 1);
                break;
            }
        }
    }
    return nodes;
}
/**
 * @category Helpers
 * @see {@link http://dom.spec.whatwg.org/#dom-node-comparedocumentposition}
 */
var DocumentPosition;
(function (DocumentPosition) {
    DocumentPosition[DocumentPosition["DISCONNECTED"] = 1] = "DISCONNECTED";
    DocumentPosition[DocumentPosition["PRECEDING"] = 2] = "PRECEDING";
    DocumentPosition[DocumentPosition["FOLLOWING"] = 4] = "FOLLOWING";
    DocumentPosition[DocumentPosition["CONTAINS"] = 8] = "CONTAINS";
    DocumentPosition[DocumentPosition["CONTAINED_BY"] = 16] = "CONTAINED_BY";
})(DocumentPosition || (DocumentPosition = {}));
/**
 * Compare the position of one node against another node in any other document.
 * The return value is a bitmask with the values from {@link DocumentPosition}.
 *
 * Document order:
 * > There is an ordering, document order, defined on all the nodes in the
 * > document corresponding to the order in which the first character of the
 * > XML representation of each node occurs in the XML representation of the
 * > document after expansion of general entities. Thus, the document element
 * > node will be the first node. Element nodes occur before their children.
 * > Thus, document order orders element nodes in order of the occurrence of
 * > their start-tag in the XML (after expansion of entities). The attribute
 * > nodes of an element occur after the element and before its children. The
 * > relative order of attribute nodes is implementation-dependent.
 *
 * Source:
 * http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order
 *
 * @category Helpers
 * @param nodeA The first node to use in the comparison
 * @param nodeB The second node to use in the comparison
 * @returns A bitmask describing the input nodes' relative position.
 *
 * See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for
 * a description of these values.
 */
function compareDocumentPosition(nodeA, nodeB) {
    const aParents = [];
    const bParents = [];
    if (nodeA === nodeB) {
        return 0;
    }
    let current = (0,domhandler__WEBPACK_IMPORTED_MODULE_0__.hasChildren)(nodeA) ? nodeA : nodeA.parent;
    while (current) {
        aParents.unshift(current);
        current = current.parent;
    }
    current = (0,domhandler__WEBPACK_IMPORTED_MODULE_0__.hasChildren)(nodeB) ? nodeB : nodeB.parent;
    while (current) {
        bParents.unshift(current);
        current = current.parent;
    }
    const maxIdx = Math.min(aParents.length, bParents.length);
    let idx = 0;
    while (idx < maxIdx && aParents[idx] === bParents[idx]) {
        idx++;
    }
    if (idx === 0) {
        return DocumentPosition.DISCONNECTED;
    }
    const sharedParent = aParents[idx - 1];
    const siblings = sharedParent.children;
    const aSibling = aParents[idx];
    const bSibling = bParents[idx];
    if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
        if (sharedParent === nodeB) {
            return DocumentPosition.FOLLOWING | DocumentPosition.CONTAINED_BY;
        }
        return DocumentPosition.FOLLOWING;
    }
    if (sharedParent === nodeA) {
        return DocumentPosition.PRECEDING | DocumentPosition.CONTAINS;
    }
    return DocumentPosition.PRECEDING;
}
/**
 * Sort an array of nodes based on their relative position in the document and
 * remove any duplicate nodes. If the array contains nodes that do not belong to
 * the same document, sort order is unspecified.
 *
 * @category Helpers
 * @param nodes Array of DOM nodes.
 * @returns Collection of unique nodes, sorted in document order.
 */
function uniqueSort(nodes) {
    nodes = nodes.filter((node, i, arr) => !arr.includes(node, i + 1));
    nodes.sort((a, b) => {
        const relative = compareDocumentPosition(a, b);
        if (relative & DocumentPosition.PRECEDING) {
            return -1;
        }
        else if (relative & DocumentPosition.FOLLOWING) {
            return 1;
        }
        return 0;
    });
    return nodes;
}
//# sourceMappingURL=helpers.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/domutils/lib/esm/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/domutils/lib/esm/index.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DocumentPosition": function() { return /* reexport safe */ _helpers_js__WEBPACK_IMPORTED_MODULE_5__.DocumentPosition; },
/* harmony export */   "append": function() { return /* reexport safe */ _manipulation_js__WEBPACK_IMPORTED_MODULE_2__.append; },
/* harmony export */   "appendChild": function() { return /* reexport safe */ _manipulation_js__WEBPACK_IMPORTED_MODULE_2__.appendChild; },
/* harmony export */   "compareDocumentPosition": function() { return /* reexport safe */ _helpers_js__WEBPACK_IMPORTED_MODULE_5__.compareDocumentPosition; },
/* harmony export */   "existsOne": function() { return /* reexport safe */ _querying_js__WEBPACK_IMPORTED_MODULE_3__.existsOne; },
/* harmony export */   "filter": function() { return /* reexport safe */ _querying_js__WEBPACK_IMPORTED_MODULE_3__.filter; },
/* harmony export */   "find": function() { return /* reexport safe */ _querying_js__WEBPACK_IMPORTED_MODULE_3__.find; },
/* harmony export */   "findAll": function() { return /* reexport safe */ _querying_js__WEBPACK_IMPORTED_MODULE_3__.findAll; },
/* harmony export */   "findOne": function() { return /* reexport safe */ _querying_js__WEBPACK_IMPORTED_MODULE_3__.findOne; },
/* harmony export */   "findOneChild": function() { return /* reexport safe */ _querying_js__WEBPACK_IMPORTED_MODULE_3__.findOneChild; },
/* harmony export */   "getAttributeValue": function() { return /* reexport safe */ _traversal_js__WEBPACK_IMPORTED_MODULE_1__.getAttributeValue; },
/* harmony export */   "getChildren": function() { return /* reexport safe */ _traversal_js__WEBPACK_IMPORTED_MODULE_1__.getChildren; },
/* harmony export */   "getElementById": function() { return /* reexport safe */ _legacy_js__WEBPACK_IMPORTED_MODULE_4__.getElementById; },
/* harmony export */   "getElements": function() { return /* reexport safe */ _legacy_js__WEBPACK_IMPORTED_MODULE_4__.getElements; },
/* harmony export */   "getElementsByTagName": function() { return /* reexport safe */ _legacy_js__WEBPACK_IMPORTED_MODULE_4__.getElementsByTagName; },
/* harmony export */   "getElementsByTagType": function() { return /* reexport safe */ _legacy_js__WEBPACK_IMPORTED_MODULE_4__.getElementsByTagType; },
/* harmony export */   "getFeed": function() { return /* reexport safe */ _feeds_js__WEBPACK_IMPORTED_MODULE_6__.getFeed; },
/* harmony export */   "getInnerHTML": function() { return /* reexport safe */ _stringify_js__WEBPACK_IMPORTED_MODULE_0__.getInnerHTML; },
/* harmony export */   "getName": function() { return /* reexport safe */ _traversal_js__WEBPACK_IMPORTED_MODULE_1__.getName; },
/* harmony export */   "getOuterHTML": function() { return /* reexport safe */ _stringify_js__WEBPACK_IMPORTED_MODULE_0__.getOuterHTML; },
/* harmony export */   "getParent": function() { return /* reexport safe */ _traversal_js__WEBPACK_IMPORTED_MODULE_1__.getParent; },
/* harmony export */   "getSiblings": function() { return /* reexport safe */ _traversal_js__WEBPACK_IMPORTED_MODULE_1__.getSiblings; },
/* harmony export */   "getText": function() { return /* reexport safe */ _stringify_js__WEBPACK_IMPORTED_MODULE_0__.getText; },
/* harmony export */   "hasAttrib": function() { return /* reexport safe */ _traversal_js__WEBPACK_IMPORTED_MODULE_1__.hasAttrib; },
/* harmony export */   "hasChildren": function() { return /* reexport safe */ domhandler__WEBPACK_IMPORTED_MODULE_7__.hasChildren; },
/* harmony export */   "innerText": function() { return /* reexport safe */ _stringify_js__WEBPACK_IMPORTED_MODULE_0__.innerText; },
/* harmony export */   "isCDATA": function() { return /* reexport safe */ domhandler__WEBPACK_IMPORTED_MODULE_7__.isCDATA; },
/* harmony export */   "isComment": function() { return /* reexport safe */ domhandler__WEBPACK_IMPORTED_MODULE_7__.isComment; },
/* harmony export */   "isDocument": function() { return /* reexport safe */ domhandler__WEBPACK_IMPORTED_MODULE_7__.isDocument; },
/* harmony export */   "isTag": function() { return /* reexport safe */ domhandler__WEBPACK_IMPORTED_MODULE_7__.isTag; },
/* harmony export */   "isText": function() { return /* reexport safe */ domhandler__WEBPACK_IMPORTED_MODULE_7__.isText; },
/* harmony export */   "nextElementSibling": function() { return /* reexport safe */ _traversal_js__WEBPACK_IMPORTED_MODULE_1__.nextElementSibling; },
/* harmony export */   "prepend": function() { return /* reexport safe */ _manipulation_js__WEBPACK_IMPORTED_MODULE_2__.prepend; },
/* harmony export */   "prependChild": function() { return /* reexport safe */ _manipulation_js__WEBPACK_IMPORTED_MODULE_2__.prependChild; },
/* harmony export */   "prevElementSibling": function() { return /* reexport safe */ _traversal_js__WEBPACK_IMPORTED_MODULE_1__.prevElementSibling; },
/* harmony export */   "removeElement": function() { return /* reexport safe */ _manipulation_js__WEBPACK_IMPORTED_MODULE_2__.removeElement; },
/* harmony export */   "removeSubsets": function() { return /* reexport safe */ _helpers_js__WEBPACK_IMPORTED_MODULE_5__.removeSubsets; },
/* harmony export */   "replaceElement": function() { return /* reexport safe */ _manipulation_js__WEBPACK_IMPORTED_MODULE_2__.replaceElement; },
/* harmony export */   "testElement": function() { return /* reexport safe */ _legacy_js__WEBPACK_IMPORTED_MODULE_4__.testElement; },
/* harmony export */   "textContent": function() { return /* reexport safe */ _stringify_js__WEBPACK_IMPORTED_MODULE_0__.textContent; },
/* harmony export */   "uniqueSort": function() { return /* reexport safe */ _helpers_js__WEBPACK_IMPORTED_MODULE_5__.uniqueSort; }
/* harmony export */ });
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/linkedom/node_modules/domutils/lib/esm/stringify.js");
/* harmony import */ var _traversal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./traversal.js */ "./node_modules/linkedom/node_modules/domutils/lib/esm/traversal.js");
/* harmony import */ var _manipulation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./manipulation.js */ "./node_modules/linkedom/node_modules/domutils/lib/esm/manipulation.js");
/* harmony import */ var _querying_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./querying.js */ "./node_modules/linkedom/node_modules/domutils/lib/esm/querying.js");
/* harmony import */ var _legacy_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./legacy.js */ "./node_modules/linkedom/node_modules/domutils/lib/esm/legacy.js");
/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers.js */ "./node_modules/linkedom/node_modules/domutils/lib/esm/helpers.js");
/* harmony import */ var _feeds_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./feeds.js */ "./node_modules/linkedom/node_modules/domutils/lib/esm/feeds.js");
/* harmony import */ var domhandler__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! domhandler */ "./node_modules/linkedom/node_modules/domhandler/lib/esm/index.js");







/** @deprecated Use these methods from `domhandler` directly. */

//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/domutils/lib/esm/legacy.js":
/*!***********************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/domutils/lib/esm/legacy.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getElementById": function() { return /* binding */ getElementById; },
/* harmony export */   "getElements": function() { return /* binding */ getElements; },
/* harmony export */   "getElementsByTagName": function() { return /* binding */ getElementsByTagName; },
/* harmony export */   "getElementsByTagType": function() { return /* binding */ getElementsByTagType; },
/* harmony export */   "testElement": function() { return /* binding */ testElement; }
/* harmony export */ });
/* harmony import */ var domhandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! domhandler */ "./node_modules/linkedom/node_modules/domhandler/lib/esm/index.js");
/* harmony import */ var _querying_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./querying.js */ "./node_modules/linkedom/node_modules/domutils/lib/esm/querying.js");


const Checks = {
    tag_name(name) {
        if (typeof name === "function") {
            return (elem) => (0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isTag)(elem) && name(elem.name);
        }
        else if (name === "*") {
            return domhandler__WEBPACK_IMPORTED_MODULE_0__.isTag;
        }
        return (elem) => (0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isTag)(elem) && elem.name === name;
    },
    tag_type(type) {
        if (typeof type === "function") {
            return (elem) => type(elem.type);
        }
        return (elem) => elem.type === type;
    },
    tag_contains(data) {
        if (typeof data === "function") {
            return (elem) => (0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isText)(elem) && data(elem.data);
        }
        return (elem) => (0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isText)(elem) && elem.data === data;
    },
};
/**
 * @param attrib Attribute to check.
 * @param value Attribute value to look for.
 * @returns A function to check whether the a node has an attribute with a
 *   particular value.
 */
function getAttribCheck(attrib, value) {
    if (typeof value === "function") {
        return (elem) => (0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isTag)(elem) && value(elem.attribs[attrib]);
    }
    return (elem) => (0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isTag)(elem) && elem.attribs[attrib] === value;
}
/**
 * @param a First function to combine.
 * @param b Second function to combine.
 * @returns A function taking a node and returning `true` if either of the input
 *   functions returns `true` for the node.
 */
function combineFuncs(a, b) {
    return (elem) => a(elem) || b(elem);
}
/**
 * @param options An object describing nodes to look for.
 * @returns A function executing all checks in `options` and returning `true` if
 *   any of them match a node.
 */
function compileTest(options) {
    const funcs = Object.keys(options).map((key) => {
        const value = options[key];
        return Object.prototype.hasOwnProperty.call(Checks, key)
            ? Checks[key](value)
            : getAttribCheck(key, value);
    });
    return funcs.length === 0 ? null : funcs.reduce(combineFuncs);
}
/**
 * @category Legacy Query Functions
 * @param options An object describing nodes to look for.
 * @param node The element to test.
 * @returns Whether the element matches the description in `options`.
 */
function testElement(options, node) {
    const test = compileTest(options);
    return test ? test(node) : true;
}
/**
 * @category Legacy Query Functions
 * @param options An object describing nodes to look for.
 * @param nodes Nodes to search through.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes that match `options`.
 */
function getElements(options, nodes, recurse, limit = Infinity) {
    const test = compileTest(options);
    return test ? (0,_querying_js__WEBPACK_IMPORTED_MODULE_1__.filter)(test, nodes, recurse, limit) : [];
}
/**
 * @category Legacy Query Functions
 * @param id The unique ID attribute value to look for.
 * @param nodes Nodes to search through.
 * @param recurse Also consider child nodes.
 * @returns The node with the supplied ID.
 */
function getElementById(id, nodes, recurse = true) {
    if (!Array.isArray(nodes))
        nodes = [nodes];
    return (0,_querying_js__WEBPACK_IMPORTED_MODULE_1__.findOne)(getAttribCheck("id", id), nodes, recurse);
}
/**
 * @category Legacy Query Functions
 * @param tagName Tag name to search for.
 * @param nodes Nodes to search through.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes with the supplied `tagName`.
 */
function getElementsByTagName(tagName, nodes, recurse = true, limit = Infinity) {
    return (0,_querying_js__WEBPACK_IMPORTED_MODULE_1__.filter)(Checks["tag_name"](tagName), nodes, recurse, limit);
}
/**
 * @category Legacy Query Functions
 * @param type Element type to look for.
 * @param nodes Nodes to search through.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes with the supplied `type`.
 */
function getElementsByTagType(type, nodes, recurse = true, limit = Infinity) {
    return (0,_querying_js__WEBPACK_IMPORTED_MODULE_1__.filter)(Checks["tag_type"](type), nodes, recurse, limit);
}
//# sourceMappingURL=legacy.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/domutils/lib/esm/manipulation.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/domutils/lib/esm/manipulation.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "append": function() { return /* binding */ append; },
/* harmony export */   "appendChild": function() { return /* binding */ appendChild; },
/* harmony export */   "prepend": function() { return /* binding */ prepend; },
/* harmony export */   "prependChild": function() { return /* binding */ prependChild; },
/* harmony export */   "removeElement": function() { return /* binding */ removeElement; },
/* harmony export */   "replaceElement": function() { return /* binding */ replaceElement; }
/* harmony export */ });
/**
 * Remove an element from the dom
 *
 * @category Manipulation
 * @param elem The element to be removed
 */
function removeElement(elem) {
    if (elem.prev)
        elem.prev.next = elem.next;
    if (elem.next)
        elem.next.prev = elem.prev;
    if (elem.parent) {
        const childs = elem.parent.children;
        childs.splice(childs.lastIndexOf(elem), 1);
    }
}
/**
 * Replace an element in the dom
 *
 * @category Manipulation
 * @param elem The element to be replaced
 * @param replacement The element to be added
 */
function replaceElement(elem, replacement) {
    const prev = (replacement.prev = elem.prev);
    if (prev) {
        prev.next = replacement;
    }
    const next = (replacement.next = elem.next);
    if (next) {
        next.prev = replacement;
    }
    const parent = (replacement.parent = elem.parent);
    if (parent) {
        const childs = parent.children;
        childs[childs.lastIndexOf(elem)] = replacement;
        elem.parent = null;
    }
}
/**
 * Append a child to an element.
 *
 * @category Manipulation
 * @param elem The element to append to.
 * @param child The element to be added as a child.
 */
function appendChild(elem, child) {
    removeElement(child);
    child.next = null;
    child.parent = elem;
    if (elem.children.push(child) > 1) {
        const sibling = elem.children[elem.children.length - 2];
        sibling.next = child;
        child.prev = sibling;
    }
    else {
        child.prev = null;
    }
}
/**
 * Append an element after another.
 *
 * @category Manipulation
 * @param elem The element to append after.
 * @param next The element be added.
 */
function append(elem, next) {
    removeElement(next);
    const { parent } = elem;
    const currNext = elem.next;
    next.next = currNext;
    next.prev = elem;
    elem.next = next;
    next.parent = parent;
    if (currNext) {
        currNext.prev = next;
        if (parent) {
            const childs = parent.children;
            childs.splice(childs.lastIndexOf(currNext), 0, next);
        }
    }
    else if (parent) {
        parent.children.push(next);
    }
}
/**
 * Prepend a child to an element.
 *
 * @category Manipulation
 * @param elem The element to prepend before.
 * @param child The element to be added as a child.
 */
function prependChild(elem, child) {
    removeElement(child);
    child.parent = elem;
    child.prev = null;
    if (elem.children.unshift(child) !== 1) {
        const sibling = elem.children[1];
        sibling.prev = child;
        child.next = sibling;
    }
    else {
        child.next = null;
    }
}
/**
 * Prepend an element before another.
 *
 * @category Manipulation
 * @param elem The element to prepend before.
 * @param prev The element be added.
 */
function prepend(elem, prev) {
    removeElement(prev);
    const { parent } = elem;
    if (parent) {
        const childs = parent.children;
        childs.splice(childs.indexOf(elem), 0, prev);
    }
    if (elem.prev) {
        elem.prev.next = prev;
    }
    prev.parent = parent;
    prev.prev = elem.prev;
    prev.next = elem;
    elem.prev = prev;
}
//# sourceMappingURL=manipulation.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/domutils/lib/esm/querying.js":
/*!*************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/domutils/lib/esm/querying.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "existsOne": function() { return /* binding */ existsOne; },
/* harmony export */   "filter": function() { return /* binding */ filter; },
/* harmony export */   "find": function() { return /* binding */ find; },
/* harmony export */   "findAll": function() { return /* binding */ findAll; },
/* harmony export */   "findOne": function() { return /* binding */ findOne; },
/* harmony export */   "findOneChild": function() { return /* binding */ findOneChild; }
/* harmony export */ });
/* harmony import */ var domhandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! domhandler */ "./node_modules/linkedom/node_modules/domhandler/lib/esm/index.js");

/**
 * Search a node and its children for nodes passing a test function.
 *
 * @category Querying
 * @param test Function to test nodes on.
 * @param node Node to search. Will be included in the result set if it matches.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes passing `test`.
 */
function filter(test, node, recurse = true, limit = Infinity) {
    if (!Array.isArray(node))
        node = [node];
    return find(test, node, recurse, limit);
}
/**
 * Search an array of node and its children for nodes passing a test function.
 *
 * @category Querying
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes passing `test`.
 */
function find(test, nodes, recurse, limit) {
    const result = [];
    for (const elem of nodes) {
        if (test(elem)) {
            result.push(elem);
            if (--limit <= 0)
                break;
        }
        if (recurse && (0,domhandler__WEBPACK_IMPORTED_MODULE_0__.hasChildren)(elem) && elem.children.length > 0) {
            const children = find(test, elem.children, recurse, limit);
            result.push(...children);
            limit -= children.length;
            if (limit <= 0)
                break;
        }
    }
    return result;
}
/**
 * Finds the first element inside of an array that matches a test function.
 *
 * @category Querying
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @returns The first node in the array that passes `test`.
 * @deprecated Use `Array.prototype.find` directly.
 */
function findOneChild(test, nodes) {
    return nodes.find(test);
}
/**
 * Finds one element in a tree that passes a test.
 *
 * @category Querying
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @param recurse Also consider child nodes.
 * @returns The first child node that passes `test`.
 */
function findOne(test, nodes, recurse = true) {
    let elem = null;
    for (let i = 0; i < nodes.length && !elem; i++) {
        const checked = nodes[i];
        if (!(0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isTag)(checked)) {
            continue;
        }
        else if (test(checked)) {
            elem = checked;
        }
        else if (recurse && checked.children.length > 0) {
            elem = findOne(test, checked.children, true);
        }
    }
    return elem;
}
/**
 * @category Querying
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @returns Whether a tree of nodes contains at least one node passing the test.
 */
function existsOne(test, nodes) {
    return nodes.some((checked) => (0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isTag)(checked) &&
        (test(checked) ||
            (checked.children.length > 0 &&
                existsOne(test, checked.children))));
}
/**
 * Search and array of nodes and its children for elements passing a test function.
 *
 * Same as `find`, but limited to elements and with less options, leading to reduced complexity.
 *
 * @category Querying
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @returns All nodes passing `test`.
 */
function findAll(test, nodes) {
    var _a;
    const result = [];
    const stack = nodes.filter(domhandler__WEBPACK_IMPORTED_MODULE_0__.isTag);
    let elem;
    while ((elem = stack.shift())) {
        const children = (_a = elem.children) === null || _a === void 0 ? void 0 : _a.filter(domhandler__WEBPACK_IMPORTED_MODULE_0__.isTag);
        if (children && children.length > 0) {
            stack.unshift(...children);
        }
        if (test(elem))
            result.push(elem);
    }
    return result;
}
//# sourceMappingURL=querying.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/domutils/lib/esm/stringify.js":
/*!**************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/domutils/lib/esm/stringify.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getInnerHTML": function() { return /* binding */ getInnerHTML; },
/* harmony export */   "getOuterHTML": function() { return /* binding */ getOuterHTML; },
/* harmony export */   "getText": function() { return /* binding */ getText; },
/* harmony export */   "innerText": function() { return /* binding */ innerText; },
/* harmony export */   "textContent": function() { return /* binding */ textContent; }
/* harmony export */ });
/* harmony import */ var domhandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! domhandler */ "./node_modules/linkedom/node_modules/domhandler/lib/esm/index.js");
/* harmony import */ var dom_serializer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dom-serializer */ "./node_modules/linkedom/node_modules/dom-serializer/lib/esm/index.js");
/* harmony import */ var domelementtype__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! domelementtype */ "./node_modules/linkedom/node_modules/domelementtype/lib/esm/index.js");



/**
 * @category Stringify
 * @deprecated Use the `dom-serializer` module directly.
 * @param node Node to get the outer HTML of.
 * @param options Options for serialization.
 * @returns `node`'s outer HTML.
 */
function getOuterHTML(node, options) {
    return (0,dom_serializer__WEBPACK_IMPORTED_MODULE_1__["default"])(node, options);
}
/**
 * @category Stringify
 * @deprecated Use the `dom-serializer` module directly.
 * @param node Node to get the inner HTML of.
 * @param options Options for serialization.
 * @returns `node`'s inner HTML.
 */
function getInnerHTML(node, options) {
    return (0,domhandler__WEBPACK_IMPORTED_MODULE_0__.hasChildren)(node)
        ? node.children.map((node) => getOuterHTML(node, options)).join("")
        : "";
}
/**
 * Get a node's inner text. Same as `textContent`, but inserts newlines for `<br>` tags.
 *
 * @category Stringify
 * @deprecated Use `textContent` instead.
 * @param node Node to get the inner text of.
 * @returns `node`'s inner text.
 */
function getText(node) {
    if (Array.isArray(node))
        return node.map(getText).join("");
    if ((0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isTag)(node))
        return node.name === "br" ? "\n" : getText(node.children);
    if ((0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isCDATA)(node))
        return getText(node.children);
    if ((0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isText)(node))
        return node.data;
    return "";
}
/**
 * Get a node's text content.
 *
 * @category Stringify
 * @param node Node to get the text content of.
 * @returns `node`'s text content.
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent}
 */
function textContent(node) {
    if (Array.isArray(node))
        return node.map(textContent).join("");
    if ((0,domhandler__WEBPACK_IMPORTED_MODULE_0__.hasChildren)(node) && !(0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isComment)(node)) {
        return textContent(node.children);
    }
    if ((0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isText)(node))
        return node.data;
    return "";
}
/**
 * Get a node's inner text.
 *
 * @category Stringify
 * @param node Node to get the inner text of.
 * @returns `node`'s inner text.
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/innerText}
 */
function innerText(node) {
    if (Array.isArray(node))
        return node.map(innerText).join("");
    if ((0,domhandler__WEBPACK_IMPORTED_MODULE_0__.hasChildren)(node) && (node.type === domelementtype__WEBPACK_IMPORTED_MODULE_2__.ElementType.Tag || (0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isCDATA)(node))) {
        return innerText(node.children);
    }
    if ((0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isText)(node))
        return node.data;
    return "";
}
//# sourceMappingURL=stringify.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/domutils/lib/esm/traversal.js":
/*!**************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/domutils/lib/esm/traversal.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAttributeValue": function() { return /* binding */ getAttributeValue; },
/* harmony export */   "getChildren": function() { return /* binding */ getChildren; },
/* harmony export */   "getName": function() { return /* binding */ getName; },
/* harmony export */   "getParent": function() { return /* binding */ getParent; },
/* harmony export */   "getSiblings": function() { return /* binding */ getSiblings; },
/* harmony export */   "hasAttrib": function() { return /* binding */ hasAttrib; },
/* harmony export */   "nextElementSibling": function() { return /* binding */ nextElementSibling; },
/* harmony export */   "prevElementSibling": function() { return /* binding */ prevElementSibling; }
/* harmony export */ });
/* harmony import */ var domhandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! domhandler */ "./node_modules/linkedom/node_modules/domhandler/lib/esm/index.js");

/**
 * Get a node's children.
 *
 * @category Traversal
 * @param elem Node to get the children of.
 * @returns `elem`'s children, or an empty array.
 */
function getChildren(elem) {
    return (0,domhandler__WEBPACK_IMPORTED_MODULE_0__.hasChildren)(elem) ? elem.children : [];
}
/**
 * Get a node's parent.
 *
 * @category Traversal
 * @param elem Node to get the parent of.
 * @returns `elem`'s parent node.
 */
function getParent(elem) {
    return elem.parent || null;
}
/**
 * Gets an elements siblings, including the element itself.
 *
 * Attempts to get the children through the element's parent first. If we don't
 * have a parent (the element is a root node), we walk the element's `prev` &
 * `next` to get all remaining nodes.
 *
 * @category Traversal
 * @param elem Element to get the siblings of.
 * @returns `elem`'s siblings.
 */
function getSiblings(elem) {
    const parent = getParent(elem);
    if (parent != null)
        return getChildren(parent);
    const siblings = [elem];
    let { prev, next } = elem;
    while (prev != null) {
        siblings.unshift(prev);
        ({ prev } = prev);
    }
    while (next != null) {
        siblings.push(next);
        ({ next } = next);
    }
    return siblings;
}
/**
 * Gets an attribute from an element.
 *
 * @category Traversal
 * @param elem Element to check.
 * @param name Attribute name to retrieve.
 * @returns The element's attribute value, or `undefined`.
 */
function getAttributeValue(elem, name) {
    var _a;
    return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];
}
/**
 * Checks whether an element has an attribute.
 *
 * @category Traversal
 * @param elem Element to check.
 * @param name Attribute name to look for.
 * @returns Returns whether `elem` has the attribute `name`.
 */
function hasAttrib(elem, name) {
    return (elem.attribs != null &&
        Object.prototype.hasOwnProperty.call(elem.attribs, name) &&
        elem.attribs[name] != null);
}
/**
 * Get the tag name of an element.
 *
 * @category Traversal
 * @param elem The element to get the name for.
 * @returns The tag name of `elem`.
 */
function getName(elem) {
    return elem.name;
}
/**
 * Returns the next element sibling of a node.
 *
 * @category Traversal
 * @param elem The element to get the next sibling of.
 * @returns `elem`'s next sibling that is a tag.
 */
function nextElementSibling(elem) {
    let { next } = elem;
    while (next !== null && !(0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isTag)(next))
        ({ next } = next);
    return next;
}
/**
 * Returns the previous element sibling of a node.
 *
 * @category Traversal
 * @param elem The element to get the previous sibling of.
 * @returns `elem`'s previous sibling that is a tag.
 */
function prevElementSibling(elem) {
    let { prev } = elem;
    while (prev !== null && !(0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isTag)(prev))
        ({ prev } = prev);
    return prev;
}
//# sourceMappingURL=traversal.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/entities/lib/esm/decode.js":
/*!***********************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/entities/lib/esm/decode.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BinTrieFlags": function() { return /* binding */ BinTrieFlags; },
/* harmony export */   "decodeCodePoint": function() { return /* reexport safe */ _decode_codepoint_js__WEBPACK_IMPORTED_MODULE_2__["default"]; },
/* harmony export */   "decodeHTML": function() { return /* binding */ decodeHTML; },
/* harmony export */   "decodeHTMLStrict": function() { return /* binding */ decodeHTMLStrict; },
/* harmony export */   "decodeXML": function() { return /* binding */ decodeXML; },
/* harmony export */   "determineBranch": function() { return /* binding */ determineBranch; },
/* harmony export */   "fromCodePoint": function() { return /* reexport safe */ _decode_codepoint_js__WEBPACK_IMPORTED_MODULE_2__.fromCodePoint; },
/* harmony export */   "htmlDecodeTree": function() { return /* reexport safe */ _generated_decode_data_html_js__WEBPACK_IMPORTED_MODULE_0__["default"]; },
/* harmony export */   "replaceCodePoint": function() { return /* reexport safe */ _decode_codepoint_js__WEBPACK_IMPORTED_MODULE_2__.replaceCodePoint; },
/* harmony export */   "xmlDecodeTree": function() { return /* reexport safe */ _generated_decode_data_xml_js__WEBPACK_IMPORTED_MODULE_1__["default"]; }
/* harmony export */ });
/* harmony import */ var _generated_decode_data_html_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generated/decode-data-html.js */ "./node_modules/linkedom/node_modules/entities/lib/esm/generated/decode-data-html.js");
/* harmony import */ var _generated_decode_data_xml_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./generated/decode-data-xml.js */ "./node_modules/linkedom/node_modules/entities/lib/esm/generated/decode-data-xml.js");
/* harmony import */ var _decode_codepoint_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./decode_codepoint.js */ "./node_modules/linkedom/node_modules/entities/lib/esm/decode_codepoint.js");



// Re-export for use by eg. htmlparser2


var CharCodes;
(function (CharCodes) {
    CharCodes[CharCodes["NUM"] = 35] = "NUM";
    CharCodes[CharCodes["SEMI"] = 59] = "SEMI";
    CharCodes[CharCodes["ZERO"] = 48] = "ZERO";
    CharCodes[CharCodes["NINE"] = 57] = "NINE";
    CharCodes[CharCodes["LOWER_A"] = 97] = "LOWER_A";
    CharCodes[CharCodes["LOWER_F"] = 102] = "LOWER_F";
    CharCodes[CharCodes["LOWER_X"] = 120] = "LOWER_X";
    /** Bit that needs to be set to convert an upper case ASCII character to lower case */
    CharCodes[CharCodes["To_LOWER_BIT"] = 32] = "To_LOWER_BIT";
})(CharCodes || (CharCodes = {}));
var BinTrieFlags;
(function (BinTrieFlags) {
    BinTrieFlags[BinTrieFlags["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
    BinTrieFlags[BinTrieFlags["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
    BinTrieFlags[BinTrieFlags["JUMP_TABLE"] = 127] = "JUMP_TABLE";
})(BinTrieFlags || (BinTrieFlags = {}));
function getDecoder(decodeTree) {
    return function decodeHTMLBinary(str, strict) {
        let ret = "";
        let lastIdx = 0;
        let strIdx = 0;
        while ((strIdx = str.indexOf("&", strIdx)) >= 0) {
            ret += str.slice(lastIdx, strIdx);
            lastIdx = strIdx;
            // Skip the "&"
            strIdx += 1;
            // If we have a numeric entity, handle this separately.
            if (str.charCodeAt(strIdx) === CharCodes.NUM) {
                // Skip the leading "&#". For hex entities, also skip the leading "x".
                let start = strIdx + 1;
                let base = 10;
                let cp = str.charCodeAt(start);
                if ((cp | CharCodes.To_LOWER_BIT) === CharCodes.LOWER_X) {
                    base = 16;
                    strIdx += 1;
                    start += 1;
                }
                do
                    cp = str.charCodeAt(++strIdx);
                while ((cp >= CharCodes.ZERO && cp <= CharCodes.NINE) ||
                    (base === 16 &&
                        (cp | CharCodes.To_LOWER_BIT) >= CharCodes.LOWER_A &&
                        (cp | CharCodes.To_LOWER_BIT) <= CharCodes.LOWER_F));
                if (start !== strIdx) {
                    const entity = str.substring(start, strIdx);
                    const parsed = parseInt(entity, base);
                    if (str.charCodeAt(strIdx) === CharCodes.SEMI) {
                        strIdx += 1;
                    }
                    else if (strict) {
                        continue;
                    }
                    ret += (0,_decode_codepoint_js__WEBPACK_IMPORTED_MODULE_2__["default"])(parsed);
                    lastIdx = strIdx;
                }
                continue;
            }
            let resultIdx = 0;
            let excess = 1;
            let treeIdx = 0;
            let current = decodeTree[treeIdx];
            for (; strIdx < str.length; strIdx++, excess++) {
                treeIdx = determineBranch(decodeTree, current, treeIdx + 1, str.charCodeAt(strIdx));
                if (treeIdx < 0)
                    break;
                current = decodeTree[treeIdx];
                const masked = current & BinTrieFlags.VALUE_LENGTH;
                // If the branch is a value, store it and continue
                if (masked) {
                    // If we have a legacy entity while parsing strictly, just skip the number of bytes
                    if (!strict || str.charCodeAt(strIdx) === CharCodes.SEMI) {
                        resultIdx = treeIdx;
                        excess = 0;
                    }
                    // The mask is the number of bytes of the value, including the current byte.
                    const valueLength = (masked >> 14) - 1;
                    if (valueLength === 0)
                        break;
                    treeIdx += valueLength;
                }
            }
            if (resultIdx !== 0) {
                const valueLength = (decodeTree[resultIdx] & BinTrieFlags.VALUE_LENGTH) >> 14;
                ret +=
                    valueLength === 1
                        ? String.fromCharCode(decodeTree[resultIdx] & ~BinTrieFlags.VALUE_LENGTH)
                        : valueLength === 2
                            ? String.fromCharCode(decodeTree[resultIdx + 1])
                            : String.fromCharCode(decodeTree[resultIdx + 1], decodeTree[resultIdx + 2]);
                lastIdx = strIdx - excess + 1;
            }
        }
        return ret + str.slice(lastIdx);
    };
}
function determineBranch(decodeTree, current, nodeIdx, char) {
    const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;
    const jumpOffset = current & BinTrieFlags.JUMP_TABLE;
    // Case 1: Single branch encoded in jump offset
    if (branchCount === 0) {
        return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;
    }
    // Case 2: Multiple branches encoded in jump table
    if (jumpOffset) {
        const value = char - jumpOffset;
        return value < 0 || value >= branchCount
            ? -1
            : decodeTree[nodeIdx + value] - 1;
    }
    // Case 3: Multiple branches encoded in dictionary
    // Binary search for the character.
    let lo = nodeIdx;
    let hi = lo + branchCount - 1;
    while (lo <= hi) {
        const mid = (lo + hi) >>> 1;
        const midVal = decodeTree[mid];
        if (midVal < char) {
            lo = mid + 1;
        }
        else if (midVal > char) {
            hi = mid - 1;
        }
        else {
            return decodeTree[mid + branchCount];
        }
    }
    return -1;
}
const htmlDecoder = getDecoder(_generated_decode_data_html_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
const xmlDecoder = getDecoder(_generated_decode_data_xml_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
/**
 * Decodes an HTML string, allowing for entities not terminated by a semi-colon.
 *
 * @param str The string to decode.
 * @returns The decoded string.
 */
function decodeHTML(str) {
    return htmlDecoder(str, false);
}
/**
 * Decodes an HTML string, requiring all entities to be terminated by a semi-colon.
 *
 * @param str The string to decode.
 * @returns The decoded string.
 */
function decodeHTMLStrict(str) {
    return htmlDecoder(str, true);
}
/**
 * Decodes an XML string, requiring all entities to be terminated by a semi-colon.
 *
 * @param str The string to decode.
 * @returns The decoded string.
 */
function decodeXML(str) {
    return xmlDecoder(str, true);
}
//# sourceMappingURL=decode.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/entities/lib/esm/decode_codepoint.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/entities/lib/esm/decode_codepoint.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ decodeCodePoint; },
/* harmony export */   "fromCodePoint": function() { return /* binding */ fromCodePoint; },
/* harmony export */   "replaceCodePoint": function() { return /* binding */ replaceCodePoint; }
/* harmony export */ });
// Adapted from https://github.com/mathiasbynens/he/blob/36afe179392226cf1b6ccdb16ebbb7a5a844d93a/src/he.js#L106-L134
var _a;
const decodeMap = new Map([
    [0, 65533],
    [128, 8364],
    [130, 8218],
    [131, 402],
    [132, 8222],
    [133, 8230],
    [134, 8224],
    [135, 8225],
    [136, 710],
    [137, 8240],
    [138, 352],
    [139, 8249],
    [140, 338],
    [142, 381],
    [145, 8216],
    [146, 8217],
    [147, 8220],
    [148, 8221],
    [149, 8226],
    [150, 8211],
    [151, 8212],
    [152, 732],
    [153, 8482],
    [154, 353],
    [155, 8250],
    [156, 339],
    [158, 382],
    [159, 376],
]);
const fromCodePoint = 
// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins
(_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function (codePoint) {
    let output = "";
    if (codePoint > 0xffff) {
        codePoint -= 0x10000;
        output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);
        codePoint = 0xdc00 | (codePoint & 0x3ff);
    }
    output += String.fromCharCode(codePoint);
    return output;
};
function replaceCodePoint(codePoint) {
    var _a;
    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {
        return 0xfffd;
    }
    return (_a = decodeMap.get(codePoint)) !== null && _a !== void 0 ? _a : codePoint;
}
function decodeCodePoint(codePoint) {
    return fromCodePoint(replaceCodePoint(codePoint));
}
//# sourceMappingURL=decode_codepoint.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/entities/lib/esm/encode.js":
/*!***********************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/entities/lib/esm/encode.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "encodeHTML": function() { return /* binding */ encodeHTML; },
/* harmony export */   "encodeNonAsciiHTML": function() { return /* binding */ encodeNonAsciiHTML; }
/* harmony export */ });
/* harmony import */ var _generated_encode_html_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generated/encode-html.js */ "./node_modules/linkedom/node_modules/entities/lib/esm/generated/encode-html.js");
/* harmony import */ var _escape_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./escape.js */ "./node_modules/linkedom/node_modules/entities/lib/esm/escape.js");


const htmlReplacer = /[\t\n!-,./:-@[-`\f{-}$\x80-\uFFFF]/g;
/**
 * Encodes all characters in the input using HTML entities. This includes
 * characters that are valid ASCII characters in HTML documents, such as `#`.
 *
 * To get a more compact output, consider using the `encodeNonAsciiHTML`
 * function, which will only encode characters that are not valid in HTML
 * documents, as well as non-ASCII characters.
 *
 * If a character has no equivalent entity, a numeric hexadecimal reference
 * (eg. `&#xfc;`) will be used.
 */
function encodeHTML(data) {
    return encodeHTMLTrieRe(htmlReplacer, data);
}
/**
 * Encodes all non-ASCII characters, as well as characters not valid in HTML
 * documents using HTML entities. This function will not encode characters that
 * are valid in HTML documents, such as `#`.
 *
 * If a character has no equivalent entity, a numeric hexadecimal reference
 * (eg. `&#xfc;`) will be used.
 */
function encodeNonAsciiHTML(data) {
    return encodeHTMLTrieRe(_escape_js__WEBPACK_IMPORTED_MODULE_1__.xmlReplacer, data);
}
function encodeHTMLTrieRe(regExp, str) {
    let ret = "";
    let lastIdx = 0;
    let match;
    while ((match = regExp.exec(str)) !== null) {
        const i = match.index;
        ret += str.substring(lastIdx, i);
        const char = str.charCodeAt(i);
        let next = _generated_encode_html_js__WEBPACK_IMPORTED_MODULE_0__["default"].get(char);
        if (typeof next === "object") {
            // We are in a branch. Try to match the next char.
            if (i + 1 < str.length) {
                const nextChar = str.charCodeAt(i + 1);
                const value = typeof next.n === "number"
                    ? next.n === nextChar
                        ? next.o
                        : undefined
                    : next.n.get(nextChar);
                if (value !== undefined) {
                    ret += value;
                    lastIdx = regExp.lastIndex += 1;
                    continue;
                }
            }
            next = next.v;
        }
        // We might have a tree node without a value; skip and use a numeric entitiy.
        if (next !== undefined) {
            ret += next;
            lastIdx = i + 1;
        }
        else {
            const cp = (0,_escape_js__WEBPACK_IMPORTED_MODULE_1__.getCodePoint)(str, i);
            ret += `&#x${cp.toString(16)};`;
            // Increase by 1 if we have a surrogate pair
            lastIdx = regExp.lastIndex += Number(cp !== char);
        }
    }
    return ret + str.substr(lastIdx);
}
//# sourceMappingURL=encode.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/entities/lib/esm/escape.js":
/*!***********************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/entities/lib/esm/escape.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "encodeXML": function() { return /* binding */ encodeXML; },
/* harmony export */   "escape": function() { return /* binding */ escape; },
/* harmony export */   "escapeAttribute": function() { return /* binding */ escapeAttribute; },
/* harmony export */   "escapeText": function() { return /* binding */ escapeText; },
/* harmony export */   "escapeUTF8": function() { return /* binding */ escapeUTF8; },
/* harmony export */   "getCodePoint": function() { return /* binding */ getCodePoint; },
/* harmony export */   "xmlReplacer": function() { return /* binding */ xmlReplacer; }
/* harmony export */ });
const xmlReplacer = /["&'<>$\x80-\uFFFF]/g;
const xmlCodeMap = new Map([
    [34, "&quot;"],
    [38, "&amp;"],
    [39, "&apos;"],
    [60, "&lt;"],
    [62, "&gt;"],
]);
// For compatibility with node < 4, we wrap `codePointAt`
const getCodePoint = 
// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
String.prototype.codePointAt != null
    ? (str, index) => str.codePointAt(index)
    : // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        (c, index) => (c.charCodeAt(index) & 0xfc00) === 0xd800
            ? (c.charCodeAt(index) - 0xd800) * 0x400 +
                c.charCodeAt(index + 1) -
                0xdc00 +
                0x10000
            : c.charCodeAt(index);
/**
 * Encodes all non-ASCII characters, as well as characters not valid in XML
 * documents using XML entities.
 *
 * If a character has no equivalent entity, a
 * numeric hexadecimal reference (eg. `&#xfc;`) will be used.
 */
function encodeXML(str) {
    let ret = "";
    let lastIdx = 0;
    let match;
    while ((match = xmlReplacer.exec(str)) !== null) {
        const i = match.index;
        const char = str.charCodeAt(i);
        const next = xmlCodeMap.get(char);
        if (next !== undefined) {
            ret += str.substring(lastIdx, i) + next;
            lastIdx = i + 1;
        }
        else {
            ret += `${str.substring(lastIdx, i)}&#x${getCodePoint(str, i).toString(16)};`;
            // Increase by 1 if we have a surrogate pair
            lastIdx = xmlReplacer.lastIndex += Number((char & 0xfc00) === 0xd800);
        }
    }
    return ret + str.substr(lastIdx);
}
/**
 * Encodes all non-ASCII characters, as well as characters not valid in XML
 * documents using numeric hexadecimal reference (eg. `&#xfc;`).
 *
 * Have a look at `escapeUTF8` if you want a more concise output at the expense
 * of reduced transportability.
 *
 * @param data String to escape.
 */
const escape = encodeXML;
function getEscaper(regex, map) {
    return function escape(data) {
        let match;
        let lastIdx = 0;
        let result = "";
        while ((match = regex.exec(data))) {
            if (lastIdx !== match.index) {
                result += data.substring(lastIdx, match.index);
            }
            // We know that this chararcter will be in the map.
            result += map.get(match[0].charCodeAt(0));
            // Every match will be of length 1
            lastIdx = match.index + 1;
        }
        return result + data.substring(lastIdx);
    };
}
/**
 * Encodes all characters not valid in XML documents using XML entities.
 *
 * Note that the output will be character-set dependent.
 *
 * @param data String to escape.
 */
const escapeUTF8 = getEscaper(/[&<>'"]/g, xmlCodeMap);
/**
 * Encodes all characters that have to be escaped in HTML attributes,
 * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.
 *
 * @param data String to escape.
 */
const escapeAttribute = getEscaper(/["&\u00A0]/g, new Map([
    [34, "&quot;"],
    [38, "&amp;"],
    [160, "&nbsp;"],
]));
/**
 * Encodes all characters that have to be escaped in HTML text,
 * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.
 *
 * @param data String to escape.
 */
const escapeText = getEscaper(/[&<>\u00A0]/g, new Map([
    [38, "&amp;"],
    [60, "&lt;"],
    [62, "&gt;"],
    [160, "&nbsp;"],
]));
//# sourceMappingURL=escape.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/entities/lib/esm/generated/decode-data-html.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/entities/lib/esm/generated/decode-data-html.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// Generated using scripts/write-decode-map.ts
/* harmony default export */ __webpack_exports__["default"] = (new Uint16Array(
// prettier-ignore
"\u1d41<\xd5\u0131\u028a\u049d\u057b\u05d0\u0675\u06de\u07a2\u07d6\u080f\u0a4a\u0a91\u0da1\u0e6d\u0f09\u0f26\u10ca\u1228\u12e1\u1415\u149d\u14c3\u14df\u1525\0\0\0\0\0\0\u156b\u16cd\u198d\u1c12\u1ddd\u1f7e\u2060\u21b0\u228d\u23c0\u23fb\u2442\u2824\u2912\u2d08\u2e48\u2fce\u3016\u32ba\u3639\u37ac\u38fe\u3a28\u3a71\u3ae0\u3b2e\u0800EMabcfglmnoprstu\\bfms\x7f\x84\x8b\x90\x95\x98\xa6\xb3\xb9\xc8\xcflig\u803b\xc6\u40c6P\u803b&\u4026cute\u803b\xc1\u40c1reve;\u4102\u0100iyx}rc\u803b\xc2\u40c2;\u4410r;\uc000\ud835\udd04rave\u803b\xc0\u40c0pha;\u4391acr;\u4100d;\u6a53\u0100gp\x9d\xa1on;\u4104f;\uc000\ud835\udd38plyFunction;\u6061ing\u803b\xc5\u40c5\u0100cs\xbe\xc3r;\uc000\ud835\udc9cign;\u6254ilde\u803b\xc3\u40c3ml\u803b\xc4\u40c4\u0400aceforsu\xe5\xfb\xfe\u0117\u011c\u0122\u0127\u012a\u0100cr\xea\xf2kslash;\u6216\u0176\xf6\xf8;\u6ae7ed;\u6306y;\u4411\u0180crt\u0105\u010b\u0114ause;\u6235noullis;\u612ca;\u4392r;\uc000\ud835\udd05pf;\uc000\ud835\udd39eve;\u42d8c\xf2\u0113mpeq;\u624e\u0700HOacdefhilorsu\u014d\u0151\u0156\u0180\u019e\u01a2\u01b5\u01b7\u01ba\u01dc\u0215\u0273\u0278\u027ecy;\u4427PY\u803b\xa9\u40a9\u0180cpy\u015d\u0162\u017aute;\u4106\u0100;i\u0167\u0168\u62d2talDifferentialD;\u6145leys;\u612d\u0200aeio\u0189\u018e\u0194\u0198ron;\u410cdil\u803b\xc7\u40c7rc;\u4108nint;\u6230ot;\u410a\u0100dn\u01a7\u01adilla;\u40b8terDot;\u40b7\xf2\u017fi;\u43a7rcle\u0200DMPT\u01c7\u01cb\u01d1\u01d6ot;\u6299inus;\u6296lus;\u6295imes;\u6297o\u0100cs\u01e2\u01f8kwiseContourIntegral;\u6232eCurly\u0100DQ\u0203\u020foubleQuote;\u601duote;\u6019\u0200lnpu\u021e\u0228\u0247\u0255on\u0100;e\u0225\u0226\u6237;\u6a74\u0180git\u022f\u0236\u023aruent;\u6261nt;\u622fourIntegral;\u622e\u0100fr\u024c\u024e;\u6102oduct;\u6210nterClockwiseContourIntegral;\u6233oss;\u6a2fcr;\uc000\ud835\udc9ep\u0100;C\u0284\u0285\u62d3ap;\u624d\u0580DJSZacefios\u02a0\u02ac\u02b0\u02b4\u02b8\u02cb\u02d7\u02e1\u02e6\u0333\u048d\u0100;o\u0179\u02a5trahd;\u6911cy;\u4402cy;\u4405cy;\u440f\u0180grs\u02bf\u02c4\u02c7ger;\u6021r;\u61a1hv;\u6ae4\u0100ay\u02d0\u02d5ron;\u410e;\u4414l\u0100;t\u02dd\u02de\u6207a;\u4394r;\uc000\ud835\udd07\u0100af\u02eb\u0327\u0100cm\u02f0\u0322ritical\u0200ADGT\u0300\u0306\u0316\u031ccute;\u40b4o\u0174\u030b\u030d;\u42d9bleAcute;\u42ddrave;\u4060ilde;\u42dcond;\u62c4ferentialD;\u6146\u0470\u033d\0\0\0\u0342\u0354\0\u0405f;\uc000\ud835\udd3b\u0180;DE\u0348\u0349\u034d\u40a8ot;\u60dcqual;\u6250ble\u0300CDLRUV\u0363\u0372\u0382\u03cf\u03e2\u03f8ontourIntegra\xec\u0239o\u0274\u0379\0\0\u037b\xbb\u0349nArrow;\u61d3\u0100eo\u0387\u03a4ft\u0180ART\u0390\u0396\u03a1rrow;\u61d0ightArrow;\u61d4e\xe5\u02cang\u0100LR\u03ab\u03c4eft\u0100AR\u03b3\u03b9rrow;\u67f8ightArrow;\u67faightArrow;\u67f9ight\u0100AT\u03d8\u03derrow;\u61d2ee;\u62a8p\u0241\u03e9\0\0\u03efrrow;\u61d1ownArrow;\u61d5erticalBar;\u6225n\u0300ABLRTa\u0412\u042a\u0430\u045e\u047f\u037crrow\u0180;BU\u041d\u041e\u0422\u6193ar;\u6913pArrow;\u61f5reve;\u4311eft\u02d2\u043a\0\u0446\0\u0450ightVector;\u6950eeVector;\u695eector\u0100;B\u0459\u045a\u61bdar;\u6956ight\u01d4\u0467\0\u0471eeVector;\u695fector\u0100;B\u047a\u047b\u61c1ar;\u6957ee\u0100;A\u0486\u0487\u62a4rrow;\u61a7\u0100ct\u0492\u0497r;\uc000\ud835\udc9frok;\u4110\u0800NTacdfglmopqstux\u04bd\u04c0\u04c4\u04cb\u04de\u04e2\u04e7\u04ee\u04f5\u0521\u052f\u0536\u0552\u055d\u0560\u0565G;\u414aH\u803b\xd0\u40d0cute\u803b\xc9\u40c9\u0180aiy\u04d2\u04d7\u04dcron;\u411arc\u803b\xca\u40ca;\u442dot;\u4116r;\uc000\ud835\udd08rave\u803b\xc8\u40c8ement;\u6208\u0100ap\u04fa\u04fecr;\u4112ty\u0253\u0506\0\0\u0512mallSquare;\u65fberySmallSquare;\u65ab\u0100gp\u0526\u052aon;\u4118f;\uc000\ud835\udd3csilon;\u4395u\u0100ai\u053c\u0549l\u0100;T\u0542\u0543\u6a75ilde;\u6242librium;\u61cc\u0100ci\u0557\u055ar;\u6130m;\u6a73a;\u4397ml\u803b\xcb\u40cb\u0100ip\u056a\u056fsts;\u6203onentialE;\u6147\u0280cfios\u0585\u0588\u058d\u05b2\u05ccy;\u4424r;\uc000\ud835\udd09lled\u0253\u0597\0\0\u05a3mallSquare;\u65fcerySmallSquare;\u65aa\u0370\u05ba\0\u05bf\0\0\u05c4f;\uc000\ud835\udd3dAll;\u6200riertrf;\u6131c\xf2\u05cb\u0600JTabcdfgorst\u05e8\u05ec\u05ef\u05fa\u0600\u0612\u0616\u061b\u061d\u0623\u066c\u0672cy;\u4403\u803b>\u403emma\u0100;d\u05f7\u05f8\u4393;\u43dcreve;\u411e\u0180eiy\u0607\u060c\u0610dil;\u4122rc;\u411c;\u4413ot;\u4120r;\uc000\ud835\udd0a;\u62d9pf;\uc000\ud835\udd3eeater\u0300EFGLST\u0635\u0644\u064e\u0656\u065b\u0666qual\u0100;L\u063e\u063f\u6265ess;\u62dbullEqual;\u6267reater;\u6aa2ess;\u6277lantEqual;\u6a7eilde;\u6273cr;\uc000\ud835\udca2;\u626b\u0400Aacfiosu\u0685\u068b\u0696\u069b\u069e\u06aa\u06be\u06caRDcy;\u442a\u0100ct\u0690\u0694ek;\u42c7;\u405eirc;\u4124r;\u610clbertSpace;\u610b\u01f0\u06af\0\u06b2f;\u610dizontalLine;\u6500\u0100ct\u06c3\u06c5\xf2\u06a9rok;\u4126mp\u0144\u06d0\u06d8ownHum\xf0\u012fqual;\u624f\u0700EJOacdfgmnostu\u06fa\u06fe\u0703\u0707\u070e\u071a\u071e\u0721\u0728\u0744\u0778\u078b\u078f\u0795cy;\u4415lig;\u4132cy;\u4401cute\u803b\xcd\u40cd\u0100iy\u0713\u0718rc\u803b\xce\u40ce;\u4418ot;\u4130r;\u6111rave\u803b\xcc\u40cc\u0180;ap\u0720\u072f\u073f\u0100cg\u0734\u0737r;\u412ainaryI;\u6148lie\xf3\u03dd\u01f4\u0749\0\u0762\u0100;e\u074d\u074e\u622c\u0100gr\u0753\u0758ral;\u622bsection;\u62c2isible\u0100CT\u076c\u0772omma;\u6063imes;\u6062\u0180gpt\u077f\u0783\u0788on;\u412ef;\uc000\ud835\udd40a;\u4399cr;\u6110ilde;\u4128\u01eb\u079a\0\u079ecy;\u4406l\u803b\xcf\u40cf\u0280cfosu\u07ac\u07b7\u07bc\u07c2\u07d0\u0100iy\u07b1\u07b5rc;\u4134;\u4419r;\uc000\ud835\udd0dpf;\uc000\ud835\udd41\u01e3\u07c7\0\u07ccr;\uc000\ud835\udca5rcy;\u4408kcy;\u4404\u0380HJacfos\u07e4\u07e8\u07ec\u07f1\u07fd\u0802\u0808cy;\u4425cy;\u440cppa;\u439a\u0100ey\u07f6\u07fbdil;\u4136;\u441ar;\uc000\ud835\udd0epf;\uc000\ud835\udd42cr;\uc000\ud835\udca6\u0580JTaceflmost\u0825\u0829\u082c\u0850\u0863\u09b3\u09b8\u09c7\u09cd\u0a37\u0a47cy;\u4409\u803b<\u403c\u0280cmnpr\u0837\u083c\u0841\u0844\u084dute;\u4139bda;\u439bg;\u67ealacetrf;\u6112r;\u619e\u0180aey\u0857\u085c\u0861ron;\u413ddil;\u413b;\u441b\u0100fs\u0868\u0970t\u0500ACDFRTUVar\u087e\u08a9\u08b1\u08e0\u08e6\u08fc\u092f\u095b\u0390\u096a\u0100nr\u0883\u088fgleBracket;\u67e8row\u0180;BR\u0899\u089a\u089e\u6190ar;\u61e4ightArrow;\u61c6eiling;\u6308o\u01f5\u08b7\0\u08c3bleBracket;\u67e6n\u01d4\u08c8\0\u08d2eeVector;\u6961ector\u0100;B\u08db\u08dc\u61c3ar;\u6959loor;\u630aight\u0100AV\u08ef\u08f5rrow;\u6194ector;\u694e\u0100er\u0901\u0917e\u0180;AV\u0909\u090a\u0910\u62a3rrow;\u61a4ector;\u695aiangle\u0180;BE\u0924\u0925\u0929\u62b2ar;\u69cfqual;\u62b4p\u0180DTV\u0937\u0942\u094cownVector;\u6951eeVector;\u6960ector\u0100;B\u0956\u0957\u61bfar;\u6958ector\u0100;B\u0965\u0966\u61bcar;\u6952ight\xe1\u039cs\u0300EFGLST\u097e\u098b\u0995\u099d\u09a2\u09adqualGreater;\u62daullEqual;\u6266reater;\u6276ess;\u6aa1lantEqual;\u6a7dilde;\u6272r;\uc000\ud835\udd0f\u0100;e\u09bd\u09be\u62d8ftarrow;\u61daidot;\u413f\u0180npw\u09d4\u0a16\u0a1bg\u0200LRlr\u09de\u09f7\u0a02\u0a10eft\u0100AR\u09e6\u09ecrrow;\u67f5ightArrow;\u67f7ightArrow;\u67f6eft\u0100ar\u03b3\u0a0aight\xe1\u03bfight\xe1\u03caf;\uc000\ud835\udd43er\u0100LR\u0a22\u0a2ceftArrow;\u6199ightArrow;\u6198\u0180cht\u0a3e\u0a40\u0a42\xf2\u084c;\u61b0rok;\u4141;\u626a\u0400acefiosu\u0a5a\u0a5d\u0a60\u0a77\u0a7c\u0a85\u0a8b\u0a8ep;\u6905y;\u441c\u0100dl\u0a65\u0a6fiumSpace;\u605flintrf;\u6133r;\uc000\ud835\udd10nusPlus;\u6213pf;\uc000\ud835\udd44c\xf2\u0a76;\u439c\u0480Jacefostu\u0aa3\u0aa7\u0aad\u0ac0\u0b14\u0b19\u0d91\u0d97\u0d9ecy;\u440acute;\u4143\u0180aey\u0ab4\u0ab9\u0aberon;\u4147dil;\u4145;\u441d\u0180gsw\u0ac7\u0af0\u0b0eative\u0180MTV\u0ad3\u0adf\u0ae8ediumSpace;\u600bhi\u0100cn\u0ae6\u0ad8\xeb\u0ad9eryThi\xee\u0ad9ted\u0100GL\u0af8\u0b06reaterGreate\xf2\u0673essLes\xf3\u0a48Line;\u400ar;\uc000\ud835\udd11\u0200Bnpt\u0b22\u0b28\u0b37\u0b3areak;\u6060BreakingSpace;\u40a0f;\u6115\u0680;CDEGHLNPRSTV\u0b55\u0b56\u0b6a\u0b7c\u0ba1\u0beb\u0c04\u0c5e\u0c84\u0ca6\u0cd8\u0d61\u0d85\u6aec\u0100ou\u0b5b\u0b64ngruent;\u6262pCap;\u626doubleVerticalBar;\u6226\u0180lqx\u0b83\u0b8a\u0b9bement;\u6209ual\u0100;T\u0b92\u0b93\u6260ilde;\uc000\u2242\u0338ists;\u6204reater\u0380;EFGLST\u0bb6\u0bb7\u0bbd\u0bc9\u0bd3\u0bd8\u0be5\u626fqual;\u6271ullEqual;\uc000\u2267\u0338reater;\uc000\u226b\u0338ess;\u6279lantEqual;\uc000\u2a7e\u0338ilde;\u6275ump\u0144\u0bf2\u0bfdownHump;\uc000\u224e\u0338qual;\uc000\u224f\u0338e\u0100fs\u0c0a\u0c27tTriangle\u0180;BE\u0c1a\u0c1b\u0c21\u62eaar;\uc000\u29cf\u0338qual;\u62ecs\u0300;EGLST\u0c35\u0c36\u0c3c\u0c44\u0c4b\u0c58\u626equal;\u6270reater;\u6278ess;\uc000\u226a\u0338lantEqual;\uc000\u2a7d\u0338ilde;\u6274ested\u0100GL\u0c68\u0c79reaterGreater;\uc000\u2aa2\u0338essLess;\uc000\u2aa1\u0338recedes\u0180;ES\u0c92\u0c93\u0c9b\u6280qual;\uc000\u2aaf\u0338lantEqual;\u62e0\u0100ei\u0cab\u0cb9verseElement;\u620cghtTriangle\u0180;BE\u0ccb\u0ccc\u0cd2\u62ebar;\uc000\u29d0\u0338qual;\u62ed\u0100qu\u0cdd\u0d0cuareSu\u0100bp\u0ce8\u0cf9set\u0100;E\u0cf0\u0cf3\uc000\u228f\u0338qual;\u62e2erset\u0100;E\u0d03\u0d06\uc000\u2290\u0338qual;\u62e3\u0180bcp\u0d13\u0d24\u0d4eset\u0100;E\u0d1b\u0d1e\uc000\u2282\u20d2qual;\u6288ceeds\u0200;EST\u0d32\u0d33\u0d3b\u0d46\u6281qual;\uc000\u2ab0\u0338lantEqual;\u62e1ilde;\uc000\u227f\u0338erset\u0100;E\u0d58\u0d5b\uc000\u2283\u20d2qual;\u6289ilde\u0200;EFT\u0d6e\u0d6f\u0d75\u0d7f\u6241qual;\u6244ullEqual;\u6247ilde;\u6249erticalBar;\u6224cr;\uc000\ud835\udca9ilde\u803b\xd1\u40d1;\u439d\u0700Eacdfgmoprstuv\u0dbd\u0dc2\u0dc9\u0dd5\u0ddb\u0de0\u0de7\u0dfc\u0e02\u0e20\u0e22\u0e32\u0e3f\u0e44lig;\u4152cute\u803b\xd3\u40d3\u0100iy\u0dce\u0dd3rc\u803b\xd4\u40d4;\u441eblac;\u4150r;\uc000\ud835\udd12rave\u803b\xd2\u40d2\u0180aei\u0dee\u0df2\u0df6cr;\u414cga;\u43a9cron;\u439fpf;\uc000\ud835\udd46enCurly\u0100DQ\u0e0e\u0e1aoubleQuote;\u601cuote;\u6018;\u6a54\u0100cl\u0e27\u0e2cr;\uc000\ud835\udcaaash\u803b\xd8\u40d8i\u016c\u0e37\u0e3cde\u803b\xd5\u40d5es;\u6a37ml\u803b\xd6\u40d6er\u0100BP\u0e4b\u0e60\u0100ar\u0e50\u0e53r;\u603eac\u0100ek\u0e5a\u0e5c;\u63deet;\u63b4arenthesis;\u63dc\u0480acfhilors\u0e7f\u0e87\u0e8a\u0e8f\u0e92\u0e94\u0e9d\u0eb0\u0efcrtialD;\u6202y;\u441fr;\uc000\ud835\udd13i;\u43a6;\u43a0usMinus;\u40b1\u0100ip\u0ea2\u0eadncareplan\xe5\u069df;\u6119\u0200;eio\u0eb9\u0eba\u0ee0\u0ee4\u6abbcedes\u0200;EST\u0ec8\u0ec9\u0ecf\u0eda\u627aqual;\u6aaflantEqual;\u627cilde;\u627eme;\u6033\u0100dp\u0ee9\u0eeeuct;\u620fortion\u0100;a\u0225\u0ef9l;\u621d\u0100ci\u0f01\u0f06r;\uc000\ud835\udcab;\u43a8\u0200Ufos\u0f11\u0f16\u0f1b\u0f1fOT\u803b\"\u4022r;\uc000\ud835\udd14pf;\u611acr;\uc000\ud835\udcac\u0600BEacefhiorsu\u0f3e\u0f43\u0f47\u0f60\u0f73\u0fa7\u0faa\u0fad\u1096\u10a9\u10b4\u10bearr;\u6910G\u803b\xae\u40ae\u0180cnr\u0f4e\u0f53\u0f56ute;\u4154g;\u67ebr\u0100;t\u0f5c\u0f5d\u61a0l;\u6916\u0180aey\u0f67\u0f6c\u0f71ron;\u4158dil;\u4156;\u4420\u0100;v\u0f78\u0f79\u611cerse\u0100EU\u0f82\u0f99\u0100lq\u0f87\u0f8eement;\u620builibrium;\u61cbpEquilibrium;\u696fr\xbb\u0f79o;\u43a1ght\u0400ACDFTUVa\u0fc1\u0feb\u0ff3\u1022\u1028\u105b\u1087\u03d8\u0100nr\u0fc6\u0fd2gleBracket;\u67e9row\u0180;BL\u0fdc\u0fdd\u0fe1\u6192ar;\u61e5eftArrow;\u61c4eiling;\u6309o\u01f5\u0ff9\0\u1005bleBracket;\u67e7n\u01d4\u100a\0\u1014eeVector;\u695dector\u0100;B\u101d\u101e\u61c2ar;\u6955loor;\u630b\u0100er\u102d\u1043e\u0180;AV\u1035\u1036\u103c\u62a2rrow;\u61a6ector;\u695biangle\u0180;BE\u1050\u1051\u1055\u62b3ar;\u69d0qual;\u62b5p\u0180DTV\u1063\u106e\u1078ownVector;\u694feeVector;\u695cector\u0100;B\u1082\u1083\u61bear;\u6954ector\u0100;B\u1091\u1092\u61c0ar;\u6953\u0100pu\u109b\u109ef;\u611dndImplies;\u6970ightarrow;\u61db\u0100ch\u10b9\u10bcr;\u611b;\u61b1leDelayed;\u69f4\u0680HOacfhimoqstu\u10e4\u10f1\u10f7\u10fd\u1119\u111e\u1151\u1156\u1161\u1167\u11b5\u11bb\u11bf\u0100Cc\u10e9\u10eeHcy;\u4429y;\u4428FTcy;\u442ccute;\u415a\u0280;aeiy\u1108\u1109\u110e\u1113\u1117\u6abcron;\u4160dil;\u415erc;\u415c;\u4421r;\uc000\ud835\udd16ort\u0200DLRU\u112a\u1134\u113e\u1149ownArrow\xbb\u041eeftArrow\xbb\u089aightArrow\xbb\u0fddpArrow;\u6191gma;\u43a3allCircle;\u6218pf;\uc000\ud835\udd4a\u0272\u116d\0\0\u1170t;\u621aare\u0200;ISU\u117b\u117c\u1189\u11af\u65a1ntersection;\u6293u\u0100bp\u118f\u119eset\u0100;E\u1197\u1198\u628fqual;\u6291erset\u0100;E\u11a8\u11a9\u6290qual;\u6292nion;\u6294cr;\uc000\ud835\udcaear;\u62c6\u0200bcmp\u11c8\u11db\u1209\u120b\u0100;s\u11cd\u11ce\u62d0et\u0100;E\u11cd\u11d5qual;\u6286\u0100ch\u11e0\u1205eeds\u0200;EST\u11ed\u11ee\u11f4\u11ff\u627bqual;\u6ab0lantEqual;\u627dilde;\u627fTh\xe1\u0f8c;\u6211\u0180;es\u1212\u1213\u1223\u62d1rset\u0100;E\u121c\u121d\u6283qual;\u6287et\xbb\u1213\u0580HRSacfhiors\u123e\u1244\u1249\u1255\u125e\u1271\u1276\u129f\u12c2\u12c8\u12d1ORN\u803b\xde\u40deADE;\u6122\u0100Hc\u124e\u1252cy;\u440by;\u4426\u0100bu\u125a\u125c;\u4009;\u43a4\u0180aey\u1265\u126a\u126fron;\u4164dil;\u4162;\u4422r;\uc000\ud835\udd17\u0100ei\u127b\u1289\u01f2\u1280\0\u1287efore;\u6234a;\u4398\u0100cn\u128e\u1298kSpace;\uc000\u205f\u200aSpace;\u6009lde\u0200;EFT\u12ab\u12ac\u12b2\u12bc\u623cqual;\u6243ullEqual;\u6245ilde;\u6248pf;\uc000\ud835\udd4bipleDot;\u60db\u0100ct\u12d6\u12dbr;\uc000\ud835\udcafrok;\u4166\u0ae1\u12f7\u130e\u131a\u1326\0\u132c\u1331\0\0\0\0\0\u1338\u133d\u1377\u1385\0\u13ff\u1404\u140a\u1410\u0100cr\u12fb\u1301ute\u803b\xda\u40dar\u0100;o\u1307\u1308\u619fcir;\u6949r\u01e3\u1313\0\u1316y;\u440eve;\u416c\u0100iy\u131e\u1323rc\u803b\xdb\u40db;\u4423blac;\u4170r;\uc000\ud835\udd18rave\u803b\xd9\u40d9acr;\u416a\u0100di\u1341\u1369er\u0100BP\u1348\u135d\u0100ar\u134d\u1350r;\u405fac\u0100ek\u1357\u1359;\u63dfet;\u63b5arenthesis;\u63ddon\u0100;P\u1370\u1371\u62c3lus;\u628e\u0100gp\u137b\u137fon;\u4172f;\uc000\ud835\udd4c\u0400ADETadps\u1395\u13ae\u13b8\u13c4\u03e8\u13d2\u13d7\u13f3rrow\u0180;BD\u1150\u13a0\u13a4ar;\u6912ownArrow;\u61c5ownArrow;\u6195quilibrium;\u696eee\u0100;A\u13cb\u13cc\u62a5rrow;\u61a5own\xe1\u03f3er\u0100LR\u13de\u13e8eftArrow;\u6196ightArrow;\u6197i\u0100;l\u13f9\u13fa\u43d2on;\u43a5ing;\u416ecr;\uc000\ud835\udcb0ilde;\u4168ml\u803b\xdc\u40dc\u0480Dbcdefosv\u1427\u142c\u1430\u1433\u143e\u1485\u148a\u1490\u1496ash;\u62abar;\u6aeby;\u4412ash\u0100;l\u143b\u143c\u62a9;\u6ae6\u0100er\u1443\u1445;\u62c1\u0180bty\u144c\u1450\u147aar;\u6016\u0100;i\u144f\u1455cal\u0200BLST\u1461\u1465\u146a\u1474ar;\u6223ine;\u407ceparator;\u6758ilde;\u6240ThinSpace;\u600ar;\uc000\ud835\udd19pf;\uc000\ud835\udd4dcr;\uc000\ud835\udcb1dash;\u62aa\u0280cefos\u14a7\u14ac\u14b1\u14b6\u14bcirc;\u4174dge;\u62c0r;\uc000\ud835\udd1apf;\uc000\ud835\udd4ecr;\uc000\ud835\udcb2\u0200fios\u14cb\u14d0\u14d2\u14d8r;\uc000\ud835\udd1b;\u439epf;\uc000\ud835\udd4fcr;\uc000\ud835\udcb3\u0480AIUacfosu\u14f1\u14f5\u14f9\u14fd\u1504\u150f\u1514\u151a\u1520cy;\u442fcy;\u4407cy;\u442ecute\u803b\xdd\u40dd\u0100iy\u1509\u150drc;\u4176;\u442br;\uc000\ud835\udd1cpf;\uc000\ud835\udd50cr;\uc000\ud835\udcb4ml;\u4178\u0400Hacdefos\u1535\u1539\u153f\u154b\u154f\u155d\u1560\u1564cy;\u4416cute;\u4179\u0100ay\u1544\u1549ron;\u417d;\u4417ot;\u417b\u01f2\u1554\0\u155boWidt\xe8\u0ad9a;\u4396r;\u6128pf;\u6124cr;\uc000\ud835\udcb5\u0be1\u1583\u158a\u1590\0\u15b0\u15b6\u15bf\0\0\0\0\u15c6\u15db\u15eb\u165f\u166d\0\u1695\u169b\u16b2\u16b9\0\u16becute\u803b\xe1\u40e1reve;\u4103\u0300;Ediuy\u159c\u159d\u15a1\u15a3\u15a8\u15ad\u623e;\uc000\u223e\u0333;\u623frc\u803b\xe2\u40e2te\u80bb\xb4\u0306;\u4430lig\u803b\xe6\u40e6\u0100;r\xb2\u15ba;\uc000\ud835\udd1erave\u803b\xe0\u40e0\u0100ep\u15ca\u15d6\u0100fp\u15cf\u15d4sym;\u6135\xe8\u15d3ha;\u43b1\u0100ap\u15dfc\u0100cl\u15e4\u15e7r;\u4101g;\u6a3f\u0264\u15f0\0\0\u160a\u0280;adsv\u15fa\u15fb\u15ff\u1601\u1607\u6227nd;\u6a55;\u6a5clope;\u6a58;\u6a5a\u0380;elmrsz\u1618\u1619\u161b\u161e\u163f\u164f\u1659\u6220;\u69a4e\xbb\u1619sd\u0100;a\u1625\u1626\u6221\u0461\u1630\u1632\u1634\u1636\u1638\u163a\u163c\u163e;\u69a8;\u69a9;\u69aa;\u69ab;\u69ac;\u69ad;\u69ae;\u69aft\u0100;v\u1645\u1646\u621fb\u0100;d\u164c\u164d\u62be;\u699d\u0100pt\u1654\u1657h;\u6222\xbb\xb9arr;\u637c\u0100gp\u1663\u1667on;\u4105f;\uc000\ud835\udd52\u0380;Eaeiop\u12c1\u167b\u167d\u1682\u1684\u1687\u168a;\u6a70cir;\u6a6f;\u624ad;\u624bs;\u4027rox\u0100;e\u12c1\u1692\xf1\u1683ing\u803b\xe5\u40e5\u0180cty\u16a1\u16a6\u16a8r;\uc000\ud835\udcb6;\u402amp\u0100;e\u12c1\u16af\xf1\u0288ilde\u803b\xe3\u40e3ml\u803b\xe4\u40e4\u0100ci\u16c2\u16c8onin\xf4\u0272nt;\u6a11\u0800Nabcdefiklnoprsu\u16ed\u16f1\u1730\u173c\u1743\u1748\u1778\u177d\u17e0\u17e6\u1839\u1850\u170d\u193d\u1948\u1970ot;\u6aed\u0100cr\u16f6\u171ek\u0200ceps\u1700\u1705\u170d\u1713ong;\u624cpsilon;\u43f6rime;\u6035im\u0100;e\u171a\u171b\u623dq;\u62cd\u0176\u1722\u1726ee;\u62bded\u0100;g\u172c\u172d\u6305e\xbb\u172drk\u0100;t\u135c\u1737brk;\u63b6\u0100oy\u1701\u1741;\u4431quo;\u601e\u0280cmprt\u1753\u175b\u1761\u1764\u1768aus\u0100;e\u010a\u0109ptyv;\u69b0s\xe9\u170cno\xf5\u0113\u0180ahw\u176f\u1771\u1773;\u43b2;\u6136een;\u626cr;\uc000\ud835\udd1fg\u0380costuvw\u178d\u179d\u17b3\u17c1\u17d5\u17db\u17de\u0180aiu\u1794\u1796\u179a\xf0\u0760rc;\u65efp\xbb\u1371\u0180dpt\u17a4\u17a8\u17adot;\u6a00lus;\u6a01imes;\u6a02\u0271\u17b9\0\0\u17becup;\u6a06ar;\u6605riangle\u0100du\u17cd\u17d2own;\u65bdp;\u65b3plus;\u6a04e\xe5\u1444\xe5\u14adarow;\u690d\u0180ako\u17ed\u1826\u1835\u0100cn\u17f2\u1823k\u0180lst\u17fa\u05ab\u1802ozenge;\u69ebriangle\u0200;dlr\u1812\u1813\u1818\u181d\u65b4own;\u65beeft;\u65c2ight;\u65b8k;\u6423\u01b1\u182b\0\u1833\u01b2\u182f\0\u1831;\u6592;\u65914;\u6593ck;\u6588\u0100eo\u183e\u184d\u0100;q\u1843\u1846\uc000=\u20e5uiv;\uc000\u2261\u20e5t;\u6310\u0200ptwx\u1859\u185e\u1867\u186cf;\uc000\ud835\udd53\u0100;t\u13cb\u1863om\xbb\u13cctie;\u62c8\u0600DHUVbdhmptuv\u1885\u1896\u18aa\u18bb\u18d7\u18db\u18ec\u18ff\u1905\u190a\u1910\u1921\u0200LRlr\u188e\u1890\u1892\u1894;\u6557;\u6554;\u6556;\u6553\u0280;DUdu\u18a1\u18a2\u18a4\u18a6\u18a8\u6550;\u6566;\u6569;\u6564;\u6567\u0200LRlr\u18b3\u18b5\u18b7\u18b9;\u655d;\u655a;\u655c;\u6559\u0380;HLRhlr\u18ca\u18cb\u18cd\u18cf\u18d1\u18d3\u18d5\u6551;\u656c;\u6563;\u6560;\u656b;\u6562;\u655fox;\u69c9\u0200LRlr\u18e4\u18e6\u18e8\u18ea;\u6555;\u6552;\u6510;\u650c\u0280;DUdu\u06bd\u18f7\u18f9\u18fb\u18fd;\u6565;\u6568;\u652c;\u6534inus;\u629flus;\u629eimes;\u62a0\u0200LRlr\u1919\u191b\u191d\u191f;\u655b;\u6558;\u6518;\u6514\u0380;HLRhlr\u1930\u1931\u1933\u1935\u1937\u1939\u193b\u6502;\u656a;\u6561;\u655e;\u653c;\u6524;\u651c\u0100ev\u0123\u1942bar\u803b\xa6\u40a6\u0200ceio\u1951\u1956\u195a\u1960r;\uc000\ud835\udcb7mi;\u604fm\u0100;e\u171a\u171cl\u0180;bh\u1968\u1969\u196b\u405c;\u69c5sub;\u67c8\u016c\u1974\u197el\u0100;e\u1979\u197a\u6022t\xbb\u197ap\u0180;Ee\u012f\u1985\u1987;\u6aae\u0100;q\u06dc\u06db\u0ce1\u19a7\0\u19e8\u1a11\u1a15\u1a32\0\u1a37\u1a50\0\0\u1ab4\0\0\u1ac1\0\0\u1b21\u1b2e\u1b4d\u1b52\0\u1bfd\0\u1c0c\u0180cpr\u19ad\u19b2\u19ddute;\u4107\u0300;abcds\u19bf\u19c0\u19c4\u19ca\u19d5\u19d9\u6229nd;\u6a44rcup;\u6a49\u0100au\u19cf\u19d2p;\u6a4bp;\u6a47ot;\u6a40;\uc000\u2229\ufe00\u0100eo\u19e2\u19e5t;\u6041\xee\u0693\u0200aeiu\u19f0\u19fb\u1a01\u1a05\u01f0\u19f5\0\u19f8s;\u6a4don;\u410ddil\u803b\xe7\u40e7rc;\u4109ps\u0100;s\u1a0c\u1a0d\u6a4cm;\u6a50ot;\u410b\u0180dmn\u1a1b\u1a20\u1a26il\u80bb\xb8\u01adptyv;\u69b2t\u8100\xa2;e\u1a2d\u1a2e\u40a2r\xe4\u01b2r;\uc000\ud835\udd20\u0180cei\u1a3d\u1a40\u1a4dy;\u4447ck\u0100;m\u1a47\u1a48\u6713ark\xbb\u1a48;\u43c7r\u0380;Ecefms\u1a5f\u1a60\u1a62\u1a6b\u1aa4\u1aaa\u1aae\u65cb;\u69c3\u0180;el\u1a69\u1a6a\u1a6d\u42c6q;\u6257e\u0261\u1a74\0\0\u1a88rrow\u0100lr\u1a7c\u1a81eft;\u61baight;\u61bb\u0280RSacd\u1a92\u1a94\u1a96\u1a9a\u1a9f\xbb\u0f47;\u64c8st;\u629birc;\u629aash;\u629dnint;\u6a10id;\u6aefcir;\u69c2ubs\u0100;u\u1abb\u1abc\u6663it\xbb\u1abc\u02ec\u1ac7\u1ad4\u1afa\0\u1b0aon\u0100;e\u1acd\u1ace\u403a\u0100;q\xc7\xc6\u026d\u1ad9\0\0\u1ae2a\u0100;t\u1ade\u1adf\u402c;\u4040\u0180;fl\u1ae8\u1ae9\u1aeb\u6201\xee\u1160e\u0100mx\u1af1\u1af6ent\xbb\u1ae9e\xf3\u024d\u01e7\u1afe\0\u1b07\u0100;d\u12bb\u1b02ot;\u6a6dn\xf4\u0246\u0180fry\u1b10\u1b14\u1b17;\uc000\ud835\udd54o\xe4\u0254\u8100\xa9;s\u0155\u1b1dr;\u6117\u0100ao\u1b25\u1b29rr;\u61b5ss;\u6717\u0100cu\u1b32\u1b37r;\uc000\ud835\udcb8\u0100bp\u1b3c\u1b44\u0100;e\u1b41\u1b42\u6acf;\u6ad1\u0100;e\u1b49\u1b4a\u6ad0;\u6ad2dot;\u62ef\u0380delprvw\u1b60\u1b6c\u1b77\u1b82\u1bac\u1bd4\u1bf9arr\u0100lr\u1b68\u1b6a;\u6938;\u6935\u0270\u1b72\0\0\u1b75r;\u62dec;\u62dfarr\u0100;p\u1b7f\u1b80\u61b6;\u693d\u0300;bcdos\u1b8f\u1b90\u1b96\u1ba1\u1ba5\u1ba8\u622arcap;\u6a48\u0100au\u1b9b\u1b9ep;\u6a46p;\u6a4aot;\u628dr;\u6a45;\uc000\u222a\ufe00\u0200alrv\u1bb5\u1bbf\u1bde\u1be3rr\u0100;m\u1bbc\u1bbd\u61b7;\u693cy\u0180evw\u1bc7\u1bd4\u1bd8q\u0270\u1bce\0\0\u1bd2re\xe3\u1b73u\xe3\u1b75ee;\u62ceedge;\u62cfen\u803b\xa4\u40a4earrow\u0100lr\u1bee\u1bf3eft\xbb\u1b80ight\xbb\u1bbde\xe4\u1bdd\u0100ci\u1c01\u1c07onin\xf4\u01f7nt;\u6231lcty;\u632d\u0980AHabcdefhijlorstuwz\u1c38\u1c3b\u1c3f\u1c5d\u1c69\u1c75\u1c8a\u1c9e\u1cac\u1cb7\u1cfb\u1cff\u1d0d\u1d7b\u1d91\u1dab\u1dbb\u1dc6\u1dcdr\xf2\u0381ar;\u6965\u0200glrs\u1c48\u1c4d\u1c52\u1c54ger;\u6020eth;\u6138\xf2\u1133h\u0100;v\u1c5a\u1c5b\u6010\xbb\u090a\u016b\u1c61\u1c67arow;\u690fa\xe3\u0315\u0100ay\u1c6e\u1c73ron;\u410f;\u4434\u0180;ao\u0332\u1c7c\u1c84\u0100gr\u02bf\u1c81r;\u61catseq;\u6a77\u0180glm\u1c91\u1c94\u1c98\u803b\xb0\u40b0ta;\u43b4ptyv;\u69b1\u0100ir\u1ca3\u1ca8sht;\u697f;\uc000\ud835\udd21ar\u0100lr\u1cb3\u1cb5\xbb\u08dc\xbb\u101e\u0280aegsv\u1cc2\u0378\u1cd6\u1cdc\u1ce0m\u0180;os\u0326\u1cca\u1cd4nd\u0100;s\u0326\u1cd1uit;\u6666amma;\u43ddin;\u62f2\u0180;io\u1ce7\u1ce8\u1cf8\u40f7de\u8100\xf7;o\u1ce7\u1cf0ntimes;\u62c7n\xf8\u1cf7cy;\u4452c\u026f\u1d06\0\0\u1d0arn;\u631eop;\u630d\u0280lptuw\u1d18\u1d1d\u1d22\u1d49\u1d55lar;\u4024f;\uc000\ud835\udd55\u0280;emps\u030b\u1d2d\u1d37\u1d3d\u1d42q\u0100;d\u0352\u1d33ot;\u6251inus;\u6238lus;\u6214quare;\u62a1blebarwedg\xe5\xfan\u0180adh\u112e\u1d5d\u1d67ownarrow\xf3\u1c83arpoon\u0100lr\u1d72\u1d76ef\xf4\u1cb4igh\xf4\u1cb6\u0162\u1d7f\u1d85karo\xf7\u0f42\u026f\u1d8a\0\0\u1d8ern;\u631fop;\u630c\u0180cot\u1d98\u1da3\u1da6\u0100ry\u1d9d\u1da1;\uc000\ud835\udcb9;\u4455l;\u69f6rok;\u4111\u0100dr\u1db0\u1db4ot;\u62f1i\u0100;f\u1dba\u1816\u65bf\u0100ah\u1dc0\u1dc3r\xf2\u0429a\xf2\u0fa6angle;\u69a6\u0100ci\u1dd2\u1dd5y;\u445fgrarr;\u67ff\u0900Dacdefglmnopqrstux\u1e01\u1e09\u1e19\u1e38\u0578\u1e3c\u1e49\u1e61\u1e7e\u1ea5\u1eaf\u1ebd\u1ee1\u1f2a\u1f37\u1f44\u1f4e\u1f5a\u0100Do\u1e06\u1d34o\xf4\u1c89\u0100cs\u1e0e\u1e14ute\u803b\xe9\u40e9ter;\u6a6e\u0200aioy\u1e22\u1e27\u1e31\u1e36ron;\u411br\u0100;c\u1e2d\u1e2e\u6256\u803b\xea\u40ealon;\u6255;\u444dot;\u4117\u0100Dr\u1e41\u1e45ot;\u6252;\uc000\ud835\udd22\u0180;rs\u1e50\u1e51\u1e57\u6a9aave\u803b\xe8\u40e8\u0100;d\u1e5c\u1e5d\u6a96ot;\u6a98\u0200;ils\u1e6a\u1e6b\u1e72\u1e74\u6a99nters;\u63e7;\u6113\u0100;d\u1e79\u1e7a\u6a95ot;\u6a97\u0180aps\u1e85\u1e89\u1e97cr;\u4113ty\u0180;sv\u1e92\u1e93\u1e95\u6205et\xbb\u1e93p\u01001;\u1e9d\u1ea4\u0133\u1ea1\u1ea3;\u6004;\u6005\u6003\u0100gs\u1eaa\u1eac;\u414bp;\u6002\u0100gp\u1eb4\u1eb8on;\u4119f;\uc000\ud835\udd56\u0180als\u1ec4\u1ece\u1ed2r\u0100;s\u1eca\u1ecb\u62d5l;\u69e3us;\u6a71i\u0180;lv\u1eda\u1edb\u1edf\u43b5on\xbb\u1edb;\u43f5\u0200csuv\u1eea\u1ef3\u1f0b\u1f23\u0100io\u1eef\u1e31rc\xbb\u1e2e\u0269\u1ef9\0\0\u1efb\xed\u0548ant\u0100gl\u1f02\u1f06tr\xbb\u1e5dess\xbb\u1e7a\u0180aei\u1f12\u1f16\u1f1als;\u403dst;\u625fv\u0100;D\u0235\u1f20D;\u6a78parsl;\u69e5\u0100Da\u1f2f\u1f33ot;\u6253rr;\u6971\u0180cdi\u1f3e\u1f41\u1ef8r;\u612fo\xf4\u0352\u0100ah\u1f49\u1f4b;\u43b7\u803b\xf0\u40f0\u0100mr\u1f53\u1f57l\u803b\xeb\u40ebo;\u60ac\u0180cip\u1f61\u1f64\u1f67l;\u4021s\xf4\u056e\u0100eo\u1f6c\u1f74ctatio\xee\u0559nential\xe5\u0579\u09e1\u1f92\0\u1f9e\0\u1fa1\u1fa7\0\0\u1fc6\u1fcc\0\u1fd3\0\u1fe6\u1fea\u2000\0\u2008\u205allingdotse\xf1\u1e44y;\u4444male;\u6640\u0180ilr\u1fad\u1fb3\u1fc1lig;\u8000\ufb03\u0269\u1fb9\0\0\u1fbdg;\u8000\ufb00ig;\u8000\ufb04;\uc000\ud835\udd23lig;\u8000\ufb01lig;\uc000fj\u0180alt\u1fd9\u1fdc\u1fe1t;\u666dig;\u8000\ufb02ns;\u65b1of;\u4192\u01f0\u1fee\0\u1ff3f;\uc000\ud835\udd57\u0100ak\u05bf\u1ff7\u0100;v\u1ffc\u1ffd\u62d4;\u6ad9artint;\u6a0d\u0100ao\u200c\u2055\u0100cs\u2011\u2052\u03b1\u201a\u2030\u2038\u2045\u2048\0\u2050\u03b2\u2022\u2025\u2027\u202a\u202c\0\u202e\u803b\xbd\u40bd;\u6153\u803b\xbc\u40bc;\u6155;\u6159;\u615b\u01b3\u2034\0\u2036;\u6154;\u6156\u02b4\u203e\u2041\0\0\u2043\u803b\xbe\u40be;\u6157;\u615c5;\u6158\u01b6\u204c\0\u204e;\u615a;\u615d8;\u615el;\u6044wn;\u6322cr;\uc000\ud835\udcbb\u0880Eabcdefgijlnorstv\u2082\u2089\u209f\u20a5\u20b0\u20b4\u20f0\u20f5\u20fa\u20ff\u2103\u2112\u2138\u0317\u213e\u2152\u219e\u0100;l\u064d\u2087;\u6a8c\u0180cmp\u2090\u2095\u209dute;\u41f5ma\u0100;d\u209c\u1cda\u43b3;\u6a86reve;\u411f\u0100iy\u20aa\u20aerc;\u411d;\u4433ot;\u4121\u0200;lqs\u063e\u0642\u20bd\u20c9\u0180;qs\u063e\u064c\u20c4lan\xf4\u0665\u0200;cdl\u0665\u20d2\u20d5\u20e5c;\u6aa9ot\u0100;o\u20dc\u20dd\u6a80\u0100;l\u20e2\u20e3\u6a82;\u6a84\u0100;e\u20ea\u20ed\uc000\u22db\ufe00s;\u6a94r;\uc000\ud835\udd24\u0100;g\u0673\u061bmel;\u6137cy;\u4453\u0200;Eaj\u065a\u210c\u210e\u2110;\u6a92;\u6aa5;\u6aa4\u0200Eaes\u211b\u211d\u2129\u2134;\u6269p\u0100;p\u2123\u2124\u6a8arox\xbb\u2124\u0100;q\u212e\u212f\u6a88\u0100;q\u212e\u211bim;\u62e7pf;\uc000\ud835\udd58\u0100ci\u2143\u2146r;\u610am\u0180;el\u066b\u214e\u2150;\u6a8e;\u6a90\u8300>;cdlqr\u05ee\u2160\u216a\u216e\u2173\u2179\u0100ci\u2165\u2167;\u6aa7r;\u6a7aot;\u62d7Par;\u6995uest;\u6a7c\u0280adels\u2184\u216a\u2190\u0656\u219b\u01f0\u2189\0\u218epro\xf8\u209er;\u6978q\u0100lq\u063f\u2196les\xf3\u2088i\xed\u066b\u0100en\u21a3\u21adrtneqq;\uc000\u2269\ufe00\xc5\u21aa\u0500Aabcefkosy\u21c4\u21c7\u21f1\u21f5\u21fa\u2218\u221d\u222f\u2268\u227dr\xf2\u03a0\u0200ilmr\u21d0\u21d4\u21d7\u21dbrs\xf0\u1484f\xbb\u2024il\xf4\u06a9\u0100dr\u21e0\u21e4cy;\u444a\u0180;cw\u08f4\u21eb\u21efir;\u6948;\u61adar;\u610firc;\u4125\u0180alr\u2201\u220e\u2213rts\u0100;u\u2209\u220a\u6665it\xbb\u220alip;\u6026con;\u62b9r;\uc000\ud835\udd25s\u0100ew\u2223\u2229arow;\u6925arow;\u6926\u0280amopr\u223a\u223e\u2243\u225e\u2263rr;\u61fftht;\u623bk\u0100lr\u2249\u2253eftarrow;\u61a9ightarrow;\u61aaf;\uc000\ud835\udd59bar;\u6015\u0180clt\u226f\u2274\u2278r;\uc000\ud835\udcbdas\xe8\u21f4rok;\u4127\u0100bp\u2282\u2287ull;\u6043hen\xbb\u1c5b\u0ae1\u22a3\0\u22aa\0\u22b8\u22c5\u22ce\0\u22d5\u22f3\0\0\u22f8\u2322\u2367\u2362\u237f\0\u2386\u23aa\u23b4cute\u803b\xed\u40ed\u0180;iy\u0771\u22b0\u22b5rc\u803b\xee\u40ee;\u4438\u0100cx\u22bc\u22bfy;\u4435cl\u803b\xa1\u40a1\u0100fr\u039f\u22c9;\uc000\ud835\udd26rave\u803b\xec\u40ec\u0200;ino\u073e\u22dd\u22e9\u22ee\u0100in\u22e2\u22e6nt;\u6a0ct;\u622dfin;\u69dcta;\u6129lig;\u4133\u0180aop\u22fe\u231a\u231d\u0180cgt\u2305\u2308\u2317r;\u412b\u0180elp\u071f\u230f\u2313in\xe5\u078ear\xf4\u0720h;\u4131f;\u62b7ed;\u41b5\u0280;cfot\u04f4\u232c\u2331\u233d\u2341are;\u6105in\u0100;t\u2338\u2339\u621eie;\u69dddo\xf4\u2319\u0280;celp\u0757\u234c\u2350\u235b\u2361al;\u62ba\u0100gr\u2355\u2359er\xf3\u1563\xe3\u234darhk;\u6a17rod;\u6a3c\u0200cgpt\u236f\u2372\u2376\u237by;\u4451on;\u412ff;\uc000\ud835\udd5aa;\u43b9uest\u803b\xbf\u40bf\u0100ci\u238a\u238fr;\uc000\ud835\udcben\u0280;Edsv\u04f4\u239b\u239d\u23a1\u04f3;\u62f9ot;\u62f5\u0100;v\u23a6\u23a7\u62f4;\u62f3\u0100;i\u0777\u23aelde;\u4129\u01eb\u23b8\0\u23bccy;\u4456l\u803b\xef\u40ef\u0300cfmosu\u23cc\u23d7\u23dc\u23e1\u23e7\u23f5\u0100iy\u23d1\u23d5rc;\u4135;\u4439r;\uc000\ud835\udd27ath;\u4237pf;\uc000\ud835\udd5b\u01e3\u23ec\0\u23f1r;\uc000\ud835\udcbfrcy;\u4458kcy;\u4454\u0400acfghjos\u240b\u2416\u2422\u2427\u242d\u2431\u2435\u243bppa\u0100;v\u2413\u2414\u43ba;\u43f0\u0100ey\u241b\u2420dil;\u4137;\u443ar;\uc000\ud835\udd28reen;\u4138cy;\u4445cy;\u445cpf;\uc000\ud835\udd5ccr;\uc000\ud835\udcc0\u0b80ABEHabcdefghjlmnoprstuv\u2470\u2481\u2486\u248d\u2491\u250e\u253d\u255a\u2580\u264e\u265e\u2665\u2679\u267d\u269a\u26b2\u26d8\u275d\u2768\u278b\u27c0\u2801\u2812\u0180art\u2477\u247a\u247cr\xf2\u09c6\xf2\u0395ail;\u691barr;\u690e\u0100;g\u0994\u248b;\u6a8bar;\u6962\u0963\u24a5\0\u24aa\0\u24b1\0\0\0\0\0\u24b5\u24ba\0\u24c6\u24c8\u24cd\0\u24f9ute;\u413amptyv;\u69b4ra\xee\u084cbda;\u43bbg\u0180;dl\u088e\u24c1\u24c3;\u6991\xe5\u088e;\u6a85uo\u803b\xab\u40abr\u0400;bfhlpst\u0899\u24de\u24e6\u24e9\u24eb\u24ee\u24f1\u24f5\u0100;f\u089d\u24e3s;\u691fs;\u691d\xeb\u2252p;\u61abl;\u6939im;\u6973l;\u61a2\u0180;ae\u24ff\u2500\u2504\u6aabil;\u6919\u0100;s\u2509\u250a\u6aad;\uc000\u2aad\ufe00\u0180abr\u2515\u2519\u251drr;\u690crk;\u6772\u0100ak\u2522\u252cc\u0100ek\u2528\u252a;\u407b;\u405b\u0100es\u2531\u2533;\u698bl\u0100du\u2539\u253b;\u698f;\u698d\u0200aeuy\u2546\u254b\u2556\u2558ron;\u413e\u0100di\u2550\u2554il;\u413c\xec\u08b0\xe2\u2529;\u443b\u0200cqrs\u2563\u2566\u256d\u257da;\u6936uo\u0100;r\u0e19\u1746\u0100du\u2572\u2577har;\u6967shar;\u694bh;\u61b2\u0280;fgqs\u258b\u258c\u0989\u25f3\u25ff\u6264t\u0280ahlrt\u2598\u25a4\u25b7\u25c2\u25e8rrow\u0100;t\u0899\u25a1a\xe9\u24f6arpoon\u0100du\u25af\u25b4own\xbb\u045ap\xbb\u0966eftarrows;\u61c7ight\u0180ahs\u25cd\u25d6\u25derrow\u0100;s\u08f4\u08a7arpoon\xf3\u0f98quigarro\xf7\u21f0hreetimes;\u62cb\u0180;qs\u258b\u0993\u25falan\xf4\u09ac\u0280;cdgs\u09ac\u260a\u260d\u261d\u2628c;\u6aa8ot\u0100;o\u2614\u2615\u6a7f\u0100;r\u261a\u261b\u6a81;\u6a83\u0100;e\u2622\u2625\uc000\u22da\ufe00s;\u6a93\u0280adegs\u2633\u2639\u263d\u2649\u264bppro\xf8\u24c6ot;\u62d6q\u0100gq\u2643\u2645\xf4\u0989gt\xf2\u248c\xf4\u099bi\xed\u09b2\u0180ilr\u2655\u08e1\u265asht;\u697c;\uc000\ud835\udd29\u0100;E\u099c\u2663;\u6a91\u0161\u2669\u2676r\u0100du\u25b2\u266e\u0100;l\u0965\u2673;\u696alk;\u6584cy;\u4459\u0280;acht\u0a48\u2688\u268b\u2691\u2696r\xf2\u25c1orne\xf2\u1d08ard;\u696bri;\u65fa\u0100io\u269f\u26a4dot;\u4140ust\u0100;a\u26ac\u26ad\u63b0che\xbb\u26ad\u0200Eaes\u26bb\u26bd\u26c9\u26d4;\u6268p\u0100;p\u26c3\u26c4\u6a89rox\xbb\u26c4\u0100;q\u26ce\u26cf\u6a87\u0100;q\u26ce\u26bbim;\u62e6\u0400abnoptwz\u26e9\u26f4\u26f7\u271a\u272f\u2741\u2747\u2750\u0100nr\u26ee\u26f1g;\u67ecr;\u61fdr\xeb\u08c1g\u0180lmr\u26ff\u270d\u2714eft\u0100ar\u09e6\u2707ight\xe1\u09f2apsto;\u67fcight\xe1\u09fdparrow\u0100lr\u2725\u2729ef\xf4\u24edight;\u61ac\u0180afl\u2736\u2739\u273dr;\u6985;\uc000\ud835\udd5dus;\u6a2dimes;\u6a34\u0161\u274b\u274fst;\u6217\xe1\u134e\u0180;ef\u2757\u2758\u1800\u65cange\xbb\u2758ar\u0100;l\u2764\u2765\u4028t;\u6993\u0280achmt\u2773\u2776\u277c\u2785\u2787r\xf2\u08a8orne\xf2\u1d8car\u0100;d\u0f98\u2783;\u696d;\u600eri;\u62bf\u0300achiqt\u2798\u279d\u0a40\u27a2\u27ae\u27bbquo;\u6039r;\uc000\ud835\udcc1m\u0180;eg\u09b2\u27aa\u27ac;\u6a8d;\u6a8f\u0100bu\u252a\u27b3o\u0100;r\u0e1f\u27b9;\u601arok;\u4142\u8400<;cdhilqr\u082b\u27d2\u2639\u27dc\u27e0\u27e5\u27ea\u27f0\u0100ci\u27d7\u27d9;\u6aa6r;\u6a79re\xe5\u25f2mes;\u62c9arr;\u6976uest;\u6a7b\u0100Pi\u27f5\u27f9ar;\u6996\u0180;ef\u2800\u092d\u181b\u65c3r\u0100du\u2807\u280dshar;\u694ahar;\u6966\u0100en\u2817\u2821rtneqq;\uc000\u2268\ufe00\xc5\u281e\u0700Dacdefhilnopsu\u2840\u2845\u2882\u288e\u2893\u28a0\u28a5\u28a8\u28da\u28e2\u28e4\u0a83\u28f3\u2902Dot;\u623a\u0200clpr\u284e\u2852\u2863\u287dr\u803b\xaf\u40af\u0100et\u2857\u2859;\u6642\u0100;e\u285e\u285f\u6720se\xbb\u285f\u0100;s\u103b\u2868to\u0200;dlu\u103b\u2873\u2877\u287bow\xee\u048cef\xf4\u090f\xf0\u13d1ker;\u65ae\u0100oy\u2887\u288cmma;\u6a29;\u443cash;\u6014asuredangle\xbb\u1626r;\uc000\ud835\udd2ao;\u6127\u0180cdn\u28af\u28b4\u28c9ro\u803b\xb5\u40b5\u0200;acd\u1464\u28bd\u28c0\u28c4s\xf4\u16a7ir;\u6af0ot\u80bb\xb7\u01b5us\u0180;bd\u28d2\u1903\u28d3\u6212\u0100;u\u1d3c\u28d8;\u6a2a\u0163\u28de\u28e1p;\u6adb\xf2\u2212\xf0\u0a81\u0100dp\u28e9\u28eeels;\u62a7f;\uc000\ud835\udd5e\u0100ct\u28f8\u28fdr;\uc000\ud835\udcc2pos\xbb\u159d\u0180;lm\u2909\u290a\u290d\u43bctimap;\u62b8\u0c00GLRVabcdefghijlmoprstuvw\u2942\u2953\u297e\u2989\u2998\u29da\u29e9\u2a15\u2a1a\u2a58\u2a5d\u2a83\u2a95\u2aa4\u2aa8\u2b04\u2b07\u2b44\u2b7f\u2bae\u2c34\u2c67\u2c7c\u2ce9\u0100gt\u2947\u294b;\uc000\u22d9\u0338\u0100;v\u2950\u0bcf\uc000\u226b\u20d2\u0180elt\u295a\u2972\u2976ft\u0100ar\u2961\u2967rrow;\u61cdightarrow;\u61ce;\uc000\u22d8\u0338\u0100;v\u297b\u0c47\uc000\u226a\u20d2ightarrow;\u61cf\u0100Dd\u298e\u2993ash;\u62afash;\u62ae\u0280bcnpt\u29a3\u29a7\u29ac\u29b1\u29ccla\xbb\u02deute;\u4144g;\uc000\u2220\u20d2\u0280;Eiop\u0d84\u29bc\u29c0\u29c5\u29c8;\uc000\u2a70\u0338d;\uc000\u224b\u0338s;\u4149ro\xf8\u0d84ur\u0100;a\u29d3\u29d4\u666el\u0100;s\u29d3\u0b38\u01f3\u29df\0\u29e3p\u80bb\xa0\u0b37mp\u0100;e\u0bf9\u0c00\u0280aeouy\u29f4\u29fe\u2a03\u2a10\u2a13\u01f0\u29f9\0\u29fb;\u6a43on;\u4148dil;\u4146ng\u0100;d\u0d7e\u2a0aot;\uc000\u2a6d\u0338p;\u6a42;\u443dash;\u6013\u0380;Aadqsx\u0b92\u2a29\u2a2d\u2a3b\u2a41\u2a45\u2a50rr;\u61d7r\u0100hr\u2a33\u2a36k;\u6924\u0100;o\u13f2\u13f0ot;\uc000\u2250\u0338ui\xf6\u0b63\u0100ei\u2a4a\u2a4ear;\u6928\xed\u0b98ist\u0100;s\u0ba0\u0b9fr;\uc000\ud835\udd2b\u0200Eest\u0bc5\u2a66\u2a79\u2a7c\u0180;qs\u0bbc\u2a6d\u0be1\u0180;qs\u0bbc\u0bc5\u2a74lan\xf4\u0be2i\xed\u0bea\u0100;r\u0bb6\u2a81\xbb\u0bb7\u0180Aap\u2a8a\u2a8d\u2a91r\xf2\u2971rr;\u61aear;\u6af2\u0180;sv\u0f8d\u2a9c\u0f8c\u0100;d\u2aa1\u2aa2\u62fc;\u62facy;\u445a\u0380AEadest\u2ab7\u2aba\u2abe\u2ac2\u2ac5\u2af6\u2af9r\xf2\u2966;\uc000\u2266\u0338rr;\u619ar;\u6025\u0200;fqs\u0c3b\u2ace\u2ae3\u2aeft\u0100ar\u2ad4\u2ad9rro\xf7\u2ac1ightarro\xf7\u2a90\u0180;qs\u0c3b\u2aba\u2aealan\xf4\u0c55\u0100;s\u0c55\u2af4\xbb\u0c36i\xed\u0c5d\u0100;r\u0c35\u2afei\u0100;e\u0c1a\u0c25i\xe4\u0d90\u0100pt\u2b0c\u2b11f;\uc000\ud835\udd5f\u8180\xac;in\u2b19\u2b1a\u2b36\u40acn\u0200;Edv\u0b89\u2b24\u2b28\u2b2e;\uc000\u22f9\u0338ot;\uc000\u22f5\u0338\u01e1\u0b89\u2b33\u2b35;\u62f7;\u62f6i\u0100;v\u0cb8\u2b3c\u01e1\u0cb8\u2b41\u2b43;\u62fe;\u62fd\u0180aor\u2b4b\u2b63\u2b69r\u0200;ast\u0b7b\u2b55\u2b5a\u2b5flle\xec\u0b7bl;\uc000\u2afd\u20e5;\uc000\u2202\u0338lint;\u6a14\u0180;ce\u0c92\u2b70\u2b73u\xe5\u0ca5\u0100;c\u0c98\u2b78\u0100;e\u0c92\u2b7d\xf1\u0c98\u0200Aait\u2b88\u2b8b\u2b9d\u2ba7r\xf2\u2988rr\u0180;cw\u2b94\u2b95\u2b99\u619b;\uc000\u2933\u0338;\uc000\u219d\u0338ghtarrow\xbb\u2b95ri\u0100;e\u0ccb\u0cd6\u0380chimpqu\u2bbd\u2bcd\u2bd9\u2b04\u0b78\u2be4\u2bef\u0200;cer\u0d32\u2bc6\u0d37\u2bc9u\xe5\u0d45;\uc000\ud835\udcc3ort\u026d\u2b05\0\0\u2bd6ar\xe1\u2b56m\u0100;e\u0d6e\u2bdf\u0100;q\u0d74\u0d73su\u0100bp\u2beb\u2bed\xe5\u0cf8\xe5\u0d0b\u0180bcp\u2bf6\u2c11\u2c19\u0200;Ees\u2bff\u2c00\u0d22\u2c04\u6284;\uc000\u2ac5\u0338et\u0100;e\u0d1b\u2c0bq\u0100;q\u0d23\u2c00c\u0100;e\u0d32\u2c17\xf1\u0d38\u0200;Ees\u2c22\u2c23\u0d5f\u2c27\u6285;\uc000\u2ac6\u0338et\u0100;e\u0d58\u2c2eq\u0100;q\u0d60\u2c23\u0200gilr\u2c3d\u2c3f\u2c45\u2c47\xec\u0bd7lde\u803b\xf1\u40f1\xe7\u0c43iangle\u0100lr\u2c52\u2c5ceft\u0100;e\u0c1a\u2c5a\xf1\u0c26ight\u0100;e\u0ccb\u2c65\xf1\u0cd7\u0100;m\u2c6c\u2c6d\u43bd\u0180;es\u2c74\u2c75\u2c79\u4023ro;\u6116p;\u6007\u0480DHadgilrs\u2c8f\u2c94\u2c99\u2c9e\u2ca3\u2cb0\u2cb6\u2cd3\u2ce3ash;\u62adarr;\u6904p;\uc000\u224d\u20d2ash;\u62ac\u0100et\u2ca8\u2cac;\uc000\u2265\u20d2;\uc000>\u20d2nfin;\u69de\u0180Aet\u2cbd\u2cc1\u2cc5rr;\u6902;\uc000\u2264\u20d2\u0100;r\u2cca\u2ccd\uc000<\u20d2ie;\uc000\u22b4\u20d2\u0100At\u2cd8\u2cdcrr;\u6903rie;\uc000\u22b5\u20d2im;\uc000\u223c\u20d2\u0180Aan\u2cf0\u2cf4\u2d02rr;\u61d6r\u0100hr\u2cfa\u2cfdk;\u6923\u0100;o\u13e7\u13e5ear;\u6927\u1253\u1a95\0\0\0\0\0\0\0\0\0\0\0\0\0\u2d2d\0\u2d38\u2d48\u2d60\u2d65\u2d72\u2d84\u1b07\0\0\u2d8d\u2dab\0\u2dc8\u2dce\0\u2ddc\u2e19\u2e2b\u2e3e\u2e43\u0100cs\u2d31\u1a97ute\u803b\xf3\u40f3\u0100iy\u2d3c\u2d45r\u0100;c\u1a9e\u2d42\u803b\xf4\u40f4;\u443e\u0280abios\u1aa0\u2d52\u2d57\u01c8\u2d5alac;\u4151v;\u6a38old;\u69bclig;\u4153\u0100cr\u2d69\u2d6dir;\u69bf;\uc000\ud835\udd2c\u036f\u2d79\0\0\u2d7c\0\u2d82n;\u42dbave\u803b\xf2\u40f2;\u69c1\u0100bm\u2d88\u0df4ar;\u69b5\u0200acit\u2d95\u2d98\u2da5\u2da8r\xf2\u1a80\u0100ir\u2d9d\u2da0r;\u69beoss;\u69bbn\xe5\u0e52;\u69c0\u0180aei\u2db1\u2db5\u2db9cr;\u414dga;\u43c9\u0180cdn\u2dc0\u2dc5\u01cdron;\u43bf;\u69b6pf;\uc000\ud835\udd60\u0180ael\u2dd4\u2dd7\u01d2r;\u69b7rp;\u69b9\u0380;adiosv\u2dea\u2deb\u2dee\u2e08\u2e0d\u2e10\u2e16\u6228r\xf2\u1a86\u0200;efm\u2df7\u2df8\u2e02\u2e05\u6a5dr\u0100;o\u2dfe\u2dff\u6134f\xbb\u2dff\u803b\xaa\u40aa\u803b\xba\u40bagof;\u62b6r;\u6a56lope;\u6a57;\u6a5b\u0180clo\u2e1f\u2e21\u2e27\xf2\u2e01ash\u803b\xf8\u40f8l;\u6298i\u016c\u2e2f\u2e34de\u803b\xf5\u40f5es\u0100;a\u01db\u2e3as;\u6a36ml\u803b\xf6\u40f6bar;\u633d\u0ae1\u2e5e\0\u2e7d\0\u2e80\u2e9d\0\u2ea2\u2eb9\0\0\u2ecb\u0e9c\0\u2f13\0\0\u2f2b\u2fbc\0\u2fc8r\u0200;ast\u0403\u2e67\u2e72\u0e85\u8100\xb6;l\u2e6d\u2e6e\u40b6le\xec\u0403\u0269\u2e78\0\0\u2e7bm;\u6af3;\u6afdy;\u443fr\u0280cimpt\u2e8b\u2e8f\u2e93\u1865\u2e97nt;\u4025od;\u402eil;\u6030enk;\u6031r;\uc000\ud835\udd2d\u0180imo\u2ea8\u2eb0\u2eb4\u0100;v\u2ead\u2eae\u43c6;\u43d5ma\xf4\u0a76ne;\u660e\u0180;tv\u2ebf\u2ec0\u2ec8\u43c0chfork\xbb\u1ffd;\u43d6\u0100au\u2ecf\u2edfn\u0100ck\u2ed5\u2eddk\u0100;h\u21f4\u2edb;\u610e\xf6\u21f4s\u0480;abcdemst\u2ef3\u2ef4\u1908\u2ef9\u2efd\u2f04\u2f06\u2f0a\u2f0e\u402bcir;\u6a23ir;\u6a22\u0100ou\u1d40\u2f02;\u6a25;\u6a72n\u80bb\xb1\u0e9dim;\u6a26wo;\u6a27\u0180ipu\u2f19\u2f20\u2f25ntint;\u6a15f;\uc000\ud835\udd61nd\u803b\xa3\u40a3\u0500;Eaceinosu\u0ec8\u2f3f\u2f41\u2f44\u2f47\u2f81\u2f89\u2f92\u2f7e\u2fb6;\u6ab3p;\u6ab7u\xe5\u0ed9\u0100;c\u0ece\u2f4c\u0300;acens\u0ec8\u2f59\u2f5f\u2f66\u2f68\u2f7eppro\xf8\u2f43urlye\xf1\u0ed9\xf1\u0ece\u0180aes\u2f6f\u2f76\u2f7approx;\u6ab9qq;\u6ab5im;\u62e8i\xed\u0edfme\u0100;s\u2f88\u0eae\u6032\u0180Eas\u2f78\u2f90\u2f7a\xf0\u2f75\u0180dfp\u0eec\u2f99\u2faf\u0180als\u2fa0\u2fa5\u2faalar;\u632eine;\u6312urf;\u6313\u0100;t\u0efb\u2fb4\xef\u0efbrel;\u62b0\u0100ci\u2fc0\u2fc5r;\uc000\ud835\udcc5;\u43c8ncsp;\u6008\u0300fiopsu\u2fda\u22e2\u2fdf\u2fe5\u2feb\u2ff1r;\uc000\ud835\udd2epf;\uc000\ud835\udd62rime;\u6057cr;\uc000\ud835\udcc6\u0180aeo\u2ff8\u3009\u3013t\u0100ei\u2ffe\u3005rnion\xf3\u06b0nt;\u6a16st\u0100;e\u3010\u3011\u403f\xf1\u1f19\xf4\u0f14\u0a80ABHabcdefhilmnoprstux\u3040\u3051\u3055\u3059\u30e0\u310e\u312b\u3147\u3162\u3172\u318e\u3206\u3215\u3224\u3229\u3258\u326e\u3272\u3290\u32b0\u32b7\u0180art\u3047\u304a\u304cr\xf2\u10b3\xf2\u03ddail;\u691car\xf2\u1c65ar;\u6964\u0380cdenqrt\u3068\u3075\u3078\u307f\u308f\u3094\u30cc\u0100eu\u306d\u3071;\uc000\u223d\u0331te;\u4155i\xe3\u116emptyv;\u69b3g\u0200;del\u0fd1\u3089\u308b\u308d;\u6992;\u69a5\xe5\u0fd1uo\u803b\xbb\u40bbr\u0580;abcfhlpstw\u0fdc\u30ac\u30af\u30b7\u30b9\u30bc\u30be\u30c0\u30c3\u30c7\u30cap;\u6975\u0100;f\u0fe0\u30b4s;\u6920;\u6933s;\u691e\xeb\u225d\xf0\u272el;\u6945im;\u6974l;\u61a3;\u619d\u0100ai\u30d1\u30d5il;\u691ao\u0100;n\u30db\u30dc\u6236al\xf3\u0f1e\u0180abr\u30e7\u30ea\u30eer\xf2\u17e5rk;\u6773\u0100ak\u30f3\u30fdc\u0100ek\u30f9\u30fb;\u407d;\u405d\u0100es\u3102\u3104;\u698cl\u0100du\u310a\u310c;\u698e;\u6990\u0200aeuy\u3117\u311c\u3127\u3129ron;\u4159\u0100di\u3121\u3125il;\u4157\xec\u0ff2\xe2\u30fa;\u4440\u0200clqs\u3134\u3137\u313d\u3144a;\u6937dhar;\u6969uo\u0100;r\u020e\u020dh;\u61b3\u0180acg\u314e\u315f\u0f44l\u0200;ips\u0f78\u3158\u315b\u109cn\xe5\u10bbar\xf4\u0fa9t;\u65ad\u0180ilr\u3169\u1023\u316esht;\u697d;\uc000\ud835\udd2f\u0100ao\u3177\u3186r\u0100du\u317d\u317f\xbb\u047b\u0100;l\u1091\u3184;\u696c\u0100;v\u318b\u318c\u43c1;\u43f1\u0180gns\u3195\u31f9\u31fcht\u0300ahlrst\u31a4\u31b0\u31c2\u31d8\u31e4\u31eerrow\u0100;t\u0fdc\u31ada\xe9\u30c8arpoon\u0100du\u31bb\u31bfow\xee\u317ep\xbb\u1092eft\u0100ah\u31ca\u31d0rrow\xf3\u0feaarpoon\xf3\u0551ightarrows;\u61c9quigarro\xf7\u30cbhreetimes;\u62ccg;\u42daingdotse\xf1\u1f32\u0180ahm\u320d\u3210\u3213r\xf2\u0feaa\xf2\u0551;\u600foust\u0100;a\u321e\u321f\u63b1che\xbb\u321fmid;\u6aee\u0200abpt\u3232\u323d\u3240\u3252\u0100nr\u3237\u323ag;\u67edr;\u61fer\xeb\u1003\u0180afl\u3247\u324a\u324er;\u6986;\uc000\ud835\udd63us;\u6a2eimes;\u6a35\u0100ap\u325d\u3267r\u0100;g\u3263\u3264\u4029t;\u6994olint;\u6a12ar\xf2\u31e3\u0200achq\u327b\u3280\u10bc\u3285quo;\u603ar;\uc000\ud835\udcc7\u0100bu\u30fb\u328ao\u0100;r\u0214\u0213\u0180hir\u3297\u329b\u32a0re\xe5\u31f8mes;\u62cai\u0200;efl\u32aa\u1059\u1821\u32ab\u65b9tri;\u69celuhar;\u6968;\u611e\u0d61\u32d5\u32db\u32df\u332c\u3338\u3371\0\u337a\u33a4\0\0\u33ec\u33f0\0\u3428\u3448\u345a\u34ad\u34b1\u34ca\u34f1\0\u3616\0\0\u3633cute;\u415bqu\xef\u27ba\u0500;Eaceinpsy\u11ed\u32f3\u32f5\u32ff\u3302\u330b\u330f\u331f\u3326\u3329;\u6ab4\u01f0\u32fa\0\u32fc;\u6ab8on;\u4161u\xe5\u11fe\u0100;d\u11f3\u3307il;\u415frc;\u415d\u0180Eas\u3316\u3318\u331b;\u6ab6p;\u6abaim;\u62e9olint;\u6a13i\xed\u1204;\u4441ot\u0180;be\u3334\u1d47\u3335\u62c5;\u6a66\u0380Aacmstx\u3346\u334a\u3357\u335b\u335e\u3363\u336drr;\u61d8r\u0100hr\u3350\u3352\xeb\u2228\u0100;o\u0a36\u0a34t\u803b\xa7\u40a7i;\u403bwar;\u6929m\u0100in\u3369\xf0nu\xf3\xf1t;\u6736r\u0100;o\u3376\u2055\uc000\ud835\udd30\u0200acoy\u3382\u3386\u3391\u33a0rp;\u666f\u0100hy\u338b\u338fcy;\u4449;\u4448rt\u026d\u3399\0\0\u339ci\xe4\u1464ara\xec\u2e6f\u803b\xad\u40ad\u0100gm\u33a8\u33b4ma\u0180;fv\u33b1\u33b2\u33b2\u43c3;\u43c2\u0400;deglnpr\u12ab\u33c5\u33c9\u33ce\u33d6\u33de\u33e1\u33e6ot;\u6a6a\u0100;q\u12b1\u12b0\u0100;E\u33d3\u33d4\u6a9e;\u6aa0\u0100;E\u33db\u33dc\u6a9d;\u6a9fe;\u6246lus;\u6a24arr;\u6972ar\xf2\u113d\u0200aeit\u33f8\u3408\u340f\u3417\u0100ls\u33fd\u3404lsetm\xe9\u336ahp;\u6a33parsl;\u69e4\u0100dl\u1463\u3414e;\u6323\u0100;e\u341c\u341d\u6aaa\u0100;s\u3422\u3423\u6aac;\uc000\u2aac\ufe00\u0180flp\u342e\u3433\u3442tcy;\u444c\u0100;b\u3438\u3439\u402f\u0100;a\u343e\u343f\u69c4r;\u633ff;\uc000\ud835\udd64a\u0100dr\u344d\u0402es\u0100;u\u3454\u3455\u6660it\xbb\u3455\u0180csu\u3460\u3479\u349f\u0100au\u3465\u346fp\u0100;s\u1188\u346b;\uc000\u2293\ufe00p\u0100;s\u11b4\u3475;\uc000\u2294\ufe00u\u0100bp\u347f\u348f\u0180;es\u1197\u119c\u3486et\u0100;e\u1197\u348d\xf1\u119d\u0180;es\u11a8\u11ad\u3496et\u0100;e\u11a8\u349d\xf1\u11ae\u0180;af\u117b\u34a6\u05b0r\u0165\u34ab\u05b1\xbb\u117car\xf2\u1148\u0200cemt\u34b9\u34be\u34c2\u34c5r;\uc000\ud835\udcc8tm\xee\xf1i\xec\u3415ar\xe6\u11be\u0100ar\u34ce\u34d5r\u0100;f\u34d4\u17bf\u6606\u0100an\u34da\u34edight\u0100ep\u34e3\u34eapsilo\xee\u1ee0h\xe9\u2eafs\xbb\u2852\u0280bcmnp\u34fb\u355e\u1209\u358b\u358e\u0480;Edemnprs\u350e\u350f\u3511\u3515\u351e\u3523\u352c\u3531\u3536\u6282;\u6ac5ot;\u6abd\u0100;d\u11da\u351aot;\u6ac3ult;\u6ac1\u0100Ee\u3528\u352a;\u6acb;\u628alus;\u6abfarr;\u6979\u0180eiu\u353d\u3552\u3555t\u0180;en\u350e\u3545\u354bq\u0100;q\u11da\u350feq\u0100;q\u352b\u3528m;\u6ac7\u0100bp\u355a\u355c;\u6ad5;\u6ad3c\u0300;acens\u11ed\u356c\u3572\u3579\u357b\u3326ppro\xf8\u32faurlye\xf1\u11fe\xf1\u11f3\u0180aes\u3582\u3588\u331bppro\xf8\u331aq\xf1\u3317g;\u666a\u0680123;Edehlmnps\u35a9\u35ac\u35af\u121c\u35b2\u35b4\u35c0\u35c9\u35d5\u35da\u35df\u35e8\u35ed\u803b\xb9\u40b9\u803b\xb2\u40b2\u803b\xb3\u40b3;\u6ac6\u0100os\u35b9\u35bct;\u6abeub;\u6ad8\u0100;d\u1222\u35c5ot;\u6ac4s\u0100ou\u35cf\u35d2l;\u67c9b;\u6ad7arr;\u697bult;\u6ac2\u0100Ee\u35e4\u35e6;\u6acc;\u628blus;\u6ac0\u0180eiu\u35f4\u3609\u360ct\u0180;en\u121c\u35fc\u3602q\u0100;q\u1222\u35b2eq\u0100;q\u35e7\u35e4m;\u6ac8\u0100bp\u3611\u3613;\u6ad4;\u6ad6\u0180Aan\u361c\u3620\u362drr;\u61d9r\u0100hr\u3626\u3628\xeb\u222e\u0100;o\u0a2b\u0a29war;\u692alig\u803b\xdf\u40df\u0be1\u3651\u365d\u3660\u12ce\u3673\u3679\0\u367e\u36c2\0\0\0\0\0\u36db\u3703\0\u3709\u376c\0\0\0\u3787\u0272\u3656\0\0\u365bget;\u6316;\u43c4r\xeb\u0e5f\u0180aey\u3666\u366b\u3670ron;\u4165dil;\u4163;\u4442lrec;\u6315r;\uc000\ud835\udd31\u0200eiko\u3686\u369d\u36b5\u36bc\u01f2\u368b\0\u3691e\u01004f\u1284\u1281a\u0180;sv\u3698\u3699\u369b\u43b8ym;\u43d1\u0100cn\u36a2\u36b2k\u0100as\u36a8\u36aeppro\xf8\u12c1im\xbb\u12acs\xf0\u129e\u0100as\u36ba\u36ae\xf0\u12c1rn\u803b\xfe\u40fe\u01ec\u031f\u36c6\u22e7es\u8180\xd7;bd\u36cf\u36d0\u36d8\u40d7\u0100;a\u190f\u36d5r;\u6a31;\u6a30\u0180eps\u36e1\u36e3\u3700\xe1\u2a4d\u0200;bcf\u0486\u36ec\u36f0\u36f4ot;\u6336ir;\u6af1\u0100;o\u36f9\u36fc\uc000\ud835\udd65rk;\u6ada\xe1\u3362rime;\u6034\u0180aip\u370f\u3712\u3764d\xe5\u1248\u0380adempst\u3721\u374d\u3740\u3751\u3757\u375c\u375fngle\u0280;dlqr\u3730\u3731\u3736\u3740\u3742\u65b5own\xbb\u1dbbeft\u0100;e\u2800\u373e\xf1\u092e;\u625cight\u0100;e\u32aa\u374b\xf1\u105aot;\u65ecinus;\u6a3alus;\u6a39b;\u69cdime;\u6a3bezium;\u63e2\u0180cht\u3772\u377d\u3781\u0100ry\u3777\u377b;\uc000\ud835\udcc9;\u4446cy;\u445brok;\u4167\u0100io\u378b\u378ex\xf4\u1777head\u0100lr\u3797\u37a0eftarro\xf7\u084fightarrow\xbb\u0f5d\u0900AHabcdfghlmoprstuw\u37d0\u37d3\u37d7\u37e4\u37f0\u37fc\u380e\u381c\u3823\u3834\u3851\u385d\u386b\u38a9\u38cc\u38d2\u38ea\u38f6r\xf2\u03edar;\u6963\u0100cr\u37dc\u37e2ute\u803b\xfa\u40fa\xf2\u1150r\u01e3\u37ea\0\u37edy;\u445eve;\u416d\u0100iy\u37f5\u37farc\u803b\xfb\u40fb;\u4443\u0180abh\u3803\u3806\u380br\xf2\u13adlac;\u4171a\xf2\u13c3\u0100ir\u3813\u3818sht;\u697e;\uc000\ud835\udd32rave\u803b\xf9\u40f9\u0161\u3827\u3831r\u0100lr\u382c\u382e\xbb\u0957\xbb\u1083lk;\u6580\u0100ct\u3839\u384d\u026f\u383f\0\0\u384arn\u0100;e\u3845\u3846\u631cr\xbb\u3846op;\u630fri;\u65f8\u0100al\u3856\u385acr;\u416b\u80bb\xa8\u0349\u0100gp\u3862\u3866on;\u4173f;\uc000\ud835\udd66\u0300adhlsu\u114b\u3878\u387d\u1372\u3891\u38a0own\xe1\u13b3arpoon\u0100lr\u3888\u388cef\xf4\u382digh\xf4\u382fi\u0180;hl\u3899\u389a\u389c\u43c5\xbb\u13faon\xbb\u389aparrows;\u61c8\u0180cit\u38b0\u38c4\u38c8\u026f\u38b6\0\0\u38c1rn\u0100;e\u38bc\u38bd\u631dr\xbb\u38bdop;\u630eng;\u416fri;\u65f9cr;\uc000\ud835\udcca\u0180dir\u38d9\u38dd\u38e2ot;\u62f0lde;\u4169i\u0100;f\u3730\u38e8\xbb\u1813\u0100am\u38ef\u38f2r\xf2\u38a8l\u803b\xfc\u40fcangle;\u69a7\u0780ABDacdeflnoprsz\u391c\u391f\u3929\u392d\u39b5\u39b8\u39bd\u39df\u39e4\u39e8\u39f3\u39f9\u39fd\u3a01\u3a20r\xf2\u03f7ar\u0100;v\u3926\u3927\u6ae8;\u6ae9as\xe8\u03e1\u0100nr\u3932\u3937grt;\u699c\u0380eknprst\u34e3\u3946\u394b\u3952\u395d\u3964\u3996app\xe1\u2415othin\xe7\u1e96\u0180hir\u34eb\u2ec8\u3959op\xf4\u2fb5\u0100;h\u13b7\u3962\xef\u318d\u0100iu\u3969\u396dgm\xe1\u33b3\u0100bp\u3972\u3984setneq\u0100;q\u397d\u3980\uc000\u228a\ufe00;\uc000\u2acb\ufe00setneq\u0100;q\u398f\u3992\uc000\u228b\ufe00;\uc000\u2acc\ufe00\u0100hr\u399b\u399fet\xe1\u369ciangle\u0100lr\u39aa\u39afeft\xbb\u0925ight\xbb\u1051y;\u4432ash\xbb\u1036\u0180elr\u39c4\u39d2\u39d7\u0180;be\u2dea\u39cb\u39cfar;\u62bbq;\u625alip;\u62ee\u0100bt\u39dc\u1468a\xf2\u1469r;\uc000\ud835\udd33tr\xe9\u39aesu\u0100bp\u39ef\u39f1\xbb\u0d1c\xbb\u0d59pf;\uc000\ud835\udd67ro\xf0\u0efbtr\xe9\u39b4\u0100cu\u3a06\u3a0br;\uc000\ud835\udccb\u0100bp\u3a10\u3a18n\u0100Ee\u3980\u3a16\xbb\u397en\u0100Ee\u3992\u3a1e\xbb\u3990igzag;\u699a\u0380cefoprs\u3a36\u3a3b\u3a56\u3a5b\u3a54\u3a61\u3a6airc;\u4175\u0100di\u3a40\u3a51\u0100bg\u3a45\u3a49ar;\u6a5fe\u0100;q\u15fa\u3a4f;\u6259erp;\u6118r;\uc000\ud835\udd34pf;\uc000\ud835\udd68\u0100;e\u1479\u3a66at\xe8\u1479cr;\uc000\ud835\udccc\u0ae3\u178e\u3a87\0\u3a8b\0\u3a90\u3a9b\0\0\u3a9d\u3aa8\u3aab\u3aaf\0\0\u3ac3\u3ace\0\u3ad8\u17dc\u17dftr\xe9\u17d1r;\uc000\ud835\udd35\u0100Aa\u3a94\u3a97r\xf2\u03c3r\xf2\u09f6;\u43be\u0100Aa\u3aa1\u3aa4r\xf2\u03b8r\xf2\u09eba\xf0\u2713is;\u62fb\u0180dpt\u17a4\u3ab5\u3abe\u0100fl\u3aba\u17a9;\uc000\ud835\udd69im\xe5\u17b2\u0100Aa\u3ac7\u3acar\xf2\u03cer\xf2\u0a01\u0100cq\u3ad2\u17b8r;\uc000\ud835\udccd\u0100pt\u17d6\u3adcr\xe9\u17d4\u0400acefiosu\u3af0\u3afd\u3b08\u3b0c\u3b11\u3b15\u3b1b\u3b21c\u0100uy\u3af6\u3afbte\u803b\xfd\u40fd;\u444f\u0100iy\u3b02\u3b06rc;\u4177;\u444bn\u803b\xa5\u40a5r;\uc000\ud835\udd36cy;\u4457pf;\uc000\ud835\udd6acr;\uc000\ud835\udcce\u0100cm\u3b26\u3b29y;\u444el\u803b\xff\u40ff\u0500acdefhiosw\u3b42\u3b48\u3b54\u3b58\u3b64\u3b69\u3b6d\u3b74\u3b7a\u3b80cute;\u417a\u0100ay\u3b4d\u3b52ron;\u417e;\u4437ot;\u417c\u0100et\u3b5d\u3b61tr\xe6\u155fa;\u43b6r;\uc000\ud835\udd37cy;\u4436grarr;\u61ddpf;\uc000\ud835\udd6bcr;\uc000\ud835\udccf\u0100jn\u3b85\u3b87;\u600dj;\u600c"
    .split("")
    .map((c) => c.charCodeAt(0))));
//# sourceMappingURL=decode-data-html.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/entities/lib/esm/generated/decode-data-xml.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/entities/lib/esm/generated/decode-data-xml.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// Generated using scripts/write-decode-map.ts
/* harmony default export */ __webpack_exports__["default"] = (new Uint16Array(
// prettier-ignore
"\u0200aglq\t\x15\x18\x1b\u026d\x0f\0\0\x12p;\u4026os;\u4027t;\u403et;\u403cuot;\u4022"
    .split("")
    .map((c) => c.charCodeAt(0))));
//# sourceMappingURL=decode-data-xml.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/entities/lib/esm/generated/encode-html.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/entities/lib/esm/generated/encode-html.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// Generated using scripts/write-encode-map.ts
function restoreDiff(arr) {
    for (let i = 1; i < arr.length; i++) {
        arr[i][0] += arr[i - 1][0] + 1;
    }
    return arr;
}
// prettier-ignore
/* harmony default export */ __webpack_exports__["default"] = (new Map(/* #__PURE__ */ restoreDiff([[9, "&Tab;"], [0, "&NewLine;"], [22, "&excl;"], [0, "&quot;"], [0, "&num;"], [0, "&dollar;"], [0, "&percnt;"], [0, "&amp;"], [0, "&apos;"], [0, "&lpar;"], [0, "&rpar;"], [0, "&ast;"], [0, "&plus;"], [0, "&comma;"], [1, "&period;"], [0, "&sol;"], [10, "&colon;"], [0, "&semi;"], [0, { v: "&lt;", n: 8402, o: "&nvlt;" }], [0, { v: "&equals;", n: 8421, o: "&bne;" }], [0, { v: "&gt;", n: 8402, o: "&nvgt;" }], [0, "&quest;"], [0, "&commat;"], [26, "&lbrack;"], [0, "&bsol;"], [0, "&rbrack;"], [0, "&Hat;"], [0, "&lowbar;"], [0, "&DiacriticalGrave;"], [5, { n: 106, o: "&fjlig;" }], [20, "&lbrace;"], [0, "&verbar;"], [0, "&rbrace;"], [34, "&nbsp;"], [0, "&iexcl;"], [0, "&cent;"], [0, "&pound;"], [0, "&curren;"], [0, "&yen;"], [0, "&brvbar;"], [0, "&sect;"], [0, "&die;"], [0, "&copy;"], [0, "&ordf;"], [0, "&laquo;"], [0, "&not;"], [0, "&shy;"], [0, "&circledR;"], [0, "&macr;"], [0, "&deg;"], [0, "&PlusMinus;"], [0, "&sup2;"], [0, "&sup3;"], [0, "&acute;"], [0, "&micro;"], [0, "&para;"], [0, "&centerdot;"], [0, "&cedil;"], [0, "&sup1;"], [0, "&ordm;"], [0, "&raquo;"], [0, "&frac14;"], [0, "&frac12;"], [0, "&frac34;"], [0, "&iquest;"], [0, "&Agrave;"], [0, "&Aacute;"], [0, "&Acirc;"], [0, "&Atilde;"], [0, "&Auml;"], [0, "&angst;"], [0, "&AElig;"], [0, "&Ccedil;"], [0, "&Egrave;"], [0, "&Eacute;"], [0, "&Ecirc;"], [0, "&Euml;"], [0, "&Igrave;"], [0, "&Iacute;"], [0, "&Icirc;"], [0, "&Iuml;"], [0, "&ETH;"], [0, "&Ntilde;"], [0, "&Ograve;"], [0, "&Oacute;"], [0, "&Ocirc;"], [0, "&Otilde;"], [0, "&Ouml;"], [0, "&times;"], [0, "&Oslash;"], [0, "&Ugrave;"], [0, "&Uacute;"], [0, "&Ucirc;"], [0, "&Uuml;"], [0, "&Yacute;"], [0, "&THORN;"], [0, "&szlig;"], [0, "&agrave;"], [0, "&aacute;"], [0, "&acirc;"], [0, "&atilde;"], [0, "&auml;"], [0, "&aring;"], [0, "&aelig;"], [0, "&ccedil;"], [0, "&egrave;"], [0, "&eacute;"], [0, "&ecirc;"], [0, "&euml;"], [0, "&igrave;"], [0, "&iacute;"], [0, "&icirc;"], [0, "&iuml;"], [0, "&eth;"], [0, "&ntilde;"], [0, "&ograve;"], [0, "&oacute;"], [0, "&ocirc;"], [0, "&otilde;"], [0, "&ouml;"], [0, "&div;"], [0, "&oslash;"], [0, "&ugrave;"], [0, "&uacute;"], [0, "&ucirc;"], [0, "&uuml;"], [0, "&yacute;"], [0, "&thorn;"], [0, "&yuml;"], [0, "&Amacr;"], [0, "&amacr;"], [0, "&Abreve;"], [0, "&abreve;"], [0, "&Aogon;"], [0, "&aogon;"], [0, "&Cacute;"], [0, "&cacute;"], [0, "&Ccirc;"], [0, "&ccirc;"], [0, "&Cdot;"], [0, "&cdot;"], [0, "&Ccaron;"], [0, "&ccaron;"], [0, "&Dcaron;"], [0, "&dcaron;"], [0, "&Dstrok;"], [0, "&dstrok;"], [0, "&Emacr;"], [0, "&emacr;"], [2, "&Edot;"], [0, "&edot;"], [0, "&Eogon;"], [0, "&eogon;"], [0, "&Ecaron;"], [0, "&ecaron;"], [0, "&Gcirc;"], [0, "&gcirc;"], [0, "&Gbreve;"], [0, "&gbreve;"], [0, "&Gdot;"], [0, "&gdot;"], [0, "&Gcedil;"], [1, "&Hcirc;"], [0, "&hcirc;"], [0, "&Hstrok;"], [0, "&hstrok;"], [0, "&Itilde;"], [0, "&itilde;"], [0, "&Imacr;"], [0, "&imacr;"], [2, "&Iogon;"], [0, "&iogon;"], [0, "&Idot;"], [0, "&imath;"], [0, "&IJlig;"], [0, "&ijlig;"], [0, "&Jcirc;"], [0, "&jcirc;"], [0, "&Kcedil;"], [0, "&kcedil;"], [0, "&kgreen;"], [0, "&Lacute;"], [0, "&lacute;"], [0, "&Lcedil;"], [0, "&lcedil;"], [0, "&Lcaron;"], [0, "&lcaron;"], [0, "&Lmidot;"], [0, "&lmidot;"], [0, "&Lstrok;"], [0, "&lstrok;"], [0, "&Nacute;"], [0, "&nacute;"], [0, "&Ncedil;"], [0, "&ncedil;"], [0, "&Ncaron;"], [0, "&ncaron;"], [0, "&napos;"], [0, "&ENG;"], [0, "&eng;"], [0, "&Omacr;"], [0, "&omacr;"], [2, "&Odblac;"], [0, "&odblac;"], [0, "&OElig;"], [0, "&oelig;"], [0, "&Racute;"], [0, "&racute;"], [0, "&Rcedil;"], [0, "&rcedil;"], [0, "&Rcaron;"], [0, "&rcaron;"], [0, "&Sacute;"], [0, "&sacute;"], [0, "&Scirc;"], [0, "&scirc;"], [0, "&Scedil;"], [0, "&scedil;"], [0, "&Scaron;"], [0, "&scaron;"], [0, "&Tcedil;"], [0, "&tcedil;"], [0, "&Tcaron;"], [0, "&tcaron;"], [0, "&Tstrok;"], [0, "&tstrok;"], [0, "&Utilde;"], [0, "&utilde;"], [0, "&Umacr;"], [0, "&umacr;"], [0, "&Ubreve;"], [0, "&ubreve;"], [0, "&Uring;"], [0, "&uring;"], [0, "&Udblac;"], [0, "&udblac;"], [0, "&Uogon;"], [0, "&uogon;"], [0, "&Wcirc;"], [0, "&wcirc;"], [0, "&Ycirc;"], [0, "&ycirc;"], [0, "&Yuml;"], [0, "&Zacute;"], [0, "&zacute;"], [0, "&Zdot;"], [0, "&zdot;"], [0, "&Zcaron;"], [0, "&zcaron;"], [19, "&fnof;"], [34, "&imped;"], [63, "&gacute;"], [65, "&jmath;"], [142, "&circ;"], [0, "&caron;"], [16, "&breve;"], [0, "&DiacriticalDot;"], [0, "&ring;"], [0, "&ogon;"], [0, "&DiacriticalTilde;"], [0, "&dblac;"], [51, "&DownBreve;"], [127, "&Alpha;"], [0, "&Beta;"], [0, "&Gamma;"], [0, "&Delta;"], [0, "&Epsilon;"], [0, "&Zeta;"], [0, "&Eta;"], [0, "&Theta;"], [0, "&Iota;"], [0, "&Kappa;"], [0, "&Lambda;"], [0, "&Mu;"], [0, "&Nu;"], [0, "&Xi;"], [0, "&Omicron;"], [0, "&Pi;"], [0, "&Rho;"], [1, "&Sigma;"], [0, "&Tau;"], [0, "&Upsilon;"], [0, "&Phi;"], [0, "&Chi;"], [0, "&Psi;"], [0, "&ohm;"], [7, "&alpha;"], [0, "&beta;"], [0, "&gamma;"], [0, "&delta;"], [0, "&epsi;"], [0, "&zeta;"], [0, "&eta;"], [0, "&theta;"], [0, "&iota;"], [0, "&kappa;"], [0, "&lambda;"], [0, "&mu;"], [0, "&nu;"], [0, "&xi;"], [0, "&omicron;"], [0, "&pi;"], [0, "&rho;"], [0, "&sigmaf;"], [0, "&sigma;"], [0, "&tau;"], [0, "&upsi;"], [0, "&phi;"], [0, "&chi;"], [0, "&psi;"], [0, "&omega;"], [7, "&thetasym;"], [0, "&Upsi;"], [2, "&phiv;"], [0, "&piv;"], [5, "&Gammad;"], [0, "&digamma;"], [18, "&kappav;"], [0, "&rhov;"], [3, "&epsiv;"], [0, "&backepsilon;"], [10, "&IOcy;"], [0, "&DJcy;"], [0, "&GJcy;"], [0, "&Jukcy;"], [0, "&DScy;"], [0, "&Iukcy;"], [0, "&YIcy;"], [0, "&Jsercy;"], [0, "&LJcy;"], [0, "&NJcy;"], [0, "&TSHcy;"], [0, "&KJcy;"], [1, "&Ubrcy;"], [0, "&DZcy;"], [0, "&Acy;"], [0, "&Bcy;"], [0, "&Vcy;"], [0, "&Gcy;"], [0, "&Dcy;"], [0, "&IEcy;"], [0, "&ZHcy;"], [0, "&Zcy;"], [0, "&Icy;"], [0, "&Jcy;"], [0, "&Kcy;"], [0, "&Lcy;"], [0, "&Mcy;"], [0, "&Ncy;"], [0, "&Ocy;"], [0, "&Pcy;"], [0, "&Rcy;"], [0, "&Scy;"], [0, "&Tcy;"], [0, "&Ucy;"], [0, "&Fcy;"], [0, "&KHcy;"], [0, "&TScy;"], [0, "&CHcy;"], [0, "&SHcy;"], [0, "&SHCHcy;"], [0, "&HARDcy;"], [0, "&Ycy;"], [0, "&SOFTcy;"], [0, "&Ecy;"], [0, "&YUcy;"], [0, "&YAcy;"], [0, "&acy;"], [0, "&bcy;"], [0, "&vcy;"], [0, "&gcy;"], [0, "&dcy;"], [0, "&iecy;"], [0, "&zhcy;"], [0, "&zcy;"], [0, "&icy;"], [0, "&jcy;"], [0, "&kcy;"], [0, "&lcy;"], [0, "&mcy;"], [0, "&ncy;"], [0, "&ocy;"], [0, "&pcy;"], [0, "&rcy;"], [0, "&scy;"], [0, "&tcy;"], [0, "&ucy;"], [0, "&fcy;"], [0, "&khcy;"], [0, "&tscy;"], [0, "&chcy;"], [0, "&shcy;"], [0, "&shchcy;"], [0, "&hardcy;"], [0, "&ycy;"], [0, "&softcy;"], [0, "&ecy;"], [0, "&yucy;"], [0, "&yacy;"], [1, "&iocy;"], [0, "&djcy;"], [0, "&gjcy;"], [0, "&jukcy;"], [0, "&dscy;"], [0, "&iukcy;"], [0, "&yicy;"], [0, "&jsercy;"], [0, "&ljcy;"], [0, "&njcy;"], [0, "&tshcy;"], [0, "&kjcy;"], [1, "&ubrcy;"], [0, "&dzcy;"], [7074, "&ensp;"], [0, "&emsp;"], [0, "&emsp13;"], [0, "&emsp14;"], [1, "&numsp;"], [0, "&puncsp;"], [0, "&ThinSpace;"], [0, "&hairsp;"], [0, "&NegativeMediumSpace;"], [0, "&zwnj;"], [0, "&zwj;"], [0, "&lrm;"], [0, "&rlm;"], [0, "&dash;"], [2, "&ndash;"], [0, "&mdash;"], [0, "&horbar;"], [0, "&Verbar;"], [1, "&lsquo;"], [0, "&CloseCurlyQuote;"], [0, "&lsquor;"], [1, "&ldquo;"], [0, "&CloseCurlyDoubleQuote;"], [0, "&bdquo;"], [1, "&dagger;"], [0, "&Dagger;"], [0, "&bull;"], [2, "&nldr;"], [0, "&hellip;"], [9, "&permil;"], [0, "&pertenk;"], [0, "&prime;"], [0, "&Prime;"], [0, "&tprime;"], [0, "&backprime;"], [3, "&lsaquo;"], [0, "&rsaquo;"], [3, "&oline;"], [2, "&caret;"], [1, "&hybull;"], [0, "&frasl;"], [10, "&bsemi;"], [7, "&qprime;"], [7, { v: "&MediumSpace;", n: 8202, o: "&ThickSpace;" }], [0, "&NoBreak;"], [0, "&af;"], [0, "&InvisibleTimes;"], [0, "&ic;"], [72, "&euro;"], [46, "&tdot;"], [0, "&DotDot;"], [37, "&complexes;"], [2, "&incare;"], [4, "&gscr;"], [0, "&hamilt;"], [0, "&Hfr;"], [0, "&Hopf;"], [0, "&planckh;"], [0, "&hbar;"], [0, "&imagline;"], [0, "&Ifr;"], [0, "&lagran;"], [0, "&ell;"], [1, "&naturals;"], [0, "&numero;"], [0, "&copysr;"], [0, "&weierp;"], [0, "&Popf;"], [0, "&Qopf;"], [0, "&realine;"], [0, "&real;"], [0, "&reals;"], [0, "&rx;"], [3, "&trade;"], [1, "&integers;"], [2, "&mho;"], [0, "&zeetrf;"], [0, "&iiota;"], [2, "&bernou;"], [0, "&Cayleys;"], [1, "&escr;"], [0, "&Escr;"], [0, "&Fouriertrf;"], [1, "&Mellintrf;"], [0, "&order;"], [0, "&alefsym;"], [0, "&beth;"], [0, "&gimel;"], [0, "&daleth;"], [12, "&CapitalDifferentialD;"], [0, "&dd;"], [0, "&ee;"], [0, "&ii;"], [10, "&frac13;"], [0, "&frac23;"], [0, "&frac15;"], [0, "&frac25;"], [0, "&frac35;"], [0, "&frac45;"], [0, "&frac16;"], [0, "&frac56;"], [0, "&frac18;"], [0, "&frac38;"], [0, "&frac58;"], [0, "&frac78;"], [49, "&larr;"], [0, "&ShortUpArrow;"], [0, "&rarr;"], [0, "&darr;"], [0, "&harr;"], [0, "&updownarrow;"], [0, "&nwarr;"], [0, "&nearr;"], [0, "&LowerRightArrow;"], [0, "&LowerLeftArrow;"], [0, "&nlarr;"], [0, "&nrarr;"], [1, { v: "&rarrw;", n: 824, o: "&nrarrw;" }], [0, "&Larr;"], [0, "&Uarr;"], [0, "&Rarr;"], [0, "&Darr;"], [0, "&larrtl;"], [0, "&rarrtl;"], [0, "&LeftTeeArrow;"], [0, "&mapstoup;"], [0, "&map;"], [0, "&DownTeeArrow;"], [1, "&hookleftarrow;"], [0, "&hookrightarrow;"], [0, "&larrlp;"], [0, "&looparrowright;"], [0, "&harrw;"], [0, "&nharr;"], [1, "&lsh;"], [0, "&rsh;"], [0, "&ldsh;"], [0, "&rdsh;"], [1, "&crarr;"], [0, "&cularr;"], [0, "&curarr;"], [2, "&circlearrowleft;"], [0, "&circlearrowright;"], [0, "&leftharpoonup;"], [0, "&DownLeftVector;"], [0, "&RightUpVector;"], [0, "&LeftUpVector;"], [0, "&rharu;"], [0, "&DownRightVector;"], [0, "&dharr;"], [0, "&dharl;"], [0, "&RightArrowLeftArrow;"], [0, "&udarr;"], [0, "&LeftArrowRightArrow;"], [0, "&leftleftarrows;"], [0, "&upuparrows;"], [0, "&rightrightarrows;"], [0, "&ddarr;"], [0, "&leftrightharpoons;"], [0, "&Equilibrium;"], [0, "&nlArr;"], [0, "&nhArr;"], [0, "&nrArr;"], [0, "&DoubleLeftArrow;"], [0, "&DoubleUpArrow;"], [0, "&DoubleRightArrow;"], [0, "&dArr;"], [0, "&DoubleLeftRightArrow;"], [0, "&DoubleUpDownArrow;"], [0, "&nwArr;"], [0, "&neArr;"], [0, "&seArr;"], [0, "&swArr;"], [0, "&lAarr;"], [0, "&rAarr;"], [1, "&zigrarr;"], [6, "&larrb;"], [0, "&rarrb;"], [15, "&DownArrowUpArrow;"], [7, "&loarr;"], [0, "&roarr;"], [0, "&hoarr;"], [0, "&forall;"], [0, "&comp;"], [0, { v: "&part;", n: 824, o: "&npart;" }], [0, "&exist;"], [0, "&nexist;"], [0, "&empty;"], [1, "&Del;"], [0, "&Element;"], [0, "&NotElement;"], [1, "&ni;"], [0, "&notni;"], [2, "&prod;"], [0, "&coprod;"], [0, "&sum;"], [0, "&minus;"], [0, "&MinusPlus;"], [0, "&dotplus;"], [1, "&Backslash;"], [0, "&lowast;"], [0, "&compfn;"], [1, "&radic;"], [2, "&prop;"], [0, "&infin;"], [0, "&angrt;"], [0, { v: "&ang;", n: 8402, o: "&nang;" }], [0, "&angmsd;"], [0, "&angsph;"], [0, "&mid;"], [0, "&nmid;"], [0, "&DoubleVerticalBar;"], [0, "&NotDoubleVerticalBar;"], [0, "&and;"], [0, "&or;"], [0, { v: "&cap;", n: 65024, o: "&caps;" }], [0, { v: "&cup;", n: 65024, o: "&cups;" }], [0, "&int;"], [0, "&Int;"], [0, "&iiint;"], [0, "&conint;"], [0, "&Conint;"], [0, "&Cconint;"], [0, "&cwint;"], [0, "&ClockwiseContourIntegral;"], [0, "&awconint;"], [0, "&there4;"], [0, "&becaus;"], [0, "&ratio;"], [0, "&Colon;"], [0, "&dotminus;"], [1, "&mDDot;"], [0, "&homtht;"], [0, { v: "&sim;", n: 8402, o: "&nvsim;" }], [0, { v: "&backsim;", n: 817, o: "&race;" }], [0, { v: "&ac;", n: 819, o: "&acE;" }], [0, "&acd;"], [0, "&VerticalTilde;"], [0, "&NotTilde;"], [0, { v: "&eqsim;", n: 824, o: "&nesim;" }], [0, "&sime;"], [0, "&NotTildeEqual;"], [0, "&cong;"], [0, "&simne;"], [0, "&ncong;"], [0, "&ap;"], [0, "&nap;"], [0, "&ape;"], [0, { v: "&apid;", n: 824, o: "&napid;" }], [0, "&backcong;"], [0, { v: "&asympeq;", n: 8402, o: "&nvap;" }], [0, { v: "&bump;", n: 824, o: "&nbump;" }], [0, { v: "&bumpe;", n: 824, o: "&nbumpe;" }], [0, { v: "&doteq;", n: 824, o: "&nedot;" }], [0, "&doteqdot;"], [0, "&efDot;"], [0, "&erDot;"], [0, "&Assign;"], [0, "&ecolon;"], [0, "&ecir;"], [0, "&circeq;"], [1, "&wedgeq;"], [0, "&veeeq;"], [1, "&triangleq;"], [2, "&equest;"], [0, "&ne;"], [0, { v: "&Congruent;", n: 8421, o: "&bnequiv;" }], [0, "&nequiv;"], [1, { v: "&le;", n: 8402, o: "&nvle;" }], [0, { v: "&ge;", n: 8402, o: "&nvge;" }], [0, { v: "&lE;", n: 824, o: "&nlE;" }], [0, { v: "&gE;", n: 824, o: "&ngE;" }], [0, { v: "&lnE;", n: 65024, o: "&lvertneqq;" }], [0, { v: "&gnE;", n: 65024, o: "&gvertneqq;" }], [0, { v: "&ll;", n: new Map(/* #__PURE__ */ restoreDiff([[824, "&nLtv;"], [7577, "&nLt;"]])) }], [0, { v: "&gg;", n: new Map(/* #__PURE__ */ restoreDiff([[824, "&nGtv;"], [7577, "&nGt;"]])) }], [0, "&between;"], [0, "&NotCupCap;"], [0, "&nless;"], [0, "&ngt;"], [0, "&nle;"], [0, "&nge;"], [0, "&lesssim;"], [0, "&GreaterTilde;"], [0, "&nlsim;"], [0, "&ngsim;"], [0, "&LessGreater;"], [0, "&gl;"], [0, "&NotLessGreater;"], [0, "&NotGreaterLess;"], [0, "&pr;"], [0, "&sc;"], [0, "&prcue;"], [0, "&sccue;"], [0, "&PrecedesTilde;"], [0, { v: "&scsim;", n: 824, o: "&NotSucceedsTilde;" }], [0, "&NotPrecedes;"], [0, "&NotSucceeds;"], [0, { v: "&sub;", n: 8402, o: "&NotSubset;" }], [0, { v: "&sup;", n: 8402, o: "&NotSuperset;" }], [0, "&nsub;"], [0, "&nsup;"], [0, "&sube;"], [0, "&supe;"], [0, "&NotSubsetEqual;"], [0, "&NotSupersetEqual;"], [0, { v: "&subne;", n: 65024, o: "&varsubsetneq;" }], [0, { v: "&supne;", n: 65024, o: "&varsupsetneq;" }], [1, "&cupdot;"], [0, "&UnionPlus;"], [0, { v: "&sqsub;", n: 824, o: "&NotSquareSubset;" }], [0, { v: "&sqsup;", n: 824, o: "&NotSquareSuperset;" }], [0, "&sqsube;"], [0, "&sqsupe;"], [0, { v: "&sqcap;", n: 65024, o: "&sqcaps;" }], [0, { v: "&sqcup;", n: 65024, o: "&sqcups;" }], [0, "&CirclePlus;"], [0, "&CircleMinus;"], [0, "&CircleTimes;"], [0, "&osol;"], [0, "&CircleDot;"], [0, "&circledcirc;"], [0, "&circledast;"], [1, "&circleddash;"], [0, "&boxplus;"], [0, "&boxminus;"], [0, "&boxtimes;"], [0, "&dotsquare;"], [0, "&RightTee;"], [0, "&dashv;"], [0, "&DownTee;"], [0, "&bot;"], [1, "&models;"], [0, "&DoubleRightTee;"], [0, "&Vdash;"], [0, "&Vvdash;"], [0, "&VDash;"], [0, "&nvdash;"], [0, "&nvDash;"], [0, "&nVdash;"], [0, "&nVDash;"], [0, "&prurel;"], [1, "&LeftTriangle;"], [0, "&RightTriangle;"], [0, { v: "&LeftTriangleEqual;", n: 8402, o: "&nvltrie;" }], [0, { v: "&RightTriangleEqual;", n: 8402, o: "&nvrtrie;" }], [0, "&origof;"], [0, "&imof;"], [0, "&multimap;"], [0, "&hercon;"], [0, "&intcal;"], [0, "&veebar;"], [1, "&barvee;"], [0, "&angrtvb;"], [0, "&lrtri;"], [0, "&bigwedge;"], [0, "&bigvee;"], [0, "&bigcap;"], [0, "&bigcup;"], [0, "&diam;"], [0, "&sdot;"], [0, "&sstarf;"], [0, "&divideontimes;"], [0, "&bowtie;"], [0, "&ltimes;"], [0, "&rtimes;"], [0, "&leftthreetimes;"], [0, "&rightthreetimes;"], [0, "&backsimeq;"], [0, "&curlyvee;"], [0, "&curlywedge;"], [0, "&Sub;"], [0, "&Sup;"], [0, "&Cap;"], [0, "&Cup;"], [0, "&fork;"], [0, "&epar;"], [0, "&lessdot;"], [0, "&gtdot;"], [0, { v: "&Ll;", n: 824, o: "&nLl;" }], [0, { v: "&Gg;", n: 824, o: "&nGg;" }], [0, { v: "&leg;", n: 65024, o: "&lesg;" }], [0, { v: "&gel;", n: 65024, o: "&gesl;" }], [2, "&cuepr;"], [0, "&cuesc;"], [0, "&NotPrecedesSlantEqual;"], [0, "&NotSucceedsSlantEqual;"], [0, "&NotSquareSubsetEqual;"], [0, "&NotSquareSupersetEqual;"], [2, "&lnsim;"], [0, "&gnsim;"], [0, "&precnsim;"], [0, "&scnsim;"], [0, "&nltri;"], [0, "&NotRightTriangle;"], [0, "&nltrie;"], [0, "&NotRightTriangleEqual;"], [0, "&vellip;"], [0, "&ctdot;"], [0, "&utdot;"], [0, "&dtdot;"], [0, "&disin;"], [0, "&isinsv;"], [0, "&isins;"], [0, { v: "&isindot;", n: 824, o: "&notindot;" }], [0, "&notinvc;"], [0, "&notinvb;"], [1, { v: "&isinE;", n: 824, o: "&notinE;" }], [0, "&nisd;"], [0, "&xnis;"], [0, "&nis;"], [0, "&notnivc;"], [0, "&notnivb;"], [6, "&barwed;"], [0, "&Barwed;"], [1, "&lceil;"], [0, "&rceil;"], [0, "&LeftFloor;"], [0, "&rfloor;"], [0, "&drcrop;"], [0, "&dlcrop;"], [0, "&urcrop;"], [0, "&ulcrop;"], [0, "&bnot;"], [1, "&profline;"], [0, "&profsurf;"], [1, "&telrec;"], [0, "&target;"], [5, "&ulcorn;"], [0, "&urcorn;"], [0, "&dlcorn;"], [0, "&drcorn;"], [2, "&frown;"], [0, "&smile;"], [9, "&cylcty;"], [0, "&profalar;"], [7, "&topbot;"], [6, "&ovbar;"], [1, "&solbar;"], [60, "&angzarr;"], [51, "&lmoustache;"], [0, "&rmoustache;"], [2, "&OverBracket;"], [0, "&bbrk;"], [0, "&bbrktbrk;"], [37, "&OverParenthesis;"], [0, "&UnderParenthesis;"], [0, "&OverBrace;"], [0, "&UnderBrace;"], [2, "&trpezium;"], [4, "&elinters;"], [59, "&blank;"], [164, "&circledS;"], [55, "&boxh;"], [1, "&boxv;"], [9, "&boxdr;"], [3, "&boxdl;"], [3, "&boxur;"], [3, "&boxul;"], [3, "&boxvr;"], [7, "&boxvl;"], [7, "&boxhd;"], [7, "&boxhu;"], [7, "&boxvh;"], [19, "&boxH;"], [0, "&boxV;"], [0, "&boxdR;"], [0, "&boxDr;"], [0, "&boxDR;"], [0, "&boxdL;"], [0, "&boxDl;"], [0, "&boxDL;"], [0, "&boxuR;"], [0, "&boxUr;"], [0, "&boxUR;"], [0, "&boxuL;"], [0, "&boxUl;"], [0, "&boxUL;"], [0, "&boxvR;"], [0, "&boxVr;"], [0, "&boxVR;"], [0, "&boxvL;"], [0, "&boxVl;"], [0, "&boxVL;"], [0, "&boxHd;"], [0, "&boxhD;"], [0, "&boxHD;"], [0, "&boxHu;"], [0, "&boxhU;"], [0, "&boxHU;"], [0, "&boxvH;"], [0, "&boxVh;"], [0, "&boxVH;"], [19, "&uhblk;"], [3, "&lhblk;"], [3, "&block;"], [8, "&blk14;"], [0, "&blk12;"], [0, "&blk34;"], [13, "&square;"], [8, "&blacksquare;"], [0, "&EmptyVerySmallSquare;"], [1, "&rect;"], [0, "&marker;"], [2, "&fltns;"], [1, "&bigtriangleup;"], [0, "&blacktriangle;"], [0, "&triangle;"], [2, "&blacktriangleright;"], [0, "&rtri;"], [3, "&bigtriangledown;"], [0, "&blacktriangledown;"], [0, "&dtri;"], [2, "&blacktriangleleft;"], [0, "&ltri;"], [6, "&loz;"], [0, "&cir;"], [32, "&tridot;"], [2, "&bigcirc;"], [8, "&ultri;"], [0, "&urtri;"], [0, "&lltri;"], [0, "&EmptySmallSquare;"], [0, "&FilledSmallSquare;"], [8, "&bigstar;"], [0, "&star;"], [7, "&phone;"], [49, "&female;"], [1, "&male;"], [29, "&spades;"], [2, "&clubs;"], [1, "&hearts;"], [0, "&diamondsuit;"], [3, "&sung;"], [2, "&flat;"], [0, "&natural;"], [0, "&sharp;"], [163, "&check;"], [3, "&cross;"], [8, "&malt;"], [21, "&sext;"], [33, "&VerticalSeparator;"], [25, "&lbbrk;"], [0, "&rbbrk;"], [84, "&bsolhsub;"], [0, "&suphsol;"], [28, "&LeftDoubleBracket;"], [0, "&RightDoubleBracket;"], [0, "&lang;"], [0, "&rang;"], [0, "&Lang;"], [0, "&Rang;"], [0, "&loang;"], [0, "&roang;"], [7, "&longleftarrow;"], [0, "&longrightarrow;"], [0, "&longleftrightarrow;"], [0, "&DoubleLongLeftArrow;"], [0, "&DoubleLongRightArrow;"], [0, "&DoubleLongLeftRightArrow;"], [1, "&longmapsto;"], [2, "&dzigrarr;"], [258, "&nvlArr;"], [0, "&nvrArr;"], [0, "&nvHarr;"], [0, "&Map;"], [6, "&lbarr;"], [0, "&bkarow;"], [0, "&lBarr;"], [0, "&dbkarow;"], [0, "&drbkarow;"], [0, "&DDotrahd;"], [0, "&UpArrowBar;"], [0, "&DownArrowBar;"], [2, "&Rarrtl;"], [2, "&latail;"], [0, "&ratail;"], [0, "&lAtail;"], [0, "&rAtail;"], [0, "&larrfs;"], [0, "&rarrfs;"], [0, "&larrbfs;"], [0, "&rarrbfs;"], [2, "&nwarhk;"], [0, "&nearhk;"], [0, "&hksearow;"], [0, "&hkswarow;"], [0, "&nwnear;"], [0, "&nesear;"], [0, "&seswar;"], [0, "&swnwar;"], [8, { v: "&rarrc;", n: 824, o: "&nrarrc;" }], [1, "&cudarrr;"], [0, "&ldca;"], [0, "&rdca;"], [0, "&cudarrl;"], [0, "&larrpl;"], [2, "&curarrm;"], [0, "&cularrp;"], [7, "&rarrpl;"], [2, "&harrcir;"], [0, "&Uarrocir;"], [0, "&lurdshar;"], [0, "&ldrushar;"], [2, "&LeftRightVector;"], [0, "&RightUpDownVector;"], [0, "&DownLeftRightVector;"], [0, "&LeftUpDownVector;"], [0, "&LeftVectorBar;"], [0, "&RightVectorBar;"], [0, "&RightUpVectorBar;"], [0, "&RightDownVectorBar;"], [0, "&DownLeftVectorBar;"], [0, "&DownRightVectorBar;"], [0, "&LeftUpVectorBar;"], [0, "&LeftDownVectorBar;"], [0, "&LeftTeeVector;"], [0, "&RightTeeVector;"], [0, "&RightUpTeeVector;"], [0, "&RightDownTeeVector;"], [0, "&DownLeftTeeVector;"], [0, "&DownRightTeeVector;"], [0, "&LeftUpTeeVector;"], [0, "&LeftDownTeeVector;"], [0, "&lHar;"], [0, "&uHar;"], [0, "&rHar;"], [0, "&dHar;"], [0, "&luruhar;"], [0, "&ldrdhar;"], [0, "&ruluhar;"], [0, "&rdldhar;"], [0, "&lharul;"], [0, "&llhard;"], [0, "&rharul;"], [0, "&lrhard;"], [0, "&udhar;"], [0, "&duhar;"], [0, "&RoundImplies;"], [0, "&erarr;"], [0, "&simrarr;"], [0, "&larrsim;"], [0, "&rarrsim;"], [0, "&rarrap;"], [0, "&ltlarr;"], [1, "&gtrarr;"], [0, "&subrarr;"], [1, "&suplarr;"], [0, "&lfisht;"], [0, "&rfisht;"], [0, "&ufisht;"], [0, "&dfisht;"], [5, "&lopar;"], [0, "&ropar;"], [4, "&lbrke;"], [0, "&rbrke;"], [0, "&lbrkslu;"], [0, "&rbrksld;"], [0, "&lbrksld;"], [0, "&rbrkslu;"], [0, "&langd;"], [0, "&rangd;"], [0, "&lparlt;"], [0, "&rpargt;"], [0, "&gtlPar;"], [0, "&ltrPar;"], [3, "&vzigzag;"], [1, "&vangrt;"], [0, "&angrtvbd;"], [6, "&ange;"], [0, "&range;"], [0, "&dwangle;"], [0, "&uwangle;"], [0, "&angmsdaa;"], [0, "&angmsdab;"], [0, "&angmsdac;"], [0, "&angmsdad;"], [0, "&angmsdae;"], [0, "&angmsdaf;"], [0, "&angmsdag;"], [0, "&angmsdah;"], [0, "&bemptyv;"], [0, "&demptyv;"], [0, "&cemptyv;"], [0, "&raemptyv;"], [0, "&laemptyv;"], [0, "&ohbar;"], [0, "&omid;"], [0, "&opar;"], [1, "&operp;"], [1, "&olcross;"], [0, "&odsold;"], [1, "&olcir;"], [0, "&ofcir;"], [0, "&olt;"], [0, "&ogt;"], [0, "&cirscir;"], [0, "&cirE;"], [0, "&solb;"], [0, "&bsolb;"], [3, "&boxbox;"], [3, "&trisb;"], [0, "&rtriltri;"], [0, { v: "&LeftTriangleBar;", n: 824, o: "&NotLeftTriangleBar;" }], [0, { v: "&RightTriangleBar;", n: 824, o: "&NotRightTriangleBar;" }], [11, "&iinfin;"], [0, "&infintie;"], [0, "&nvinfin;"], [4, "&eparsl;"], [0, "&smeparsl;"], [0, "&eqvparsl;"], [5, "&blacklozenge;"], [8, "&RuleDelayed;"], [1, "&dsol;"], [9, "&bigodot;"], [0, "&bigoplus;"], [0, "&bigotimes;"], [1, "&biguplus;"], [1, "&bigsqcup;"], [5, "&iiiint;"], [0, "&fpartint;"], [2, "&cirfnint;"], [0, "&awint;"], [0, "&rppolint;"], [0, "&scpolint;"], [0, "&npolint;"], [0, "&pointint;"], [0, "&quatint;"], [0, "&intlarhk;"], [10, "&pluscir;"], [0, "&plusacir;"], [0, "&simplus;"], [0, "&plusdu;"], [0, "&plussim;"], [0, "&plustwo;"], [1, "&mcomma;"], [0, "&minusdu;"], [2, "&loplus;"], [0, "&roplus;"], [0, "&Cross;"], [0, "&timesd;"], [0, "&timesbar;"], [1, "&smashp;"], [0, "&lotimes;"], [0, "&rotimes;"], [0, "&otimesas;"], [0, "&Otimes;"], [0, "&odiv;"], [0, "&triplus;"], [0, "&triminus;"], [0, "&tritime;"], [0, "&intprod;"], [2, "&amalg;"], [0, "&capdot;"], [1, "&ncup;"], [0, "&ncap;"], [0, "&capand;"], [0, "&cupor;"], [0, "&cupcap;"], [0, "&capcup;"], [0, "&cupbrcap;"], [0, "&capbrcup;"], [0, "&cupcup;"], [0, "&capcap;"], [0, "&ccups;"], [0, "&ccaps;"], [2, "&ccupssm;"], [2, "&And;"], [0, "&Or;"], [0, "&andand;"], [0, "&oror;"], [0, "&orslope;"], [0, "&andslope;"], [1, "&andv;"], [0, "&orv;"], [0, "&andd;"], [0, "&ord;"], [1, "&wedbar;"], [6, "&sdote;"], [3, "&simdot;"], [2, { v: "&congdot;", n: 824, o: "&ncongdot;" }], [0, "&easter;"], [0, "&apacir;"], [0, { v: "&apE;", n: 824, o: "&napE;" }], [0, "&eplus;"], [0, "&pluse;"], [0, "&Esim;"], [0, "&Colone;"], [0, "&Equal;"], [1, "&ddotseq;"], [0, "&equivDD;"], [0, "&ltcir;"], [0, "&gtcir;"], [0, "&ltquest;"], [0, "&gtquest;"], [0, { v: "&leqslant;", n: 824, o: "&nleqslant;" }], [0, { v: "&geqslant;", n: 824, o: "&ngeqslant;" }], [0, "&lesdot;"], [0, "&gesdot;"], [0, "&lesdoto;"], [0, "&gesdoto;"], [0, "&lesdotor;"], [0, "&gesdotol;"], [0, "&lap;"], [0, "&gap;"], [0, "&lne;"], [0, "&gne;"], [0, "&lnap;"], [0, "&gnap;"], [0, "&lEg;"], [0, "&gEl;"], [0, "&lsime;"], [0, "&gsime;"], [0, "&lsimg;"], [0, "&gsiml;"], [0, "&lgE;"], [0, "&glE;"], [0, "&lesges;"], [0, "&gesles;"], [0, "&els;"], [0, "&egs;"], [0, "&elsdot;"], [0, "&egsdot;"], [0, "&el;"], [0, "&eg;"], [2, "&siml;"], [0, "&simg;"], [0, "&simlE;"], [0, "&simgE;"], [0, { v: "&LessLess;", n: 824, o: "&NotNestedLessLess;" }], [0, { v: "&GreaterGreater;", n: 824, o: "&NotNestedGreaterGreater;" }], [1, "&glj;"], [0, "&gla;"], [0, "&ltcc;"], [0, "&gtcc;"], [0, "&lescc;"], [0, "&gescc;"], [0, "&smt;"], [0, "&lat;"], [0, { v: "&smte;", n: 65024, o: "&smtes;" }], [0, { v: "&late;", n: 65024, o: "&lates;" }], [0, "&bumpE;"], [0, { v: "&PrecedesEqual;", n: 824, o: "&NotPrecedesEqual;" }], [0, { v: "&sce;", n: 824, o: "&NotSucceedsEqual;" }], [2, "&prE;"], [0, "&scE;"], [0, "&precneqq;"], [0, "&scnE;"], [0, "&prap;"], [0, "&scap;"], [0, "&precnapprox;"], [0, "&scnap;"], [0, "&Pr;"], [0, "&Sc;"], [0, "&subdot;"], [0, "&supdot;"], [0, "&subplus;"], [0, "&supplus;"], [0, "&submult;"], [0, "&supmult;"], [0, "&subedot;"], [0, "&supedot;"], [0, { v: "&subE;", n: 824, o: "&nsubE;" }], [0, { v: "&supE;", n: 824, o: "&nsupE;" }], [0, "&subsim;"], [0, "&supsim;"], [2, { v: "&subnE;", n: 65024, o: "&varsubsetneqq;" }], [0, { v: "&supnE;", n: 65024, o: "&varsupsetneqq;" }], [2, "&csub;"], [0, "&csup;"], [0, "&csube;"], [0, "&csupe;"], [0, "&subsup;"], [0, "&supsub;"], [0, "&subsub;"], [0, "&supsup;"], [0, "&suphsub;"], [0, "&supdsub;"], [0, "&forkv;"], [0, "&topfork;"], [0, "&mlcp;"], [8, "&Dashv;"], [1, "&Vdashl;"], [0, "&Barv;"], [0, "&vBar;"], [0, "&vBarv;"], [1, "&Vbar;"], [0, "&Not;"], [0, "&bNot;"], [0, "&rnmid;"], [0, "&cirmid;"], [0, "&midcir;"], [0, "&topcir;"], [0, "&nhpar;"], [0, "&parsim;"], [9, { v: "&parsl;", n: 8421, o: "&nparsl;" }], [44343, { n: new Map(/* #__PURE__ */ restoreDiff([[56476, "&Ascr;"], [1, "&Cscr;"], [0, "&Dscr;"], [2, "&Gscr;"], [2, "&Jscr;"], [0, "&Kscr;"], [2, "&Nscr;"], [0, "&Oscr;"], [0, "&Pscr;"], [0, "&Qscr;"], [1, "&Sscr;"], [0, "&Tscr;"], [0, "&Uscr;"], [0, "&Vscr;"], [0, "&Wscr;"], [0, "&Xscr;"], [0, "&Yscr;"], [0, "&Zscr;"], [0, "&ascr;"], [0, "&bscr;"], [0, "&cscr;"], [0, "&dscr;"], [1, "&fscr;"], [1, "&hscr;"], [0, "&iscr;"], [0, "&jscr;"], [0, "&kscr;"], [0, "&lscr;"], [0, "&mscr;"], [0, "&nscr;"], [1, "&pscr;"], [0, "&qscr;"], [0, "&rscr;"], [0, "&sscr;"], [0, "&tscr;"], [0, "&uscr;"], [0, "&vscr;"], [0, "&wscr;"], [0, "&xscr;"], [0, "&yscr;"], [0, "&zscr;"], [52, "&Afr;"], [0, "&Bfr;"], [1, "&Dfr;"], [0, "&Efr;"], [0, "&Ffr;"], [0, "&Gfr;"], [2, "&Jfr;"], [0, "&Kfr;"], [0, "&Lfr;"], [0, "&Mfr;"], [0, "&Nfr;"], [0, "&Ofr;"], [0, "&Pfr;"], [0, "&Qfr;"], [1, "&Sfr;"], [0, "&Tfr;"], [0, "&Ufr;"], [0, "&Vfr;"], [0, "&Wfr;"], [0, "&Xfr;"], [0, "&Yfr;"], [1, "&afr;"], [0, "&bfr;"], [0, "&cfr;"], [0, "&dfr;"], [0, "&efr;"], [0, "&ffr;"], [0, "&gfr;"], [0, "&hfr;"], [0, "&ifr;"], [0, "&jfr;"], [0, "&kfr;"], [0, "&lfr;"], [0, "&mfr;"], [0, "&nfr;"], [0, "&ofr;"], [0, "&pfr;"], [0, "&qfr;"], [0, "&rfr;"], [0, "&sfr;"], [0, "&tfr;"], [0, "&ufr;"], [0, "&vfr;"], [0, "&wfr;"], [0, "&xfr;"], [0, "&yfr;"], [0, "&zfr;"], [0, "&Aopf;"], [0, "&Bopf;"], [1, "&Dopf;"], [0, "&Eopf;"], [0, "&Fopf;"], [0, "&Gopf;"], [1, "&Iopf;"], [0, "&Jopf;"], [0, "&Kopf;"], [0, "&Lopf;"], [0, "&Mopf;"], [1, "&Oopf;"], [3, "&Sopf;"], [0, "&Topf;"], [0, "&Uopf;"], [0, "&Vopf;"], [0, "&Wopf;"], [0, "&Xopf;"], [0, "&Yopf;"], [1, "&aopf;"], [0, "&bopf;"], [0, "&copf;"], [0, "&dopf;"], [0, "&eopf;"], [0, "&fopf;"], [0, "&gopf;"], [0, "&hopf;"], [0, "&iopf;"], [0, "&jopf;"], [0, "&kopf;"], [0, "&lopf;"], [0, "&mopf;"], [0, "&nopf;"], [0, "&oopf;"], [0, "&popf;"], [0, "&qopf;"], [0, "&ropf;"], [0, "&sopf;"], [0, "&topf;"], [0, "&uopf;"], [0, "&vopf;"], [0, "&wopf;"], [0, "&xopf;"], [0, "&yopf;"], [0, "&zopf;"]])) }], [8906, "&fflig;"], [0, "&filig;"], [0, "&fllig;"], [0, "&ffilig;"], [0, "&ffllig;"]])));
//# sourceMappingURL=encode-html.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/entities/lib/esm/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/entities/lib/esm/index.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DecodingMode": function() { return /* binding */ DecodingMode; },
/* harmony export */   "EncodingMode": function() { return /* binding */ EncodingMode; },
/* harmony export */   "EntityLevel": function() { return /* binding */ EntityLevel; },
/* harmony export */   "decode": function() { return /* binding */ decode; },
/* harmony export */   "decodeHTML": function() { return /* reexport safe */ _decode_js__WEBPACK_IMPORTED_MODULE_0__.decodeHTML; },
/* harmony export */   "decodeHTML4": function() { return /* reexport safe */ _decode_js__WEBPACK_IMPORTED_MODULE_0__.decodeHTML; },
/* harmony export */   "decodeHTML4Strict": function() { return /* reexport safe */ _decode_js__WEBPACK_IMPORTED_MODULE_0__.decodeHTMLStrict; },
/* harmony export */   "decodeHTML5": function() { return /* reexport safe */ _decode_js__WEBPACK_IMPORTED_MODULE_0__.decodeHTML; },
/* harmony export */   "decodeHTML5Strict": function() { return /* reexport safe */ _decode_js__WEBPACK_IMPORTED_MODULE_0__.decodeHTMLStrict; },
/* harmony export */   "decodeHTMLStrict": function() { return /* reexport safe */ _decode_js__WEBPACK_IMPORTED_MODULE_0__.decodeHTMLStrict; },
/* harmony export */   "decodeStrict": function() { return /* binding */ decodeStrict; },
/* harmony export */   "decodeXML": function() { return /* reexport safe */ _decode_js__WEBPACK_IMPORTED_MODULE_0__.decodeXML; },
/* harmony export */   "decodeXMLStrict": function() { return /* reexport safe */ _decode_js__WEBPACK_IMPORTED_MODULE_0__.decodeXML; },
/* harmony export */   "encode": function() { return /* binding */ encode; },
/* harmony export */   "encodeHTML": function() { return /* reexport safe */ _encode_js__WEBPACK_IMPORTED_MODULE_1__.encodeHTML; },
/* harmony export */   "encodeHTML4": function() { return /* reexport safe */ _encode_js__WEBPACK_IMPORTED_MODULE_1__.encodeHTML; },
/* harmony export */   "encodeHTML5": function() { return /* reexport safe */ _encode_js__WEBPACK_IMPORTED_MODULE_1__.encodeHTML; },
/* harmony export */   "encodeNonAsciiHTML": function() { return /* reexport safe */ _encode_js__WEBPACK_IMPORTED_MODULE_1__.encodeNonAsciiHTML; },
/* harmony export */   "encodeXML": function() { return /* reexport safe */ _escape_js__WEBPACK_IMPORTED_MODULE_2__.encodeXML; },
/* harmony export */   "escape": function() { return /* reexport safe */ _escape_js__WEBPACK_IMPORTED_MODULE_2__.escape; },
/* harmony export */   "escapeAttribute": function() { return /* reexport safe */ _escape_js__WEBPACK_IMPORTED_MODULE_2__.escapeAttribute; },
/* harmony export */   "escapeText": function() { return /* reexport safe */ _escape_js__WEBPACK_IMPORTED_MODULE_2__.escapeText; },
/* harmony export */   "escapeUTF8": function() { return /* reexport safe */ _escape_js__WEBPACK_IMPORTED_MODULE_2__.escapeUTF8; }
/* harmony export */ });
/* harmony import */ var _decode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./decode.js */ "./node_modules/linkedom/node_modules/entities/lib/esm/decode.js");
/* harmony import */ var _encode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encode.js */ "./node_modules/linkedom/node_modules/entities/lib/esm/encode.js");
/* harmony import */ var _escape_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./escape.js */ "./node_modules/linkedom/node_modules/entities/lib/esm/escape.js");



/** The level of entities to support. */
var EntityLevel;
(function (EntityLevel) {
    /** Support only XML entities. */
    EntityLevel[EntityLevel["XML"] = 0] = "XML";
    /** Support HTML entities, which are a superset of XML entities. */
    EntityLevel[EntityLevel["HTML"] = 1] = "HTML";
})(EntityLevel || (EntityLevel = {}));
/** Determines whether some entities are allowed to be written without a trailing `;`. */
var DecodingMode;
(function (DecodingMode) {
    /** Support legacy HTML entities. */
    DecodingMode[DecodingMode["Legacy"] = 0] = "Legacy";
    /** Do not support legacy HTML entities. */
    DecodingMode[DecodingMode["Strict"] = 1] = "Strict";
})(DecodingMode || (DecodingMode = {}));
var EncodingMode;
(function (EncodingMode) {
    /**
     * The output is UTF-8 encoded. Only characters that need escaping within
     * XML will be escaped.
     */
    EncodingMode[EncodingMode["UTF8"] = 0] = "UTF8";
    /**
     * The output consists only of ASCII characters. Characters that need
     * escaping within HTML, and characters that aren't ASCII characters will
     * be escaped.
     */
    EncodingMode[EncodingMode["ASCII"] = 1] = "ASCII";
    /**
     * Encode all characters that have an equivalent entity, as well as all
     * characters that are not ASCII characters.
     */
    EncodingMode[EncodingMode["Extensive"] = 2] = "Extensive";
    /**
     * Encode all characters that have to be escaped in HTML attributes,
     * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.
     */
    EncodingMode[EncodingMode["Attribute"] = 3] = "Attribute";
    /**
     * Encode all characters that have to be escaped in HTML text,
     * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.
     */
    EncodingMode[EncodingMode["Text"] = 4] = "Text";
})(EncodingMode || (EncodingMode = {}));
/**
 * Decodes a string with entities.
 *
 * @param data String to decode.
 * @param options Decoding options.
 */
function decode(data, options = EntityLevel.XML) {
    const opts = typeof options === "number" ? { level: options } : options;
    if (opts.level === EntityLevel.HTML) {
        if (opts.mode === DecodingMode.Strict) {
            return (0,_decode_js__WEBPACK_IMPORTED_MODULE_0__.decodeHTMLStrict)(data);
        }
        return (0,_decode_js__WEBPACK_IMPORTED_MODULE_0__.decodeHTML)(data);
    }
    return (0,_decode_js__WEBPACK_IMPORTED_MODULE_0__.decodeXML)(data);
}
/**
 * Decodes a string with entities. Does not allow missing trailing semicolons for entities.
 *
 * @param data String to decode.
 * @param options Decoding options.
 * @deprecated Use `decode` with the `mode` set to `Strict`.
 */
function decodeStrict(data, options = EntityLevel.XML) {
    const opts = typeof options === "number" ? { level: options } : options;
    if (opts.level === EntityLevel.HTML) {
        if (opts.mode === DecodingMode.Legacy) {
            return (0,_decode_js__WEBPACK_IMPORTED_MODULE_0__.decodeHTML)(data);
        }
        return (0,_decode_js__WEBPACK_IMPORTED_MODULE_0__.decodeHTMLStrict)(data);
    }
    return (0,_decode_js__WEBPACK_IMPORTED_MODULE_0__.decodeXML)(data);
}
/**
 * Encodes a string with entities.
 *
 * @param data String to encode.
 * @param options Encoding options.
 */
function encode(data, options = EntityLevel.XML) {
    const opts = typeof options === "number" ? { level: options } : options;
    // Mode `UTF8` just escapes XML entities
    if (opts.mode === EncodingMode.UTF8)
        return (0,_escape_js__WEBPACK_IMPORTED_MODULE_2__.escapeUTF8)(data);
    if (opts.mode === EncodingMode.Attribute)
        return (0,_escape_js__WEBPACK_IMPORTED_MODULE_2__.escapeAttribute)(data);
    if (opts.mode === EncodingMode.Text)
        return (0,_escape_js__WEBPACK_IMPORTED_MODULE_2__.escapeText)(data);
    if (opts.level === EntityLevel.HTML) {
        if (opts.mode === EncodingMode.ASCII) {
            return (0,_encode_js__WEBPACK_IMPORTED_MODULE_1__.encodeNonAsciiHTML)(data);
        }
        return (0,_encode_js__WEBPACK_IMPORTED_MODULE_1__.encodeHTML)(data);
    }
    // ASCII and Extensive are equivalent
    return (0,_escape_js__WEBPACK_IMPORTED_MODULE_2__.encodeXML)(data);
}



//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/htmlparser2/lib/esm/Parser.js":
/*!**************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/htmlparser2/lib/esm/Parser.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Parser": function() { return /* binding */ Parser; }
/* harmony export */ });
/* harmony import */ var _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Tokenizer.js */ "./node_modules/linkedom/node_modules/htmlparser2/lib/esm/Tokenizer.js");
/* harmony import */ var entities_lib_decode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! entities/lib/decode.js */ "./node_modules/linkedom/node_modules/entities/lib/esm/decode.js");


const formTags = new Set([
    "input",
    "option",
    "optgroup",
    "select",
    "button",
    "datalist",
    "textarea",
]);
const pTag = new Set(["p"]);
const tableSectionTags = new Set(["thead", "tbody"]);
const ddtTags = new Set(["dd", "dt"]);
const rtpTags = new Set(["rt", "rp"]);
const openImpliesClose = new Map([
    ["tr", new Set(["tr", "th", "td"])],
    ["th", new Set(["th"])],
    ["td", new Set(["thead", "th", "td"])],
    ["body", new Set(["head", "link", "script"])],
    ["li", new Set(["li"])],
    ["p", pTag],
    ["h1", pTag],
    ["h2", pTag],
    ["h3", pTag],
    ["h4", pTag],
    ["h5", pTag],
    ["h6", pTag],
    ["select", formTags],
    ["input", formTags],
    ["output", formTags],
    ["button", formTags],
    ["datalist", formTags],
    ["textarea", formTags],
    ["option", new Set(["option"])],
    ["optgroup", new Set(["optgroup", "option"])],
    ["dd", ddtTags],
    ["dt", ddtTags],
    ["address", pTag],
    ["article", pTag],
    ["aside", pTag],
    ["blockquote", pTag],
    ["details", pTag],
    ["div", pTag],
    ["dl", pTag],
    ["fieldset", pTag],
    ["figcaption", pTag],
    ["figure", pTag],
    ["footer", pTag],
    ["form", pTag],
    ["header", pTag],
    ["hr", pTag],
    ["main", pTag],
    ["nav", pTag],
    ["ol", pTag],
    ["pre", pTag],
    ["section", pTag],
    ["table", pTag],
    ["ul", pTag],
    ["rt", rtpTags],
    ["rp", rtpTags],
    ["tbody", tableSectionTags],
    ["tfoot", tableSectionTags],
]);
const voidElements = new Set([
    "area",
    "base",
    "basefont",
    "br",
    "col",
    "command",
    "embed",
    "frame",
    "hr",
    "img",
    "input",
    "isindex",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr",
]);
const foreignContextElements = new Set(["math", "svg"]);
const htmlIntegrationElements = new Set([
    "mi",
    "mo",
    "mn",
    "ms",
    "mtext",
    "annotation-xml",
    "foreignobject",
    "desc",
    "title",
]);
const reNameEnd = /\s|\//;
class Parser {
    constructor(cbs, options = {}) {
        var _a, _b, _c, _d, _e;
        this.options = options;
        /** The start index of the last event. */
        this.startIndex = 0;
        /** The end index of the last event. */
        this.endIndex = 0;
        /**
         * Store the start index of the current open tag,
         * so we can update the start index for attributes.
         */
        this.openTagStart = 0;
        this.tagname = "";
        this.attribname = "";
        this.attribvalue = "";
        this.attribs = null;
        this.stack = [];
        this.foreignContext = [];
        this.buffers = [];
        this.bufferOffset = 0;
        /** The index of the last written buffer. Used when resuming after a `pause()`. */
        this.writeIndex = 0;
        /** Indicates whether the parser has finished running / `.end` has been called. */
        this.ended = false;
        this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};
        this.lowerCaseTagNames = (_a = options.lowerCaseTags) !== null && _a !== void 0 ? _a : !options.xmlMode;
        this.lowerCaseAttributeNames =
            (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : !options.xmlMode;
        this.tokenizer = new ((_c = options.Tokenizer) !== null && _c !== void 0 ? _c : _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__["default"])(this.options, this);
        (_e = (_d = this.cbs).onparserinit) === null || _e === void 0 ? void 0 : _e.call(_d, this);
    }
    // Tokenizer event handlers
    /** @internal */
    ontext(start, endIndex) {
        var _a, _b;
        const data = this.getSlice(start, endIndex);
        this.endIndex = endIndex - 1;
        (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, data);
        this.startIndex = endIndex;
    }
    /** @internal */
    ontextentity(cp) {
        var _a, _b;
        /*
         * Entities can be emitted on the character, or directly after.
         * We use the section start here to get accurate indices.
         */
        const idx = this.tokenizer.getSectionStart();
        this.endIndex = idx - 1;
        (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, (0,entities_lib_decode_js__WEBPACK_IMPORTED_MODULE_1__.fromCodePoint)(cp));
        this.startIndex = idx;
    }
    isVoidElement(name) {
        return !this.options.xmlMode && voidElements.has(name);
    }
    /** @internal */
    onopentagname(start, endIndex) {
        this.endIndex = endIndex;
        let name = this.getSlice(start, endIndex);
        if (this.lowerCaseTagNames) {
            name = name.toLowerCase();
        }
        this.emitOpenTag(name);
    }
    emitOpenTag(name) {
        var _a, _b, _c, _d;
        this.openTagStart = this.startIndex;
        this.tagname = name;
        const impliesClose = !this.options.xmlMode && openImpliesClose.get(name);
        if (impliesClose) {
            while (this.stack.length > 0 &&
                impliesClose.has(this.stack[this.stack.length - 1])) {
                const el = this.stack.pop();
                (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, el, true);
            }
        }
        if (!this.isVoidElement(name)) {
            this.stack.push(name);
            if (foreignContextElements.has(name)) {
                this.foreignContext.push(true);
            }
            else if (htmlIntegrationElements.has(name)) {
                this.foreignContext.push(false);
            }
        }
        (_d = (_c = this.cbs).onopentagname) === null || _d === void 0 ? void 0 : _d.call(_c, name);
        if (this.cbs.onopentag)
            this.attribs = {};
    }
    endOpenTag(isImplied) {
        var _a, _b;
        this.startIndex = this.openTagStart;
        if (this.attribs) {
            (_b = (_a = this.cbs).onopentag) === null || _b === void 0 ? void 0 : _b.call(_a, this.tagname, this.attribs, isImplied);
            this.attribs = null;
        }
        if (this.cbs.onclosetag && this.isVoidElement(this.tagname)) {
            this.cbs.onclosetag(this.tagname, true);
        }
        this.tagname = "";
    }
    /** @internal */
    onopentagend(endIndex) {
        this.endIndex = endIndex;
        this.endOpenTag(false);
        // Set `startIndex` for next node
        this.startIndex = endIndex + 1;
    }
    /** @internal */
    onclosetag(start, endIndex) {
        var _a, _b, _c, _d, _e, _f;
        this.endIndex = endIndex;
        let name = this.getSlice(start, endIndex);
        if (this.lowerCaseTagNames) {
            name = name.toLowerCase();
        }
        if (foreignContextElements.has(name) ||
            htmlIntegrationElements.has(name)) {
            this.foreignContext.pop();
        }
        if (!this.isVoidElement(name)) {
            const pos = this.stack.lastIndexOf(name);
            if (pos !== -1) {
                if (this.cbs.onclosetag) {
                    let count = this.stack.length - pos;
                    while (count--) {
                        // We know the stack has sufficient elements.
                        this.cbs.onclosetag(this.stack.pop(), count !== 0);
                    }
                }
                else
                    this.stack.length = pos;
            }
            else if (!this.options.xmlMode && name === "p") {
                // Implicit open before close
                this.emitOpenTag("p");
                this.closeCurrentTag(true);
            }
        }
        else if (!this.options.xmlMode && name === "br") {
            // We can't use `emitOpenTag` for implicit open, as `br` would be implicitly closed.
            (_b = (_a = this.cbs).onopentagname) === null || _b === void 0 ? void 0 : _b.call(_a, "br");
            (_d = (_c = this.cbs).onopentag) === null || _d === void 0 ? void 0 : _d.call(_c, "br", {}, true);
            (_f = (_e = this.cbs).onclosetag) === null || _f === void 0 ? void 0 : _f.call(_e, "br", false);
        }
        // Set `startIndex` for next node
        this.startIndex = endIndex + 1;
    }
    /** @internal */
    onselfclosingtag(endIndex) {
        this.endIndex = endIndex;
        if (this.options.xmlMode ||
            this.options.recognizeSelfClosing ||
            this.foreignContext[this.foreignContext.length - 1]) {
            this.closeCurrentTag(false);
            // Set `startIndex` for next node
            this.startIndex = endIndex + 1;
        }
        else {
            // Ignore the fact that the tag is self-closing.
            this.onopentagend(endIndex);
        }
    }
    closeCurrentTag(isOpenImplied) {
        var _a, _b;
        const name = this.tagname;
        this.endOpenTag(isOpenImplied);
        // Self-closing tags will be on the top of the stack
        if (this.stack[this.stack.length - 1] === name) {
            // If the opening tag isn't implied, the closing tag has to be implied.
            (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, name, !isOpenImplied);
            this.stack.pop();
        }
    }
    /** @internal */
    onattribname(start, endIndex) {
        this.startIndex = start;
        const name = this.getSlice(start, endIndex);
        this.attribname = this.lowerCaseAttributeNames
            ? name.toLowerCase()
            : name;
    }
    /** @internal */
    onattribdata(start, endIndex) {
        this.attribvalue += this.getSlice(start, endIndex);
    }
    /** @internal */
    onattribentity(cp) {
        this.attribvalue += (0,entities_lib_decode_js__WEBPACK_IMPORTED_MODULE_1__.fromCodePoint)(cp);
    }
    /** @internal */
    onattribend(quote, endIndex) {
        var _a, _b;
        this.endIndex = endIndex;
        (_b = (_a = this.cbs).onattribute) === null || _b === void 0 ? void 0 : _b.call(_a, this.attribname, this.attribvalue, quote === _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.QuoteType.Double
            ? '"'
            : quote === _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.QuoteType.Single
                ? "'"
                : quote === _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.QuoteType.NoValue
                    ? undefined
                    : null);
        if (this.attribs &&
            !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {
            this.attribs[this.attribname] = this.attribvalue;
        }
        this.attribvalue = "";
    }
    getInstructionName(value) {
        const idx = value.search(reNameEnd);
        let name = idx < 0 ? value : value.substr(0, idx);
        if (this.lowerCaseTagNames) {
            name = name.toLowerCase();
        }
        return name;
    }
    /** @internal */
    ondeclaration(start, endIndex) {
        this.endIndex = endIndex;
        const value = this.getSlice(start, endIndex);
        if (this.cbs.onprocessinginstruction) {
            const name = this.getInstructionName(value);
            this.cbs.onprocessinginstruction(`!${name}`, `!${value}`);
        }
        // Set `startIndex` for next node
        this.startIndex = endIndex + 1;
    }
    /** @internal */
    onprocessinginstruction(start, endIndex) {
        this.endIndex = endIndex;
        const value = this.getSlice(start, endIndex);
        if (this.cbs.onprocessinginstruction) {
            const name = this.getInstructionName(value);
            this.cbs.onprocessinginstruction(`?${name}`, `?${value}`);
        }
        // Set `startIndex` for next node
        this.startIndex = endIndex + 1;
    }
    /** @internal */
    oncomment(start, endIndex, offset) {
        var _a, _b, _c, _d;
        this.endIndex = endIndex;
        (_b = (_a = this.cbs).oncomment) === null || _b === void 0 ? void 0 : _b.call(_a, this.getSlice(start, endIndex - offset));
        (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 ? void 0 : _d.call(_c);
        // Set `startIndex` for next node
        this.startIndex = endIndex + 1;
    }
    /** @internal */
    oncdata(start, endIndex, offset) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        this.endIndex = endIndex;
        const value = this.getSlice(start, endIndex - offset);
        if (this.options.xmlMode || this.options.recognizeCDATA) {
            (_b = (_a = this.cbs).oncdatastart) === null || _b === void 0 ? void 0 : _b.call(_a);
            (_d = (_c = this.cbs).ontext) === null || _d === void 0 ? void 0 : _d.call(_c, value);
            (_f = (_e = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e);
        }
        else {
            (_h = (_g = this.cbs).oncomment) === null || _h === void 0 ? void 0 : _h.call(_g, `[CDATA[${value}]]`);
            (_k = (_j = this.cbs).oncommentend) === null || _k === void 0 ? void 0 : _k.call(_j);
        }
        // Set `startIndex` for next node
        this.startIndex = endIndex + 1;
    }
    /** @internal */
    onend() {
        var _a, _b;
        if (this.cbs.onclosetag) {
            // Set the end index for all remaining tags
            this.endIndex = this.startIndex;
            for (let i = this.stack.length; i > 0; this.cbs.onclosetag(this.stack[--i], true))
                ;
        }
        (_b = (_a = this.cbs).onend) === null || _b === void 0 ? void 0 : _b.call(_a);
    }
    /**
     * Resets the parser to a blank state, ready to parse a new HTML document
     */
    reset() {
        var _a, _b, _c, _d;
        (_b = (_a = this.cbs).onreset) === null || _b === void 0 ? void 0 : _b.call(_a);
        this.tokenizer.reset();
        this.tagname = "";
        this.attribname = "";
        this.attribs = null;
        this.stack.length = 0;
        this.startIndex = 0;
        this.endIndex = 0;
        (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 ? void 0 : _d.call(_c, this);
        this.buffers.length = 0;
        this.bufferOffset = 0;
        this.writeIndex = 0;
        this.ended = false;
    }
    /**
     * Resets the parser, then parses a complete document and
     * pushes it to the handler.
     *
     * @param data Document to parse.
     */
    parseComplete(data) {
        this.reset();
        this.end(data);
    }
    getSlice(start, end) {
        while (start - this.bufferOffset >= this.buffers[0].length) {
            this.shiftBuffer();
        }
        let str = this.buffers[0].slice(start - this.bufferOffset, end - this.bufferOffset);
        while (end - this.bufferOffset > this.buffers[0].length) {
            this.shiftBuffer();
            str += this.buffers[0].slice(0, end - this.bufferOffset);
        }
        return str;
    }
    shiftBuffer() {
        this.bufferOffset += this.buffers[0].length;
        this.writeIndex--;
        this.buffers.shift();
    }
    /**
     * Parses a chunk of data and calls the corresponding callbacks.
     *
     * @param chunk Chunk to parse.
     */
    write(chunk) {
        var _a, _b;
        if (this.ended) {
            (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, new Error(".write() after done!"));
            return;
        }
        this.buffers.push(chunk);
        if (this.tokenizer.running) {
            this.tokenizer.write(chunk);
            this.writeIndex++;
        }
    }
    /**
     * Parses the end of the buffer and clears the stack, calls onend.
     *
     * @param chunk Optional final chunk to parse.
     */
    end(chunk) {
        var _a, _b;
        if (this.ended) {
            (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, Error(".end() after done!"));
            return;
        }
        if (chunk)
            this.write(chunk);
        this.ended = true;
        this.tokenizer.end();
    }
    /**
     * Pauses parsing. The parser won't emit events until `resume` is called.
     */
    pause() {
        this.tokenizer.pause();
    }
    /**
     * Resumes parsing after `pause` was called.
     */
    resume() {
        this.tokenizer.resume();
        while (this.tokenizer.running &&
            this.writeIndex < this.buffers.length) {
            this.tokenizer.write(this.buffers[this.writeIndex++]);
        }
        if (this.ended)
            this.tokenizer.end();
    }
    /**
     * Alias of `write`, for backwards compatibility.
     *
     * @param chunk Chunk to parse.
     * @deprecated
     */
    parseChunk(chunk) {
        this.write(chunk);
    }
    /**
     * Alias of `end`, for backwards compatibility.
     *
     * @param chunk Optional final chunk to parse.
     * @deprecated
     */
    done(chunk) {
        this.end(chunk);
    }
}
//# sourceMappingURL=Parser.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/htmlparser2/lib/esm/Tokenizer.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/htmlparser2/lib/esm/Tokenizer.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "QuoteType": function() { return /* binding */ QuoteType; },
/* harmony export */   "default": function() { return /* binding */ Tokenizer; }
/* harmony export */ });
/* harmony import */ var entities_lib_decode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! entities/lib/decode.js */ "./node_modules/linkedom/node_modules/entities/lib/esm/decode.js");

var CharCodes;
(function (CharCodes) {
    CharCodes[CharCodes["Tab"] = 9] = "Tab";
    CharCodes[CharCodes["NewLine"] = 10] = "NewLine";
    CharCodes[CharCodes["FormFeed"] = 12] = "FormFeed";
    CharCodes[CharCodes["CarriageReturn"] = 13] = "CarriageReturn";
    CharCodes[CharCodes["Space"] = 32] = "Space";
    CharCodes[CharCodes["ExclamationMark"] = 33] = "ExclamationMark";
    CharCodes[CharCodes["Num"] = 35] = "Num";
    CharCodes[CharCodes["Amp"] = 38] = "Amp";
    CharCodes[CharCodes["SingleQuote"] = 39] = "SingleQuote";
    CharCodes[CharCodes["DoubleQuote"] = 34] = "DoubleQuote";
    CharCodes[CharCodes["Dash"] = 45] = "Dash";
    CharCodes[CharCodes["Slash"] = 47] = "Slash";
    CharCodes[CharCodes["Zero"] = 48] = "Zero";
    CharCodes[CharCodes["Nine"] = 57] = "Nine";
    CharCodes[CharCodes["Semi"] = 59] = "Semi";
    CharCodes[CharCodes["Lt"] = 60] = "Lt";
    CharCodes[CharCodes["Eq"] = 61] = "Eq";
    CharCodes[CharCodes["Gt"] = 62] = "Gt";
    CharCodes[CharCodes["Questionmark"] = 63] = "Questionmark";
    CharCodes[CharCodes["UpperA"] = 65] = "UpperA";
    CharCodes[CharCodes["LowerA"] = 97] = "LowerA";
    CharCodes[CharCodes["UpperF"] = 70] = "UpperF";
    CharCodes[CharCodes["LowerF"] = 102] = "LowerF";
    CharCodes[CharCodes["UpperZ"] = 90] = "UpperZ";
    CharCodes[CharCodes["LowerZ"] = 122] = "LowerZ";
    CharCodes[CharCodes["LowerX"] = 120] = "LowerX";
    CharCodes[CharCodes["OpeningSquareBracket"] = 91] = "OpeningSquareBracket";
})(CharCodes || (CharCodes = {}));
/** All the states the tokenizer can be in. */
var State;
(function (State) {
    State[State["Text"] = 1] = "Text";
    State[State["BeforeTagName"] = 2] = "BeforeTagName";
    State[State["InTagName"] = 3] = "InTagName";
    State[State["InSelfClosingTag"] = 4] = "InSelfClosingTag";
    State[State["BeforeClosingTagName"] = 5] = "BeforeClosingTagName";
    State[State["InClosingTagName"] = 6] = "InClosingTagName";
    State[State["AfterClosingTagName"] = 7] = "AfterClosingTagName";
    // Attributes
    State[State["BeforeAttributeName"] = 8] = "BeforeAttributeName";
    State[State["InAttributeName"] = 9] = "InAttributeName";
    State[State["AfterAttributeName"] = 10] = "AfterAttributeName";
    State[State["BeforeAttributeValue"] = 11] = "BeforeAttributeValue";
    State[State["InAttributeValueDq"] = 12] = "InAttributeValueDq";
    State[State["InAttributeValueSq"] = 13] = "InAttributeValueSq";
    State[State["InAttributeValueNq"] = 14] = "InAttributeValueNq";
    // Declarations
    State[State["BeforeDeclaration"] = 15] = "BeforeDeclaration";
    State[State["InDeclaration"] = 16] = "InDeclaration";
    // Processing instructions
    State[State["InProcessingInstruction"] = 17] = "InProcessingInstruction";
    // Comments & CDATA
    State[State["BeforeComment"] = 18] = "BeforeComment";
    State[State["CDATASequence"] = 19] = "CDATASequence";
    State[State["InSpecialComment"] = 20] = "InSpecialComment";
    State[State["InCommentLike"] = 21] = "InCommentLike";
    // Special tags
    State[State["BeforeSpecialS"] = 22] = "BeforeSpecialS";
    State[State["SpecialStartSequence"] = 23] = "SpecialStartSequence";
    State[State["InSpecialTag"] = 24] = "InSpecialTag";
    State[State["BeforeEntity"] = 25] = "BeforeEntity";
    State[State["BeforeNumericEntity"] = 26] = "BeforeNumericEntity";
    State[State["InNamedEntity"] = 27] = "InNamedEntity";
    State[State["InNumericEntity"] = 28] = "InNumericEntity";
    State[State["InHexEntity"] = 29] = "InHexEntity";
})(State || (State = {}));
function isWhitespace(c) {
    return (c === CharCodes.Space ||
        c === CharCodes.NewLine ||
        c === CharCodes.Tab ||
        c === CharCodes.FormFeed ||
        c === CharCodes.CarriageReturn);
}
function isEndOfTagSection(c) {
    return c === CharCodes.Slash || c === CharCodes.Gt || isWhitespace(c);
}
function isNumber(c) {
    return c >= CharCodes.Zero && c <= CharCodes.Nine;
}
function isASCIIAlpha(c) {
    return ((c >= CharCodes.LowerA && c <= CharCodes.LowerZ) ||
        (c >= CharCodes.UpperA && c <= CharCodes.UpperZ));
}
function isHexDigit(c) {
    return ((c >= CharCodes.UpperA && c <= CharCodes.UpperF) ||
        (c >= CharCodes.LowerA && c <= CharCodes.LowerF));
}
var QuoteType;
(function (QuoteType) {
    QuoteType[QuoteType["NoValue"] = 0] = "NoValue";
    QuoteType[QuoteType["Unquoted"] = 1] = "Unquoted";
    QuoteType[QuoteType["Single"] = 2] = "Single";
    QuoteType[QuoteType["Double"] = 3] = "Double";
})(QuoteType || (QuoteType = {}));
/**
 * Sequences used to match longer strings.
 *
 * We don't have `Script`, `Style`, or `Title` here. Instead, we re-use the *End
 * sequences with an increased offset.
 */
const Sequences = {
    Cdata: new Uint8Array([0x43, 0x44, 0x41, 0x54, 0x41, 0x5b]),
    CdataEnd: new Uint8Array([0x5d, 0x5d, 0x3e]),
    CommentEnd: new Uint8Array([0x2d, 0x2d, 0x3e]),
    ScriptEnd: new Uint8Array([0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74]),
    StyleEnd: new Uint8Array([0x3c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65]),
    TitleEnd: new Uint8Array([0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65]), // `</title`
};
class Tokenizer {
    constructor({ xmlMode = false, decodeEntities = true, }, cbs) {
        this.cbs = cbs;
        /** The current state the tokenizer is in. */
        this.state = State.Text;
        /** The read buffer. */
        this.buffer = "";
        /** The beginning of the section that is currently being read. */
        this.sectionStart = 0;
        /** The index within the buffer that we are currently looking at. */
        this.index = 0;
        /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */
        this.baseState = State.Text;
        /** For special parsing behavior inside of script and style tags. */
        this.isSpecial = false;
        /** Indicates whether the tokenizer has been paused. */
        this.running = true;
        /** The offset of the current buffer. */
        this.offset = 0;
        this.sequenceIndex = 0;
        this.trieIndex = 0;
        this.trieCurrent = 0;
        /** For named entities, the index of the value. For numeric entities, the code point. */
        this.entityResult = 0;
        this.entityExcess = 0;
        this.xmlMode = xmlMode;
        this.decodeEntities = decodeEntities;
        this.entityTrie = xmlMode ? entities_lib_decode_js__WEBPACK_IMPORTED_MODULE_0__.xmlDecodeTree : entities_lib_decode_js__WEBPACK_IMPORTED_MODULE_0__.htmlDecodeTree;
    }
    reset() {
        this.state = State.Text;
        this.buffer = "";
        this.sectionStart = 0;
        this.index = 0;
        this.baseState = State.Text;
        this.currentSequence = undefined;
        this.running = true;
        this.offset = 0;
    }
    write(chunk) {
        this.offset += this.buffer.length;
        this.buffer = chunk;
        this.parse();
    }
    end() {
        if (this.running)
            this.finish();
    }
    pause() {
        this.running = false;
    }
    resume() {
        this.running = true;
        if (this.index < this.buffer.length + this.offset) {
            this.parse();
        }
    }
    /**
     * The current index within all of the written data.
     */
    getIndex() {
        return this.index;
    }
    /**
     * The start of the current section.
     */
    getSectionStart() {
        return this.sectionStart;
    }
    stateText(c) {
        if (c === CharCodes.Lt ||
            (!this.decodeEntities && this.fastForwardTo(CharCodes.Lt))) {
            if (this.index > this.sectionStart) {
                this.cbs.ontext(this.sectionStart, this.index);
            }
            this.state = State.BeforeTagName;
            this.sectionStart = this.index;
        }
        else if (this.decodeEntities && c === CharCodes.Amp) {
            this.state = State.BeforeEntity;
        }
    }
    stateSpecialStartSequence(c) {
        const isEnd = this.sequenceIndex === this.currentSequence.length;
        const isMatch = isEnd
            ? // If we are at the end of the sequence, make sure the tag name has ended
                isEndOfTagSection(c)
            : // Otherwise, do a case-insensitive comparison
                (c | 0x20) === this.currentSequence[this.sequenceIndex];
        if (!isMatch) {
            this.isSpecial = false;
        }
        else if (!isEnd) {
            this.sequenceIndex++;
            return;
        }
        this.sequenceIndex = 0;
        this.state = State.InTagName;
        this.stateInTagName(c);
    }
    /** Look for an end tag. For <title> tags, also decode entities. */
    stateInSpecialTag(c) {
        if (this.sequenceIndex === this.currentSequence.length) {
            if (c === CharCodes.Gt || isWhitespace(c)) {
                const endOfText = this.index - this.currentSequence.length;
                if (this.sectionStart < endOfText) {
                    // Spoof the index so that reported locations match up.
                    const actualIndex = this.index;
                    this.index = endOfText;
                    this.cbs.ontext(this.sectionStart, endOfText);
                    this.index = actualIndex;
                }
                this.isSpecial = false;
                this.sectionStart = endOfText + 2; // Skip over the `</`
                this.stateInClosingTagName(c);
                return; // We are done; skip the rest of the function.
            }
            this.sequenceIndex = 0;
        }
        if ((c | 0x20) === this.currentSequence[this.sequenceIndex]) {
            this.sequenceIndex += 1;
        }
        else if (this.sequenceIndex === 0) {
            if (this.currentSequence === Sequences.TitleEnd) {
                // We have to parse entities in <title> tags.
                if (this.decodeEntities && c === CharCodes.Amp) {
                    this.state = State.BeforeEntity;
                }
            }
            else if (this.fastForwardTo(CharCodes.Lt)) {
                // Outside of <title> tags, we can fast-forward.
                this.sequenceIndex = 1;
            }
        }
        else {
            // If we see a `<`, set the sequence index to 1; useful for eg. `<</script>`.
            this.sequenceIndex = Number(c === CharCodes.Lt);
        }
    }
    stateCDATASequence(c) {
        if (c === Sequences.Cdata[this.sequenceIndex]) {
            if (++this.sequenceIndex === Sequences.Cdata.length) {
                this.state = State.InCommentLike;
                this.currentSequence = Sequences.CdataEnd;
                this.sequenceIndex = 0;
                this.sectionStart = this.index + 1;
            }
        }
        else {
            this.sequenceIndex = 0;
            this.state = State.InDeclaration;
            this.stateInDeclaration(c); // Reconsume the character
        }
    }
    /**
     * When we wait for one specific character, we can speed things up
     * by skipping through the buffer until we find it.
     *
     * @returns Whether the character was found.
     */
    fastForwardTo(c) {
        while (++this.index < this.buffer.length + this.offset) {
            if (this.buffer.charCodeAt(this.index - this.offset) === c) {
                return true;
            }
        }
        /*
         * We increment the index at the end of the `parse` loop,
         * so set it to `buffer.length - 1` here.
         *
         * TODO: Refactor `parse` to increment index before calling states.
         */
        this.index = this.buffer.length + this.offset - 1;
        return false;
    }
    /**
     * Comments and CDATA end with `-->` and `]]>`.
     *
     * Their common qualities are:
     * - Their end sequences have a distinct character they start with.
     * - That character is then repeated, so we have to check multiple repeats.
     * - All characters but the start character of the sequence can be skipped.
     */
    stateInCommentLike(c) {
        if (c === this.currentSequence[this.sequenceIndex]) {
            if (++this.sequenceIndex === this.currentSequence.length) {
                if (this.currentSequence === Sequences.CdataEnd) {
                    this.cbs.oncdata(this.sectionStart, this.index, 2);
                }
                else {
                    this.cbs.oncomment(this.sectionStart, this.index, 2);
                }
                this.sequenceIndex = 0;
                this.sectionStart = this.index + 1;
                this.state = State.Text;
            }
        }
        else if (this.sequenceIndex === 0) {
            // Fast-forward to the first character of the sequence
            if (this.fastForwardTo(this.currentSequence[0])) {
                this.sequenceIndex = 1;
            }
        }
        else if (c !== this.currentSequence[this.sequenceIndex - 1]) {
            // Allow long sequences, eg. --->, ]]]>
            this.sequenceIndex = 0;
        }
    }
    /**
     * HTML only allows ASCII alpha characters (a-z and A-Z) at the beginning of a tag name.
     *
     * XML allows a lot more characters here (@see https://www.w3.org/TR/REC-xml/#NT-NameStartChar).
     * We allow anything that wouldn't end the tag.
     */
    isTagStartChar(c) {
        return this.xmlMode ? !isEndOfTagSection(c) : isASCIIAlpha(c);
    }
    startSpecial(sequence, offset) {
        this.isSpecial = true;
        this.currentSequence = sequence;
        this.sequenceIndex = offset;
        this.state = State.SpecialStartSequence;
    }
    stateBeforeTagName(c) {
        if (c === CharCodes.ExclamationMark) {
            this.state = State.BeforeDeclaration;
            this.sectionStart = this.index + 1;
        }
        else if (c === CharCodes.Questionmark) {
            this.state = State.InProcessingInstruction;
            this.sectionStart = this.index + 1;
        }
        else if (this.isTagStartChar(c)) {
            const lower = c | 0x20;
            this.sectionStart = this.index;
            if (!this.xmlMode && lower === Sequences.TitleEnd[2]) {
                this.startSpecial(Sequences.TitleEnd, 3);
            }
            else {
                this.state =
                    !this.xmlMode && lower === Sequences.ScriptEnd[2]
                        ? State.BeforeSpecialS
                        : State.InTagName;
            }
        }
        else if (c === CharCodes.Slash) {
            this.state = State.BeforeClosingTagName;
        }
        else {
            this.state = State.Text;
            this.stateText(c);
        }
    }
    stateInTagName(c) {
        if (isEndOfTagSection(c)) {
            this.cbs.onopentagname(this.sectionStart, this.index);
            this.sectionStart = -1;
            this.state = State.BeforeAttributeName;
            this.stateBeforeAttributeName(c);
        }
    }
    stateBeforeClosingTagName(c) {
        if (isWhitespace(c)) {
            // Ignore
        }
        else if (c === CharCodes.Gt) {
            this.state = State.Text;
        }
        else {
            this.state = this.isTagStartChar(c)
                ? State.InClosingTagName
                : State.InSpecialComment;
            this.sectionStart = this.index;
        }
    }
    stateInClosingTagName(c) {
        if (c === CharCodes.Gt || isWhitespace(c)) {
            this.cbs.onclosetag(this.sectionStart, this.index);
            this.sectionStart = -1;
            this.state = State.AfterClosingTagName;
            this.stateAfterClosingTagName(c);
        }
    }
    stateAfterClosingTagName(c) {
        // Skip everything until ">"
        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
            this.state = State.Text;
            this.sectionStart = this.index + 1;
        }
    }
    stateBeforeAttributeName(c) {
        if (c === CharCodes.Gt) {
            this.cbs.onopentagend(this.index);
            if (this.isSpecial) {
                this.state = State.InSpecialTag;
                this.sequenceIndex = 0;
            }
            else {
                this.state = State.Text;
            }
            this.baseState = this.state;
            this.sectionStart = this.index + 1;
        }
        else if (c === CharCodes.Slash) {
            this.state = State.InSelfClosingTag;
        }
        else if (!isWhitespace(c)) {
            this.state = State.InAttributeName;
            this.sectionStart = this.index;
        }
    }
    stateInSelfClosingTag(c) {
        if (c === CharCodes.Gt) {
            this.cbs.onselfclosingtag(this.index);
            this.state = State.Text;
            this.baseState = State.Text;
            this.sectionStart = this.index + 1;
            this.isSpecial = false; // Reset special state, in case of self-closing special tags
        }
        else if (!isWhitespace(c)) {
            this.state = State.BeforeAttributeName;
            this.stateBeforeAttributeName(c);
        }
    }
    stateInAttributeName(c) {
        if (c === CharCodes.Eq || isEndOfTagSection(c)) {
            this.cbs.onattribname(this.sectionStart, this.index);
            this.sectionStart = -1;
            this.state = State.AfterAttributeName;
            this.stateAfterAttributeName(c);
        }
    }
    stateAfterAttributeName(c) {
        if (c === CharCodes.Eq) {
            this.state = State.BeforeAttributeValue;
        }
        else if (c === CharCodes.Slash || c === CharCodes.Gt) {
            this.cbs.onattribend(QuoteType.NoValue, this.index);
            this.state = State.BeforeAttributeName;
            this.stateBeforeAttributeName(c);
        }
        else if (!isWhitespace(c)) {
            this.cbs.onattribend(QuoteType.NoValue, this.index);
            this.state = State.InAttributeName;
            this.sectionStart = this.index;
        }
    }
    stateBeforeAttributeValue(c) {
        if (c === CharCodes.DoubleQuote) {
            this.state = State.InAttributeValueDq;
            this.sectionStart = this.index + 1;
        }
        else if (c === CharCodes.SingleQuote) {
            this.state = State.InAttributeValueSq;
            this.sectionStart = this.index + 1;
        }
        else if (!isWhitespace(c)) {
            this.sectionStart = this.index;
            this.state = State.InAttributeValueNq;
            this.stateInAttributeValueNoQuotes(c); // Reconsume token
        }
    }
    handleInAttributeValue(c, quote) {
        if (c === quote ||
            (!this.decodeEntities && this.fastForwardTo(quote))) {
            this.cbs.onattribdata(this.sectionStart, this.index);
            this.sectionStart = -1;
            this.cbs.onattribend(quote === CharCodes.DoubleQuote
                ? QuoteType.Double
                : QuoteType.Single, this.index);
            this.state = State.BeforeAttributeName;
        }
        else if (this.decodeEntities && c === CharCodes.Amp) {
            this.baseState = this.state;
            this.state = State.BeforeEntity;
        }
    }
    stateInAttributeValueDoubleQuotes(c) {
        this.handleInAttributeValue(c, CharCodes.DoubleQuote);
    }
    stateInAttributeValueSingleQuotes(c) {
        this.handleInAttributeValue(c, CharCodes.SingleQuote);
    }
    stateInAttributeValueNoQuotes(c) {
        if (isWhitespace(c) || c === CharCodes.Gt) {
            this.cbs.onattribdata(this.sectionStart, this.index);
            this.sectionStart = -1;
            this.cbs.onattribend(QuoteType.Unquoted, this.index);
            this.state = State.BeforeAttributeName;
            this.stateBeforeAttributeName(c);
        }
        else if (this.decodeEntities && c === CharCodes.Amp) {
            this.baseState = this.state;
            this.state = State.BeforeEntity;
        }
    }
    stateBeforeDeclaration(c) {
        if (c === CharCodes.OpeningSquareBracket) {
            this.state = State.CDATASequence;
            this.sequenceIndex = 0;
        }
        else {
            this.state =
                c === CharCodes.Dash
                    ? State.BeforeComment
                    : State.InDeclaration;
        }
    }
    stateInDeclaration(c) {
        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
            this.cbs.ondeclaration(this.sectionStart, this.index);
            this.state = State.Text;
            this.sectionStart = this.index + 1;
        }
    }
    stateInProcessingInstruction(c) {
        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
            this.cbs.onprocessinginstruction(this.sectionStart, this.index);
            this.state = State.Text;
            this.sectionStart = this.index + 1;
        }
    }
    stateBeforeComment(c) {
        if (c === CharCodes.Dash) {
            this.state = State.InCommentLike;
            this.currentSequence = Sequences.CommentEnd;
            // Allow short comments (eg. <!-->)
            this.sequenceIndex = 2;
            this.sectionStart = this.index + 1;
        }
        else {
            this.state = State.InDeclaration;
        }
    }
    stateInSpecialComment(c) {
        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
            this.cbs.oncomment(this.sectionStart, this.index, 0);
            this.state = State.Text;
            this.sectionStart = this.index + 1;
        }
    }
    stateBeforeSpecialS(c) {
        const lower = c | 0x20;
        if (lower === Sequences.ScriptEnd[3]) {
            this.startSpecial(Sequences.ScriptEnd, 4);
        }
        else if (lower === Sequences.StyleEnd[3]) {
            this.startSpecial(Sequences.StyleEnd, 4);
        }
        else {
            this.state = State.InTagName;
            this.stateInTagName(c); // Consume the token again
        }
    }
    stateBeforeEntity(c) {
        // Start excess with 1 to include the '&'
        this.entityExcess = 1;
        this.entityResult = 0;
        if (c === CharCodes.Num) {
            this.state = State.BeforeNumericEntity;
        }
        else if (c === CharCodes.Amp) {
            // We have two `&` characters in a row. Stay in the current state.
        }
        else {
            this.trieIndex = 0;
            this.trieCurrent = this.entityTrie[0];
            this.state = State.InNamedEntity;
            this.stateInNamedEntity(c);
        }
    }
    stateInNamedEntity(c) {
        this.entityExcess += 1;
        this.trieIndex = (0,entities_lib_decode_js__WEBPACK_IMPORTED_MODULE_0__.determineBranch)(this.entityTrie, this.trieCurrent, this.trieIndex + 1, c);
        if (this.trieIndex < 0) {
            this.emitNamedEntity();
            this.index--;
            return;
        }
        this.trieCurrent = this.entityTrie[this.trieIndex];
        const masked = this.trieCurrent & entities_lib_decode_js__WEBPACK_IMPORTED_MODULE_0__.BinTrieFlags.VALUE_LENGTH;
        // If the branch is a value, store it and continue
        if (masked) {
            // The mask is the number of bytes of the value, including the current byte.
            const valueLength = (masked >> 14) - 1;
            // If we have a legacy entity while parsing strictly, just skip the number of bytes
            if (!this.allowLegacyEntity() && c !== CharCodes.Semi) {
                this.trieIndex += valueLength;
            }
            else {
                // Add 1 as we have already incremented the excess
                const entityStart = this.index - this.entityExcess + 1;
                if (entityStart > this.sectionStart) {
                    this.emitPartial(this.sectionStart, entityStart);
                }
                // If this is a surrogate pair, consume the next two bytes
                this.entityResult = this.trieIndex;
                this.trieIndex += valueLength;
                this.entityExcess = 0;
                this.sectionStart = this.index + 1;
                if (valueLength === 0) {
                    this.emitNamedEntity();
                }
            }
        }
    }
    emitNamedEntity() {
        this.state = this.baseState;
        if (this.entityResult === 0) {
            return;
        }
        const valueLength = (this.entityTrie[this.entityResult] & entities_lib_decode_js__WEBPACK_IMPORTED_MODULE_0__.BinTrieFlags.VALUE_LENGTH) >>
            14;
        switch (valueLength) {
            case 1:
                this.emitCodePoint(this.entityTrie[this.entityResult] &
                    ~entities_lib_decode_js__WEBPACK_IMPORTED_MODULE_0__.BinTrieFlags.VALUE_LENGTH);
                break;
            case 2:
                this.emitCodePoint(this.entityTrie[this.entityResult + 1]);
                break;
            case 3: {
                this.emitCodePoint(this.entityTrie[this.entityResult + 1]);
                this.emitCodePoint(this.entityTrie[this.entityResult + 2]);
            }
        }
    }
    stateBeforeNumericEntity(c) {
        if ((c | 0x20) === CharCodes.LowerX) {
            this.entityExcess++;
            this.state = State.InHexEntity;
        }
        else {
            this.state = State.InNumericEntity;
            this.stateInNumericEntity(c);
        }
    }
    emitNumericEntity(strict) {
        const entityStart = this.index - this.entityExcess - 1;
        const numberStart = entityStart + 2 + Number(this.state === State.InHexEntity);
        if (numberStart !== this.index) {
            // Emit leading data if any
            if (entityStart > this.sectionStart) {
                this.emitPartial(this.sectionStart, entityStart);
            }
            this.sectionStart = this.index + Number(strict);
            this.emitCodePoint((0,entities_lib_decode_js__WEBPACK_IMPORTED_MODULE_0__.replaceCodePoint)(this.entityResult));
        }
        this.state = this.baseState;
    }
    stateInNumericEntity(c) {
        if (c === CharCodes.Semi) {
            this.emitNumericEntity(true);
        }
        else if (isNumber(c)) {
            this.entityResult = this.entityResult * 10 + (c - CharCodes.Zero);
            this.entityExcess++;
        }
        else {
            if (this.allowLegacyEntity()) {
                this.emitNumericEntity(false);
            }
            else {
                this.state = this.baseState;
            }
            this.index--;
        }
    }
    stateInHexEntity(c) {
        if (c === CharCodes.Semi) {
            this.emitNumericEntity(true);
        }
        else if (isNumber(c)) {
            this.entityResult = this.entityResult * 16 + (c - CharCodes.Zero);
            this.entityExcess++;
        }
        else if (isHexDigit(c)) {
            this.entityResult =
                this.entityResult * 16 + ((c | 0x20) - CharCodes.LowerA + 10);
            this.entityExcess++;
        }
        else {
            if (this.allowLegacyEntity()) {
                this.emitNumericEntity(false);
            }
            else {
                this.state = this.baseState;
            }
            this.index--;
        }
    }
    allowLegacyEntity() {
        return (!this.xmlMode &&
            (this.baseState === State.Text ||
                this.baseState === State.InSpecialTag));
    }
    /**
     * Remove data that has already been consumed from the buffer.
     */
    cleanup() {
        // If we are inside of text or attributes, emit what we already have.
        if (this.running && this.sectionStart !== this.index) {
            if (this.state === State.Text ||
                (this.state === State.InSpecialTag && this.sequenceIndex === 0)) {
                this.cbs.ontext(this.sectionStart, this.index);
                this.sectionStart = this.index;
            }
            else if (this.state === State.InAttributeValueDq ||
                this.state === State.InAttributeValueSq ||
                this.state === State.InAttributeValueNq) {
                this.cbs.onattribdata(this.sectionStart, this.index);
                this.sectionStart = this.index;
            }
        }
    }
    shouldContinue() {
        return this.index < this.buffer.length + this.offset && this.running;
    }
    /**
     * Iterates through the buffer, calling the function corresponding to the current state.
     *
     * States that are more likely to be hit are higher up, as a performance improvement.
     */
    parse() {
        while (this.shouldContinue()) {
            const c = this.buffer.charCodeAt(this.index - this.offset);
            if (this.state === State.Text) {
                this.stateText(c);
            }
            else if (this.state === State.SpecialStartSequence) {
                this.stateSpecialStartSequence(c);
            }
            else if (this.state === State.InSpecialTag) {
                this.stateInSpecialTag(c);
            }
            else if (this.state === State.CDATASequence) {
                this.stateCDATASequence(c);
            }
            else if (this.state === State.InAttributeValueDq) {
                this.stateInAttributeValueDoubleQuotes(c);
            }
            else if (this.state === State.InAttributeName) {
                this.stateInAttributeName(c);
            }
            else if (this.state === State.InCommentLike) {
                this.stateInCommentLike(c);
            }
            else if (this.state === State.InSpecialComment) {
                this.stateInSpecialComment(c);
            }
            else if (this.state === State.BeforeAttributeName) {
                this.stateBeforeAttributeName(c);
            }
            else if (this.state === State.InTagName) {
                this.stateInTagName(c);
            }
            else if (this.state === State.InClosingTagName) {
                this.stateInClosingTagName(c);
            }
            else if (this.state === State.BeforeTagName) {
                this.stateBeforeTagName(c);
            }
            else if (this.state === State.AfterAttributeName) {
                this.stateAfterAttributeName(c);
            }
            else if (this.state === State.InAttributeValueSq) {
                this.stateInAttributeValueSingleQuotes(c);
            }
            else if (this.state === State.BeforeAttributeValue) {
                this.stateBeforeAttributeValue(c);
            }
            else if (this.state === State.BeforeClosingTagName) {
                this.stateBeforeClosingTagName(c);
            }
            else if (this.state === State.AfterClosingTagName) {
                this.stateAfterClosingTagName(c);
            }
            else if (this.state === State.BeforeSpecialS) {
                this.stateBeforeSpecialS(c);
            }
            else if (this.state === State.InAttributeValueNq) {
                this.stateInAttributeValueNoQuotes(c);
            }
            else if (this.state === State.InSelfClosingTag) {
                this.stateInSelfClosingTag(c);
            }
            else if (this.state === State.InDeclaration) {
                this.stateInDeclaration(c);
            }
            else if (this.state === State.BeforeDeclaration) {
                this.stateBeforeDeclaration(c);
            }
            else if (this.state === State.BeforeComment) {
                this.stateBeforeComment(c);
            }
            else if (this.state === State.InProcessingInstruction) {
                this.stateInProcessingInstruction(c);
            }
            else if (this.state === State.InNamedEntity) {
                this.stateInNamedEntity(c);
            }
            else if (this.state === State.BeforeEntity) {
                this.stateBeforeEntity(c);
            }
            else if (this.state === State.InHexEntity) {
                this.stateInHexEntity(c);
            }
            else if (this.state === State.InNumericEntity) {
                this.stateInNumericEntity(c);
            }
            else {
                // `this._state === State.BeforeNumericEntity`
                this.stateBeforeNumericEntity(c);
            }
            this.index++;
        }
        this.cleanup();
    }
    finish() {
        if (this.state === State.InNamedEntity) {
            this.emitNamedEntity();
        }
        // If there is remaining data, emit it in a reasonable way
        if (this.sectionStart < this.index) {
            this.handleTrailingData();
        }
        this.cbs.onend();
    }
    /** Handle any trailing data. */
    handleTrailingData() {
        const endIndex = this.buffer.length + this.offset;
        if (this.state === State.InCommentLike) {
            if (this.currentSequence === Sequences.CdataEnd) {
                this.cbs.oncdata(this.sectionStart, endIndex, 0);
            }
            else {
                this.cbs.oncomment(this.sectionStart, endIndex, 0);
            }
        }
        else if (this.state === State.InNumericEntity &&
            this.allowLegacyEntity()) {
            this.emitNumericEntity(false);
            // All trailing data will have been consumed
        }
        else if (this.state === State.InHexEntity &&
            this.allowLegacyEntity()) {
            this.emitNumericEntity(false);
            // All trailing data will have been consumed
        }
        else if (this.state === State.InTagName ||
            this.state === State.BeforeAttributeName ||
            this.state === State.BeforeAttributeValue ||
            this.state === State.AfterAttributeName ||
            this.state === State.InAttributeName ||
            this.state === State.InAttributeValueSq ||
            this.state === State.InAttributeValueDq ||
            this.state === State.InAttributeValueNq ||
            this.state === State.InClosingTagName) {
            /*
             * If we are currently in an opening or closing tag, us not calling the
             * respective callback signals that the tag should be ignored.
             */
        }
        else {
            this.cbs.ontext(this.sectionStart, endIndex);
        }
    }
    emitPartial(start, endIndex) {
        if (this.baseState !== State.Text &&
            this.baseState !== State.InSpecialTag) {
            this.cbs.onattribdata(start, endIndex);
        }
        else {
            this.cbs.ontext(start, endIndex);
        }
    }
    emitCodePoint(cp) {
        if (this.baseState !== State.Text &&
            this.baseState !== State.InSpecialTag) {
            this.cbs.onattribentity(cp);
        }
        else {
            this.cbs.ontextentity(cp);
        }
    }
}
//# sourceMappingURL=Tokenizer.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/htmlparser2/lib/esm/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/htmlparser2/lib/esm/index.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DefaultHandler": function() { return /* reexport safe */ domhandler__WEBPACK_IMPORTED_MODULE_1__.DomHandler; },
/* harmony export */   "DomHandler": function() { return /* reexport safe */ domhandler__WEBPACK_IMPORTED_MODULE_1__.DomHandler; },
/* harmony export */   "DomUtils": function() { return /* reexport module object */ domutils__WEBPACK_IMPORTED_MODULE_4__; },
/* harmony export */   "ElementType": function() { return /* reexport module object */ domelementtype__WEBPACK_IMPORTED_MODULE_3__; },
/* harmony export */   "Parser": function() { return /* reexport safe */ _Parser_js__WEBPACK_IMPORTED_MODULE_0__.Parser; },
/* harmony export */   "Tokenizer": function() { return /* reexport safe */ _Tokenizer_js__WEBPACK_IMPORTED_MODULE_2__["default"]; },
/* harmony export */   "createDomStream": function() { return /* binding */ createDomStream; },
/* harmony export */   "getFeed": function() { return /* reexport safe */ domutils__WEBPACK_IMPORTED_MODULE_4__.getFeed; },
/* harmony export */   "parseDOM": function() { return /* binding */ parseDOM; },
/* harmony export */   "parseDocument": function() { return /* binding */ parseDocument; },
/* harmony export */   "parseFeed": function() { return /* binding */ parseFeed; }
/* harmony export */ });
/* harmony import */ var _Parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Parser.js */ "./node_modules/linkedom/node_modules/htmlparser2/lib/esm/Parser.js");
/* harmony import */ var domhandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! domhandler */ "./node_modules/linkedom/node_modules/domhandler/lib/esm/index.js");
/* harmony import */ var _Tokenizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Tokenizer.js */ "./node_modules/linkedom/node_modules/htmlparser2/lib/esm/Tokenizer.js");
/* harmony import */ var domelementtype__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! domelementtype */ "./node_modules/linkedom/node_modules/domelementtype/lib/esm/index.js");
/* harmony import */ var domutils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! domutils */ "./node_modules/linkedom/node_modules/domutils/lib/esm/index.js");




// Helper methods
/**
 * Parses the data, returns the resulting document.
 *
 * @param data The data that should be parsed.
 * @param options Optional options for the parser and DOM builder.
 */
function parseDocument(data, options) {
    const handler = new domhandler__WEBPACK_IMPORTED_MODULE_1__.DomHandler(undefined, options);
    new _Parser_js__WEBPACK_IMPORTED_MODULE_0__.Parser(handler, options).end(data);
    return handler.root;
}
/**
 * Parses data, returns an array of the root nodes.
 *
 * Note that the root nodes still have a `Document` node as their parent.
 * Use `parseDocument` to get the `Document` node instead.
 *
 * @param data The data that should be parsed.
 * @param options Optional options for the parser and DOM builder.
 * @deprecated Use `parseDocument` instead.
 */
function parseDOM(data, options) {
    return parseDocument(data, options).children;
}
/**
 * Creates a parser instance, with an attached DOM handler.
 *
 * @param cb A callback that will be called once parsing has been completed.
 * @param options Optional options for the parser and DOM builder.
 * @param elementCb An optional callback that will be called every time a tag has been completed inside of the DOM.
 */
function createDomStream(cb, options, elementCb) {
    const handler = new domhandler__WEBPACK_IMPORTED_MODULE_1__.DomHandler(cb, options, elementCb);
    return new _Parser_js__WEBPACK_IMPORTED_MODULE_0__.Parser(handler, options);
}

/*
 * All of the following exports exist for backwards-compatibility.
 * They should probably be removed eventually.
 */




/**
 * Parse a feed.
 *
 * @param feed The feed that should be parsed, as a string.
 * @param options Optionally, options for parsing. When using this, you should set `xmlMode` to `true`.
 */
function parseFeed(feed, options = { xmlMode: true }) {
    return (0,domutils__WEBPACK_IMPORTED_MODULE_4__.getFeed)(parseDOM(feed, options));
}

// Old name for DomHandler

//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/nth-check/lib/esm/compile.js":
/*!*************************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/nth-check/lib/esm/compile.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "compile": function() { return /* binding */ compile; },
/* harmony export */   "generate": function() { return /* binding */ generate; }
/* harmony export */ });
/* harmony import */ var boolbase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! boolbase */ "./node_modules/boolbase/index.js");

/**
 * Returns a function that checks if an elements index matches the given rule
 * highly optimized to return the fastest solution.
 *
 * @param parsed A tuple [a, b], as returned by `parse`.
 * @returns A highly optimized function that returns whether an index matches the nth-check.
 * @example
 *
 * ```js
 * const check = nthCheck.compile([2, 3]);
 *
 * check(0); // `false`
 * check(1); // `false`
 * check(2); // `true`
 * check(3); // `false`
 * check(4); // `true`
 * check(5); // `false`
 * check(6); // `true`
 * ```
 */
function compile(parsed) {
    const a = parsed[0];
    // Subtract 1 from `b`, to convert from one- to zero-indexed.
    const b = parsed[1] - 1;
    /*
     * When `b <= 0`, `a * n` won't be lead to any matches for `a < 0`.
     * Besides, the specification states that no elements are
     * matched when `a` and `b` are 0.
     *
     * `b < 0` here as we subtracted 1 from `b` above.
     */
    if (b < 0 && a <= 0)
        return boolbase__WEBPACK_IMPORTED_MODULE_0__.falseFunc;
    // When `a` is in the range -1..1, it matches any element (so only `b` is checked).
    if (a === -1)
        return (index) => index <= b;
    if (a === 0)
        return (index) => index === b;
    // When `b <= 0` and `a === 1`, they match any element.
    if (a === 1)
        return b < 0 ? boolbase__WEBPACK_IMPORTED_MODULE_0__.trueFunc : (index) => index >= b;
    /*
     * Otherwise, modulo can be used to check if there is a match.
     *
     * Modulo doesn't care about the sign, so let's use `a`s absolute value.
     */
    const absA = Math.abs(a);
    // Get `b mod a`, + a if this is negative.
    const bMod = ((b % absA) + absA) % absA;
    return a > 1
        ? (index) => index >= b && index % absA === bMod
        : (index) => index <= b && index % absA === bMod;
}
/**
 * Returns a function that produces a monotonously increasing sequence of indices.
 *
 * If the sequence has an end, the returned function will return `null` after
 * the last index in the sequence.
 *
 * @param parsed A tuple [a, b], as returned by `parse`.
 * @returns A function that produces a sequence of indices.
 * @example <caption>Always increasing (2n+3)</caption>
 *
 * ```js
 * const gen = nthCheck.generate([2, 3])
 *
 * gen() // `1`
 * gen() // `3`
 * gen() // `5`
 * gen() // `8`
 * gen() // `11`
 * ```
 *
 * @example <caption>With end value (-2n+10)</caption>
 *
 * ```js
 *
 * const gen = nthCheck.generate([-2, 5]);
 *
 * gen() // 0
 * gen() // 2
 * gen() // 4
 * gen() // null
 * ```
 */
function generate(parsed) {
    const a = parsed[0];
    // Subtract 1 from `b`, to convert from one- to zero-indexed.
    let b = parsed[1] - 1;
    let n = 0;
    // Make sure to always return an increasing sequence
    if (a < 0) {
        const aPos = -a;
        // Get `b mod a`
        const minValue = ((b % aPos) + aPos) % aPos;
        return () => {
            const val = minValue + aPos * n++;
            return val > b ? null : val;
        };
    }
    if (a === 0)
        return b < 0
            ? // There are no result ‚Äî always return `null`
                () => null
            : // Return `b` exactly once
                () => (n++ === 0 ? b : null);
    if (b < 0) {
        b += a * Math.ceil(-b / a);
    }
    return () => a * n++ + b;
}
//# sourceMappingURL=compile.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/nth-check/lib/esm/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/nth-check/lib/esm/index.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "compile": function() { return /* reexport safe */ _compile_js__WEBPACK_IMPORTED_MODULE_1__.compile; },
/* harmony export */   "default": function() { return /* binding */ nthCheck; },
/* harmony export */   "generate": function() { return /* reexport safe */ _compile_js__WEBPACK_IMPORTED_MODULE_1__.generate; },
/* harmony export */   "parse": function() { return /* reexport safe */ _parse_js__WEBPACK_IMPORTED_MODULE_0__.parse; },
/* harmony export */   "sequence": function() { return /* binding */ sequence; }
/* harmony export */ });
/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse.js */ "./node_modules/linkedom/node_modules/nth-check/lib/esm/parse.js");
/* harmony import */ var _compile_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./compile.js */ "./node_modules/linkedom/node_modules/nth-check/lib/esm/compile.js");



/**
 * Parses and compiles a formula to a highly optimized function.
 * Combination of {@link parse} and {@link compile}.
 *
 * If the formula doesn't match any elements,
 * it returns [`boolbase`](https://github.com/fb55/boolbase)'s `falseFunc`.
 * Otherwise, a function accepting an _index_ is returned, which returns
 * whether or not the passed _index_ matches the formula.
 *
 * Note: The nth-rule starts counting at `1`, the returned function at `0`.
 *
 * @param formula The formula to compile.
 * @example
 * const check = nthCheck("2n+3");
 *
 * check(0); // `false`
 * check(1); // `false`
 * check(2); // `true`
 * check(3); // `false`
 * check(4); // `true`
 * check(5); // `false`
 * check(6); // `true`
 */
function nthCheck(formula) {
    return (0,_compile_js__WEBPACK_IMPORTED_MODULE_1__.compile)((0,_parse_js__WEBPACK_IMPORTED_MODULE_0__.parse)(formula));
}
/**
 * Parses and compiles a formula to a generator that produces a sequence of indices.
 * Combination of {@link parse} and {@link generate}.
 *
 * @param formula The formula to compile.
 * @returns A function that produces a sequence of indices.
 * @example <caption>Always increasing</caption>
 *
 * ```js
 * const gen = nthCheck.sequence('2n+3')
 *
 * gen() // `1`
 * gen() // `3`
 * gen() // `5`
 * gen() // `8`
 * gen() // `11`
 * ```
 *
 * @example <caption>With end value</caption>
 *
 * ```js
 *
 * const gen = nthCheck.sequence('-2n+5');
 *
 * gen() // 0
 * gen() // 2
 * gen() // 4
 * gen() // null
 * ```
 */
function sequence(formula) {
    return (0,_compile_js__WEBPACK_IMPORTED_MODULE_1__.generate)((0,_parse_js__WEBPACK_IMPORTED_MODULE_0__.parse)(formula));
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/linkedom/node_modules/nth-check/lib/esm/parse.js":
/*!***********************************************************************!*\
  !*** ./node_modules/linkedom/node_modules/nth-check/lib/esm/parse.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parse": function() { return /* binding */ parse; }
/* harmony export */ });
// Following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo
// Whitespace as per https://www.w3.org/TR/selectors-3/#lex is " \t\r\n\f"
const whitespace = new Set([9, 10, 12, 13, 32]);
const ZERO = "0".charCodeAt(0);
const NINE = "9".charCodeAt(0);
/**
 * Parses an expression.
 *
 * @throws An `Error` if parsing fails.
 * @returns An array containing the integer step size and the integer offset of the nth rule.
 * @example nthCheck.parse("2n+3"); // returns [2, 3]
 */
function parse(formula) {
    formula = formula.trim().toLowerCase();
    if (formula === "even") {
        return [2, 0];
    }
    else if (formula === "odd") {
        return [2, 1];
    }
    // Parse [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?
    let idx = 0;
    let a = 0;
    let sign = readSign();
    let number = readNumber();
    if (idx < formula.length && formula.charAt(idx) === "n") {
        idx++;
        a = sign * (number !== null && number !== void 0 ? number : 1);
        skipWhitespace();
        if (idx < formula.length) {
            sign = readSign();
            skipWhitespace();
            number = readNumber();
        }
        else {
            sign = number = 0;
        }
    }
    // Throw if there is anything else
    if (number === null || idx < formula.length) {
        throw new Error(`n-th rule couldn't be parsed ('${formula}')`);
    }
    return [a, sign * number];
    function readSign() {
        if (formula.charAt(idx) === "-") {
            idx++;
            return -1;
        }
        if (formula.charAt(idx) === "+") {
            idx++;
        }
        return 1;
    }
    function readNumber() {
        const start = idx;
        let value = 0;
        while (idx < formula.length &&
            formula.charCodeAt(idx) >= ZERO &&
            formula.charCodeAt(idx) <= NINE) {
            value = value * 10 + (formula.charCodeAt(idx) - ZERO);
            idx++;
        }
        // Return `null` if we didn't read anything.
        return idx === start ? null : value;
    }
    function skipWhitespace() {
        while (idx < formula.length &&
            whitespace.has(formula.charCodeAt(idx))) {
            idx++;
        }
    }
}
//# sourceMappingURL=parse.js.map

/***/ }),

/***/ "./node_modules/uhyphen/esm/index.js":
/*!*******************************************!*\
  !*** ./node_modules/uhyphen/esm/index.js ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (camel => camel.replace(/(([A-Z0-9])([A-Z0-9][a-z]))|(([a-z])([A-Z]))/g, '$2$5-$3$6')
                             .toLowerCase());


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/async module */
/******/ 	!function() {
/******/ 		var webpackQueues = typeof Symbol === "function" ? Symbol("webpack queues") : "__webpack_queues__";
/******/ 		var webpackExports = typeof Symbol === "function" ? Symbol("webpack exports") : "__webpack_exports__";
/******/ 		var webpackError = typeof Symbol === "function" ? Symbol("webpack error") : "__webpack_error__";
/******/ 		var resolveQueue = function(queue) {
/******/ 			if(queue && !queue.d) {
/******/ 				queue.d = 1;
/******/ 				queue.forEach(function(fn) { fn.r--; });
/******/ 				queue.forEach(function(fn) { fn.r-- ? fn.r++ : fn(); });
/******/ 			}
/******/ 		}
/******/ 		var wrapDeps = function(deps) { return deps.map(function(dep) {
/******/ 			if(dep !== null && typeof dep === "object") {
/******/ 				if(dep[webpackQueues]) return dep;
/******/ 				if(dep.then) {
/******/ 					var queue = [];
/******/ 					queue.d = 0;
/******/ 					dep.then(function(r) {
/******/ 						obj[webpackExports] = r;
/******/ 						resolveQueue(queue);
/******/ 					}, function(e) {
/******/ 						obj[webpackError] = e;
/******/ 						resolveQueue(queue);
/******/ 					});
/******/ 					var obj = {};
/******/ 					obj[webpackQueues] = function(fn) { fn(queue); };
/******/ 					return obj;
/******/ 				}
/******/ 			}
/******/ 			var ret = {};
/******/ 			ret[webpackQueues] = function() {};
/******/ 			ret[webpackExports] = dep;
/******/ 			return ret;
/******/ 		}); };
/******/ 		__webpack_require__.a = function(module, body, hasAwait) {
/******/ 			var queue;
/******/ 			hasAwait && ((queue = []).d = 1);
/******/ 			var depQueues = new Set();
/******/ 			var exports = module.exports;
/******/ 			var currentDeps;
/******/ 			var outerResolve;
/******/ 			var reject;
/******/ 			var promise = new Promise(function(resolve, rej) {
/******/ 				reject = rej;
/******/ 				outerResolve = resolve;
/******/ 			});
/******/ 			promise[webpackExports] = exports;
/******/ 			promise[webpackQueues] = function(fn) { queue && fn(queue), depQueues.forEach(fn), promise["catch"](function() {}); };
/******/ 			module.exports = promise;
/******/ 			body(function(deps) {
/******/ 				currentDeps = wrapDeps(deps);
/******/ 				var fn;
/******/ 				var getResult = function() { return currentDeps.map(function(d) {
/******/ 					if(d[webpackError]) throw d[webpackError];
/******/ 					return d[webpackExports];
/******/ 				}); }
/******/ 				var promise = new Promise(function(resolve) {
/******/ 					fn = function() { resolve(getResult); };
/******/ 					fn.r = 0;
/******/ 					var fnQueue = function(q) { q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))); };
/******/ 					currentDeps.map(function(dep) { dep[webpackQueues](fnQueue); });
/******/ 				});
/******/ 				return fn.r ? promise : getResult();
/******/ 			}, function(err) { (err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue); });
/******/ 			queue && (queue.d = 0);
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	!function() {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module used 'module' so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/extension/sw.js");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,